
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006014  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080061a8  080061a8  000161a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f8  080063f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006400  08006400  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  08006478  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08006478  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe68  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d47  00000000  00000000  0002ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00031c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00032a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221b9  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f973  00000000  00000000  000559b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d487b  00000000  00000000  00065324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139b9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004208  00000000  00000000  00139bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800618c 	.word	0x0800618c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800618c 	.word	0x0800618c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b974 	b.w	8000e6c <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468e      	mov	lr, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14d      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000baa:	428a      	cmp	r2, r1
 8000bac:	4694      	mov	ip, r2
 8000bae:	d969      	bls.n	8000c84 <__udivmoddi4+0xe8>
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	b152      	cbz	r2, 8000bcc <__udivmoddi4+0x30>
 8000bb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bba:	f1c2 0120 	rsb	r1, r2, #32
 8000bbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000bc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bca:	4094      	lsls	r4, r2
 8000bcc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd0:	0c21      	lsrs	r1, r4, #16
 8000bd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000bd6:	fa1f f78c 	uxth.w	r7, ip
 8000bda:	fb08 e316 	mls	r3, r8, r6, lr
 8000bde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000be2:	fb06 f107 	mul.w	r1, r6, r7
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bf2:	f080 811f 	bcs.w	8000e34 <__udivmoddi4+0x298>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 811c 	bls.w	8000e34 <__udivmoddi4+0x298>
 8000bfc:	3e02      	subs	r6, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c08:	fb08 3310 	mls	r3, r8, r0, r3
 8000c0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c10:	fb00 f707 	mul.w	r7, r0, r7
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	d90a      	bls.n	8000c2e <__udivmoddi4+0x92>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c20:	f080 810a 	bcs.w	8000e38 <__udivmoddi4+0x29c>
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	f240 8107 	bls.w	8000e38 <__udivmoddi4+0x29c>
 8000c2a:	4464      	add	r4, ip
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c32:	1be4      	subs	r4, r4, r7
 8000c34:	2600      	movs	r6, #0
 8000c36:	b11d      	cbz	r5, 8000c40 <__udivmoddi4+0xa4>
 8000c38:	40d4      	lsrs	r4, r2
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0xc2>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	f000 80ef 	beq.w	8000e2e <__udivmoddi4+0x292>
 8000c50:	2600      	movs	r6, #0
 8000c52:	e9c5 0100 	strd	r0, r1, [r5]
 8000c56:	4630      	mov	r0, r6
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	fab3 f683 	clz	r6, r3
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	d14a      	bne.n	8000cfc <__udivmoddi4+0x160>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xd4>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 80f9 	bhi.w	8000e62 <__udivmoddi4+0x2c6>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb61 0303 	sbc.w	r3, r1, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	469e      	mov	lr, r3
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e0      	beq.n	8000c40 <__udivmoddi4+0xa4>
 8000c7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c82:	e7dd      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000c84:	b902      	cbnz	r2, 8000c88 <__udivmoddi4+0xec>
 8000c86:	deff      	udf	#255	; 0xff
 8000c88:	fab2 f282 	clz	r2, r2
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f040 8092 	bne.w	8000db6 <__udivmoddi4+0x21a>
 8000c92:	eba1 010c 	sub.w	r1, r1, ip
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	0c20      	lsrs	r0, r4, #16
 8000ca2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ca6:	fb07 1113 	mls	r1, r7, r3, r1
 8000caa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cae:	fb0e f003 	mul.w	r0, lr, r3
 8000cb2:	4288      	cmp	r0, r1
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x12c>
 8000cb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x12a>
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	f200 80cb 	bhi.w	8000e5c <__udivmoddi4+0x2c0>
 8000cc6:	4643      	mov	r3, r8
 8000cc8:	1a09      	subs	r1, r1, r0
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000cd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cdc:	45a6      	cmp	lr, r4
 8000cde:	d908      	bls.n	8000cf2 <__udivmoddi4+0x156>
 8000ce0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ce8:	d202      	bcs.n	8000cf0 <__udivmoddi4+0x154>
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	f200 80bb 	bhi.w	8000e66 <__udivmoddi4+0x2ca>
 8000cf0:	4608      	mov	r0, r1
 8000cf2:	eba4 040e 	sub.w	r4, r4, lr
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x9a>
 8000cfc:	f1c6 0720 	rsb	r7, r6, #32
 8000d00:	40b3      	lsls	r3, r6
 8000d02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d12:	431c      	orrs	r4, r3
 8000d14:	40f9      	lsrs	r1, r7
 8000d16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d22:	0c20      	lsrs	r0, r4, #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fb09 1118 	mls	r1, r9, r8, r1
 8000d2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d30:	fb08 f00e 	mul.w	r0, r8, lr
 8000d34:	4288      	cmp	r0, r1
 8000d36:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b8>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d44:	f080 8088 	bcs.w	8000e58 <__udivmoddi4+0x2bc>
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	f240 8085 	bls.w	8000e58 <__udivmoddi4+0x2bc>
 8000d4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d52:	4461      	add	r1, ip
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d68:	458e      	cmp	lr, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1e2>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d74:	d26c      	bcs.n	8000e50 <__udivmoddi4+0x2b4>
 8000d76:	458e      	cmp	lr, r1
 8000d78:	d96a      	bls.n	8000e50 <__udivmoddi4+0x2b4>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d82:	fba0 9402 	umull	r9, r4, r0, r2
 8000d86:	eba1 010e 	sub.w	r1, r1, lr
 8000d8a:	42a1      	cmp	r1, r4
 8000d8c:	46c8      	mov	r8, r9
 8000d8e:	46a6      	mov	lr, r4
 8000d90:	d356      	bcc.n	8000e40 <__udivmoddi4+0x2a4>
 8000d92:	d053      	beq.n	8000e3c <__udivmoddi4+0x2a0>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x212>
 8000d96:	ebb3 0208 	subs.w	r2, r3, r8
 8000d9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000da2:	fa22 f306 	lsr.w	r3, r2, r6
 8000da6:	40f1      	lsrs	r1, r6
 8000da8:	431f      	orrs	r7, r3
 8000daa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	f1c2 0320 	rsb	r3, r2, #32
 8000dba:	40d8      	lsrs	r0, r3
 8000dbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc4:	4091      	lsls	r1, r2
 8000dc6:	4301      	orrs	r1, r0
 8000dc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dcc:	fa1f fe8c 	uxth.w	lr, ip
 8000dd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd8:	0c0b      	lsrs	r3, r1, #16
 8000dda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dde:	fb00 f60e 	mul.w	r6, r0, lr
 8000de2:	429e      	cmp	r6, r3
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x260>
 8000dea:	eb1c 0303 	adds.w	r3, ip, r3
 8000dee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df2:	d22f      	bcs.n	8000e54 <__udivmoddi4+0x2b8>
 8000df4:	429e      	cmp	r6, r3
 8000df6:	d92d      	bls.n	8000e54 <__udivmoddi4+0x2b8>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	1b9b      	subs	r3, r3, r6
 8000dfe:	b289      	uxth	r1, r1
 8000e00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e04:	fb07 3316 	mls	r3, r7, r6, r3
 8000e08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x28a>
 8000e14:	eb1c 0101 	adds.w	r1, ip, r1
 8000e18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e1c:	d216      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d914      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000e22:	3e02      	subs	r6, #2
 8000e24:	4461      	add	r1, ip
 8000e26:	1ac9      	subs	r1, r1, r3
 8000e28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e2c:	e738      	b.n	8000ca0 <__udivmoddi4+0x104>
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e705      	b.n	8000c40 <__udivmoddi4+0xa4>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e3      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6f8      	b.n	8000c2e <__udivmoddi4+0x92>
 8000e3c:	454b      	cmp	r3, r9
 8000e3e:	d2a9      	bcs.n	8000d94 <__udivmoddi4+0x1f8>
 8000e40:	ebb9 0802 	subs.w	r8, r9, r2
 8000e44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7a3      	b.n	8000d94 <__udivmoddi4+0x1f8>
 8000e4c:	4646      	mov	r6, r8
 8000e4e:	e7ea      	b.n	8000e26 <__udivmoddi4+0x28a>
 8000e50:	4620      	mov	r0, r4
 8000e52:	e794      	b.n	8000d7e <__udivmoddi4+0x1e2>
 8000e54:	4640      	mov	r0, r8
 8000e56:	e7d1      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e58:	46d0      	mov	r8, sl
 8000e5a:	e77b      	b.n	8000d54 <__udivmoddi4+0x1b8>
 8000e5c:	3b02      	subs	r3, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	e732      	b.n	8000cc8 <__udivmoddi4+0x12c>
 8000e62:	4630      	mov	r0, r6
 8000e64:	e709      	b.n	8000c7a <__udivmoddi4+0xde>
 8000e66:	4464      	add	r4, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e742      	b.n	8000cf2 <__udivmoddi4+0x156>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d104      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e86:	f000 ff79 	bl	8001d7c <HAL_GPIO_TogglePin>
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000008c 	.word	0x2000008c
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <calc_pwm>:
float calc_pwm(float val)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	ed87 0a01 	vstr	s0, [r7, #4]
    const float k = 0.13f;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <calc_pwm+0x80>)
 8000eac:	60fb      	str	r3, [r7, #12]
    const float x0 = 70.0f;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <calc_pwm+0x84>)
 8000eb0:	60bb      	str	r3, [r7, #8]
    return 10000.0f / (1.0f + exp(-k * (val - x0)));
 8000eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb6:	eeb1 7a67 	vneg.f32	s14, s15
 8000eba:	edd7 6a01 	vldr	s13, [r7, #4]
 8000ebe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ec2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eca:	ee17 0a90 	vmov	r0, s15
 8000ece:	f7ff fae3 	bl	8000498 <__aeabi_f2d>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	ec43 2b10 	vmov	d0, r2, r3
 8000eda:	f003 ff5d 	bl	8004d98 <exp>
 8000ede:	ec51 0b10 	vmov	r0, r1, d0
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <calc_pwm+0x88>)
 8000ee8:	f7ff f978 	bl	80001dc <__adddf3>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	a109      	add	r1, pc, #36	; (adr r1, 8000f18 <calc_pwm+0x78>)
 8000ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ef6:	f7ff fc51 	bl	800079c <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fde3 	bl	8000acc <__aeabi_d2f>
 8000f06:	4603      	mov	r3, r0
 8000f08:	ee07 3a90 	vmov	s15, r3
}
 8000f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	40c38800 	.word	0x40c38800
 8000f20:	3e051eb8 	.word	0x3e051eb8
 8000f24:	428c0000 	.word	0x428c0000
 8000f28:	3ff00000 	.word	0x3ff00000

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f000 fbdf 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f8d3 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f000 f9e5 	bl	8001308 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f3e:	f000 f9b3 	bl	80012a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f42:	f000 f91f 	bl	8001184 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 8000f46:	4862      	ldr	r0, [pc, #392]	; (80010d0 <main+0x1a4>)
 8000f48:	f002 f962 	bl	8003210 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4860      	ldr	r0, [pc, #384]	; (80010d0 <main+0x1a4>)
 8000f50:	f002 fa14 	bl	800337c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f54:	2104      	movs	r1, #4
 8000f56:	485e      	ldr	r0, [pc, #376]	; (80010d0 <main+0x1a4>)
 8000f58:	f002 fa10 	bl	800337c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	485c      	ldr	r0, [pc, #368]	; (80010d0 <main+0x1a4>)
 8000f60:	f002 fa0c 	bl	800337c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter;
  while (1)
  {
	  float r = 50 * (1.0f + sin(counter / 100.0f));
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	ee07 3a90 	vmov	s15, r3
 8000f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80010d4 <main+0x1a8>
 8000f72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f76:	ee16 0a90 	vmov	r0, s13
 8000f7a:	f7ff fa8d 	bl	8000498 <__aeabi_f2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	ec43 2b10 	vmov	d0, r2, r3
 8000f86:	f003 feaf 	bl	8004ce8 <sin>
 8000f8a:	ec51 0b10 	vmov	r0, r1, d0
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	4b51      	ldr	r3, [pc, #324]	; (80010d8 <main+0x1ac>)
 8000f94:	f7ff f922 	bl	80001dc <__adddf3>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	4b4d      	ldr	r3, [pc, #308]	; (80010dc <main+0x1b0>)
 8000fa6:	f7ff facf 	bl	8000548 <__aeabi_dmul>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fd8b 	bl	8000acc <__aeabi_d2f>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	60bb      	str	r3, [r7, #8]
  float g = 50 * (1.0f + sin(1.5f * counter / 100.0f));
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8000fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fcc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80010d4 <main+0x1a8>
 8000fd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd4:	ee16 0a90 	vmov	r0, s13
 8000fd8:	f7ff fa5e 	bl	8000498 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	ec43 2b10 	vmov	d0, r2, r3
 8000fe4:	f003 fe80 	bl	8004ce8 <sin>
 8000fe8:	ec51 0b10 	vmov	r0, r1, d0
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <main+0x1ac>)
 8000ff2:	f7ff f8f3 	bl	80001dc <__adddf3>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <main+0x1b0>)
 8001004:	f7ff faa0 	bl	8000548 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd5c 	bl	8000acc <__aeabi_d2f>
 8001014:	4603      	mov	r3, r0
 8001016:	607b      	str	r3, [r7, #4]
  float b = 50 * (1.0f + sin(2.0f * counter / 100.0f));
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001022:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001026:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80010d4 <main+0x1a8>
 800102a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800102e:	ee16 0a90 	vmov	r0, s13
 8001032:	f7ff fa31 	bl	8000498 <__aeabi_f2d>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	ec43 2b10 	vmov	d0, r2, r3
 800103e:	f003 fe53 	bl	8004ce8 <sin>
 8001042:	ec51 0b10 	vmov	r0, r1, d0
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <main+0x1ac>)
 800104c:	f7ff f8c6 	bl	80001dc <__adddf3>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <main+0x1b0>)
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd2f 	bl	8000acc <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	603b      	str	r3, [r7, #0]
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, calc_pwm(b));
 8001072:	ed97 0a00 	vldr	s0, [r7]
 8001076:	f7ff ff13 	bl	8000ea0 <calc_pwm>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <main+0x1a4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001086:	ee17 2a90 	vmov	r2, s15
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, calc_pwm(g));
 800108c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001090:	f7ff ff06 	bl	8000ea0 <calc_pwm>
 8001094:	eef0 7a40 	vmov.f32	s15, s0
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <main+0x1a4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a0:	ee17 2a90 	vmov	r2, s15
 80010a4:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, calc_pwm(r));
 80010a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80010aa:	f7ff fef9 	bl	8000ea0 <calc_pwm>
 80010ae:	eef0 7a40 	vmov.f32	s15, s0
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <main+0x1a4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ba:	ee17 2a90 	vmov	r2, s15
 80010be:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f000 fb93 	bl	80017ec <HAL_Delay>
  counter++;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
  {
 80010cc:	e74a      	b.n	8000f64 <main+0x38>
 80010ce:	bf00      	nop
 80010d0:	2000008c 	.word	0x2000008c
 80010d4:	42c80000 	.word	0x42c80000
 80010d8:	3ff00000 	.word	0x3ff00000
 80010dc:	40490000 	.word	0x40490000

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b096      	sub	sp, #88	; 0x58
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	2244      	movs	r2, #68	; 0x44
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fdf0 	bl	8004cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	463b      	mov	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001102:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001106:	f000 fe61 	bl	8001dcc <HAL_PWREx_ControlVoltageScaling>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001110:	f000 f984 	bl	800141c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111e:	2310      	movs	r3, #16
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001126:	2302      	movs	r3, #2
 8001128:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800112e:	230a      	movs	r3, #10
 8001130:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001132:	2307      	movs	r3, #7
 8001134:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001136:	2302      	movs	r3, #2
 8001138:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fe98 	bl	8001e78 <HAL_RCC_OscConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800114e:	f000 f965 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	230f      	movs	r3, #15
 8001154:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2303      	movs	r3, #3
 8001158:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	2104      	movs	r1, #4
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fa98 	bl	80026a0 <HAL_RCC_ClockConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001176:	f000 f951 	bl	800141c <Error_Handler>
  }
}
 800117a:	bf00      	nop
 800117c:	3758      	adds	r7, #88	; 0x58
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08e      	sub	sp, #56	; 0x38
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <MX_TIM2_Init+0x120>)
 80011b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <MX_TIM2_Init+0x120>)
 80011c0:	224f      	movs	r2, #79	; 0x4f
 80011c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <MX_TIM2_Init+0x120>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <MX_TIM2_Init+0x120>)
 80011cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80011d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <MX_TIM2_Init+0x120>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <MX_TIM2_Init+0x120>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011de:	4831      	ldr	r0, [pc, #196]	; (80012a4 <MX_TIM2_Init+0x120>)
 80011e0:	f001 ffbe 	bl	8003160 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011ea:	f000 f917 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f8:	4619      	mov	r1, r3
 80011fa:	482a      	ldr	r0, [pc, #168]	; (80012a4 <MX_TIM2_Init+0x120>)
 80011fc:	f002 fbd0 	bl	80039a0 <HAL_TIM_ConfigClockSource>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001206:	f000 f909 	bl	800141c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800120a:	4826      	ldr	r0, [pc, #152]	; (80012a4 <MX_TIM2_Init+0x120>)
 800120c:	f002 f854 	bl	80032b8 <HAL_TIM_PWM_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001216:	f000 f901 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	481e      	ldr	r0, [pc, #120]	; (80012a4 <MX_TIM2_Init+0x120>)
 800122a:	f003 f84d 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001234:	f000 f8f2 	bl	800141c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001238:	2360      	movs	r3, #96	; 0x60
 800123a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001240:	2302      	movs	r3, #2
 8001242:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	4815      	ldr	r0, [pc, #84]	; (80012a4 <MX_TIM2_Init+0x120>)
 8001250:	f002 fa92 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800125a:	f000 f8df 	bl	800141c <Error_Handler>
  }
  sConfigOC.Pulse = 300;
 800125e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2204      	movs	r2, #4
 8001268:	4619      	mov	r1, r3
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <MX_TIM2_Init+0x120>)
 800126c:	f002 fa84 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8001276:	f000 f8d1 	bl	800141c <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 800127a:	f241 3388 	movw	r3, #5000	; 0x1388
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	2208      	movs	r2, #8
 8001284:	4619      	mov	r1, r3
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_TIM2_Init+0x120>)
 8001288:	f002 fa76 	bl	8003778 <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8001292:	f000 f8c3 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <MX_TIM2_Init+0x120>)
 8001298:	f000 f90e 	bl	80014b8 <HAL_TIM_MspPostInit>

}
 800129c:	bf00      	nop
 800129e:	3738      	adds	r7, #56	; 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000008c 	.word	0x2000008c

080012a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <MX_USART2_UART_Init+0x5c>)
 80012b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012ce:	220c      	movs	r2, #12
 80012d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART2_UART_Init+0x58>)
 80012ec:	f003 f870 	bl	80043d0 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012f6:	f000 f891 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000d8 	.word	0x200000d8
 8001304:	40004400 	.word	0x40004400

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131e:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <MX_GPIO_Init+0x108>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <MX_GPIO_Init+0x108>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <MX_GPIO_Init+0x108>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <MX_GPIO_Init+0x108>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a35      	ldr	r2, [pc, #212]	; (8001410 <MX_GPIO_Init+0x108>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <MX_GPIO_Init+0x108>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <MX_GPIO_Init+0x108>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <MX_GPIO_Init+0x108>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <MX_GPIO_Init+0x108>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <MX_GPIO_Init+0x108>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4a29      	ldr	r2, [pc, #164]	; (8001410 <MX_GPIO_Init+0x108>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <MX_GPIO_Init+0x108>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	21b0      	movs	r1, #176	; 0xb0
 8001382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001386:	f000 fce1 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	4820      	ldr	r0, [pc, #128]	; (8001414 <MX_GPIO_Init+0x10c>)
 8001392:	f000 fcdb 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800139c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <MX_GPIO_Init+0x110>)
 80013ae:	f000 fb53 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 80013b2:	23b0      	movs	r3, #176	; 0xb0
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f000 fb44 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80013d0:	2340      	movs	r3, #64	; 0x40
 80013d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d8:	2301      	movs	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f000 fb37 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_GPIO_Init+0x10c>)
 8001404:	f000 fb28 	bl	8001a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	48000400 	.word	0x48000400
 8001418:	48000800 	.word	0x48000800

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x44>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_MspInit+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6613      	str	r3, [r2, #96]	; 0x60
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x44>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x44>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6593      	str	r3, [r2, #88]	; 0x58
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001480:	d113      	bne.n	80014aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_TIM_Base_MspInit+0x44>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_TIM_Base_MspInit+0x44>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6593      	str	r3, [r2, #88]	; 0x58
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_TIM_Base_MspInit+0x44>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	210a      	movs	r1, #10
 800149e:	201c      	movs	r0, #28
 80014a0:	f000 faa3 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014a4:	201c      	movs	r0, #28
 80014a6:	f000 fabc 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000

080014b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d8:	d139      	bne.n	800154e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_TIM_MspPostInit+0xa0>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a1e      	ldr	r2, [pc, #120]	; (8001558 <HAL_TIM_MspPostInit+0xa0>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_TIM_MspPostInit+0xa0>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_TIM_MspPostInit+0xa0>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_TIM_MspPostInit+0xa0>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_TIM_MspPostInit+0xa0>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150a:	2303      	movs	r3, #3
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800151a:	2301      	movs	r3, #1
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f000 fa96 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800152c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800153e:	2301      	movs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <HAL_TIM_MspPostInit+0xa4>)
 800154a:	f000 fa85 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	48000400 	.word	0x48000400

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0a2      	sub	sp, #136	; 0x88
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2260      	movs	r2, #96	; 0x60
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fba7 	bl	8004cd4 <memset>
  if(huart->Instance==USART2)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a20      	ldr	r2, [pc, #128]	; (800160c <HAL_UART_MspInit+0xac>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d138      	bne.n	8001602 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001590:	2302      	movs	r3, #2
 8001592:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4618      	mov	r0, r3
 800159e:	f001 faa3 	bl	8002ae8 <HAL_RCCEx_PeriphCLKConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015a8:	f7ff ff38 	bl	800141c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_UART_MspInit+0xb0>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_UART_MspInit+0xb0>)
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b6:	6593      	str	r3, [r2, #88]	; 0x58
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_UART_MspInit+0xb0>)
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_UART_MspInit+0xb0>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_UART_MspInit+0xb0>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_UART_MspInit+0xb0>)
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015dc:	230c      	movs	r3, #12
 80015de:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ee:	2307      	movs	r3, #7
 80015f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f000 fa2b 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3788      	adds	r7, #136	; 0x88
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40004400 	.word	0x40004400
 8001610:	40021000 	.word	0x40021000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001660:	f000 f8a4 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM2_IRQHandler+0x10>)
 800166e:	f001 ff63 	bl	8003538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000008c 	.word	0x2000008c

0800167c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <SystemInit+0x20>)
 8001682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <SystemInit+0x20>)
 8001688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800168c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016a4:	f7ff ffea 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	; (80016dc <LoopForever+0x6>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	; (80016e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <LoopForever+0xe>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	; (80016ec <LoopForever+0x16>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ce:	f003 fadd 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016d2:	f7ff fc2b 	bl	8000f2c <main>

080016d6 <LoopForever>:

LoopForever:
    b LoopForever
 80016d6:	e7fe      	b.n	80016d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016e4:	08006408 	.word	0x08006408
  ldr r2, =_sbss
 80016e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016ec:	20000160 	.word	0x20000160

080016f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC1_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <HAL_Init+0x3c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_Init+0x3c>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170a:	2003      	movs	r0, #3
 800170c:	f000 f962 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f80f 	bl	8001734 <HAL_InitTick>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	71fb      	strb	r3, [r7, #7]
 8001720:	e001      	b.n	8001726 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001722:	f7ff fe81 	bl	8001428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001726:	79fb      	ldrb	r3, [r7, #7]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40022000 	.word	0x40022000

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <HAL_InitTick+0x6c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d023      	beq.n	8001790 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_InitTick+0x70>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_InitTick+0x6c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 f96d 	bl	8001a3e <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10f      	bne.n	800178a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d809      	bhi.n	8001784 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f937 	bl	80019ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800177c:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <HAL_InitTick+0x74>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e007      	b.n	8001794 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e004      	b.n	8001794 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	e001      	b.n	8001794 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000008 	.word	0x20000008
 80017d0:	2000015c 	.word	0x2000015c

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2000015c 	.word	0x2000015c

080017ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff ffee 	bl	80017d4 <HAL_GetTick>
 80017f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d005      	beq.n	8001812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_Delay+0x44>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001812:	bf00      	nop
 8001814:	f7ff ffde 	bl	80017d4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8f7      	bhi.n	8001814 <HAL_Delay+0x28>
  {
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff3e 	bl	800187c <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff8e 	bl	8001928 <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5d 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff31 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	e154      	b.n	8001d12 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8146 	beq.w	8001d0c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d005      	beq.n	8001a98 <HAL_GPIO_Init+0x40>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d130      	bne.n	8001afa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ace:	2201      	movs	r2, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	091b      	lsrs	r3, r3, #4
 8001ae4:	f003 0201 	and.w	r2, r3, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d017      	beq.n	8001b36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d123      	bne.n	8001b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	6939      	ldr	r1, [r7, #16]
 8001b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0203 	and.w	r2, r3, #3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80a0 	beq.w	8001d0c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <HAL_GPIO_Init+0x2d8>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	4a57      	ldr	r2, [pc, #348]	; (8001d30 <HAL_GPIO_Init+0x2d8>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd8:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <HAL_GPIO_Init+0x2d8>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001be4:	4a53      	ldr	r2, [pc, #332]	; (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c0e:	d019      	beq.n	8001c44 <HAL_GPIO_Init+0x1ec>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a49      	ldr	r2, [pc, #292]	; (8001d38 <HAL_GPIO_Init+0x2e0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d013      	beq.n	8001c40 <HAL_GPIO_Init+0x1e8>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a48      	ldr	r2, [pc, #288]	; (8001d3c <HAL_GPIO_Init+0x2e4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d00d      	beq.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a47      	ldr	r2, [pc, #284]	; (8001d40 <HAL_GPIO_Init+0x2e8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d007      	beq.n	8001c38 <HAL_GPIO_Init+0x1e0>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a46      	ldr	r2, [pc, #280]	; (8001d44 <HAL_GPIO_Init+0x2ec>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_GPIO_Init+0x1dc>
 8001c30:	2304      	movs	r3, #4
 8001c32:	e008      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c34:	2307      	movs	r3, #7
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x1ee>
 8001c44:	2300      	movs	r3, #0
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c56:	4937      	ldr	r1, [pc, #220]	; (8001d34 <HAL_GPIO_Init+0x2dc>)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c64:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c88:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb2:	4a25      	ldr	r2, [pc, #148]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cb8:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cdc:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f aea3 	bne.w	8001a68 <HAL_GPIO_Init+0x10>
  }
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00
 8001d44:	48001000 	.word	0x48001000
 8001d48:	40010400 	.word	0x40010400

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43d9      	mvns	r1, r3
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40007000 	.word	0x40007000

08001dcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dda:	d130      	bne.n	8001e3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001de8:	d038      	beq.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001df2:	4a1e      	ldr	r2, [pc, #120]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001df4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2232      	movs	r2, #50	; 0x32
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	0c9b      	lsrs	r3, r3, #18
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e10:	e002      	b.n	8001e18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e24:	d102      	bne.n	8001e2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f2      	bne.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e38:	d110      	bne.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e00f      	b.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4a:	d007      	beq.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e54:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40007000 	.word	0x40007000
 8001e70:	20000000 	.word	0x20000000
 8001e74:	431bde83 	.word	0x431bde83

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f000 bc02 	b.w	8002690 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8c:	4b96      	ldr	r3, [pc, #600]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 030c 	and.w	r3, r3, #12
 8001e94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e96:	4b94      	ldr	r3, [pc, #592]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80e4 	beq.w	8002076 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4c>
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	f040 808b 	bne.w	8001fd2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	f040 8087 	bne.w	8001fd2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ec4:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_OscConfig+0x64>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e3d9      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x7e>
 8001eec:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef4:	e005      	b.n	8001f02 <HAL_RCC_OscConfig+0x8a>
 8001ef6:	4b7c      	ldr	r3, [pc, #496]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d223      	bcs.n	8001f4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fd8c 	bl	8002a28 <RCC_SetFlashLatencyFromMSIRange>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e3ba      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a72      	ldr	r2, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f20:	f043 0308 	orr.w	r3, r3, #8
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	496d      	ldr	r1, [pc, #436]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f38:	4b6b      	ldr	r3, [pc, #428]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	4968      	ldr	r1, [pc, #416]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
 8001f4c:	e025      	b.n	8001f9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4e:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4960      	ldr	r1, [pc, #384]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f6c:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	495b      	ldr	r1, [pc, #364]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fd4c 	bl	8002a28 <RCC_SetFlashLatencyFromMSIRange>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e37a      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f9a:	f000 fc81 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	4950      	ldr	r1, [pc, #320]	; (80020ec <HAL_RCC_OscConfig+0x274>)
 8001fac:	5ccb      	ldrb	r3, [r1, r3]
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb6:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <HAL_RCC_OscConfig+0x278>)
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff fbb8 	bl	8001734 <HAL_InitTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d052      	beq.n	8002074 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	e35e      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d032      	beq.n	8002040 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a42      	ldr	r2, [pc, #264]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fbf5 	bl	80017d4 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fee:	f7ff fbf1 	bl	80017d4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e347      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002000:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200c:	4b36      	ldr	r3, [pc, #216]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a35      	ldr	r2, [pc, #212]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002012:	f043 0308 	orr.w	r3, r3, #8
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4930      	ldr	r1, [pc, #192]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002026:	4313      	orrs	r3, r2
 8002028:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202a:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	492b      	ldr	r1, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
 800203e:	e01a      	b.n	8002076 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a28      	ldr	r2, [pc, #160]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800204c:	f7ff fbc2 	bl	80017d4 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002054:	f7ff fbbe 	bl	80017d4 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e314      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x1dc>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d073      	beq.n	800216a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b08      	cmp	r3, #8
 8002086:	d005      	beq.n	8002094 <HAL_RCC_OscConfig+0x21c>
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d10e      	bne.n	80020ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d10b      	bne.n	80020ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d063      	beq.n	8002168 <HAL_RCC_OscConfig+0x2f0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d15f      	bne.n	8002168 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e2f1      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x24c>
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e025      	b.n	8002110 <HAL_RCC_OscConfig+0x298>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d114      	bne.n	80020f8 <HAL_RCC_OscConfig+0x280>
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a02      	ldr	r2, [pc, #8]	; (80020e8 <HAL_RCC_OscConfig+0x270>)
 80020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e013      	b.n	8002110 <HAL_RCC_OscConfig+0x298>
 80020e8:	40021000 	.word	0x40021000
 80020ec:	080061a8 	.word	0x080061a8
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000004 	.word	0x20000004
 80020f8:	4ba0      	ldr	r3, [pc, #640]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a9f      	ldr	r2, [pc, #636]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b9d      	ldr	r3, [pc, #628]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a9c      	ldr	r2, [pc, #624]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff fb5c 	bl	80017d4 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fb58 	bl	80017d4 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e2ae      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002132:	4b92      	ldr	r3, [pc, #584]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x2a8>
 800213e:	e014      	b.n	800216a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7ff fb48 	bl	80017d4 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002148:	f7ff fb44 	bl	80017d4 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e29a      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800215a:	4b88      	ldr	r3, [pc, #544]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x2d0>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d060      	beq.n	8002238 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d005      	beq.n	8002188 <HAL_RCC_OscConfig+0x310>
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d119      	bne.n	80021b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d116      	bne.n	80021b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002188:	4b7c      	ldr	r3, [pc, #496]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_OscConfig+0x328>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e277      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	4b76      	ldr	r3, [pc, #472]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	4973      	ldr	r1, [pc, #460]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b4:	e040      	b.n	8002238 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d023      	beq.n	8002206 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021be:	4b6f      	ldr	r3, [pc, #444]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6e      	ldr	r2, [pc, #440]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7ff fb03 	bl	80017d4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d2:	f7ff faff 	bl	80017d4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e255      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e4:	4b65      	ldr	r3, [pc, #404]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b62      	ldr	r3, [pc, #392]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	495f      	ldr	r1, [pc, #380]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
 8002204:	e018      	b.n	8002238 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002206:	4b5d      	ldr	r3, [pc, #372]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a5c      	ldr	r2, [pc, #368]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800220c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7ff fadf 	bl	80017d4 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221a:	f7ff fadb 	bl	80017d4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e231      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d03c      	beq.n	80022be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d01c      	beq.n	8002286 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224c:	4b4b      	ldr	r3, [pc, #300]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002252:	4a4a      	ldr	r2, [pc, #296]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225c:	f7ff faba 	bl	80017d4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7ff fab6 	bl	80017d4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e20c      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002276:	4b41      	ldr	r3, [pc, #260]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ef      	beq.n	8002264 <HAL_RCC_OscConfig+0x3ec>
 8002284:	e01b      	b.n	80022be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002286:	4b3d      	ldr	r3, [pc, #244]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228c:	4a3b      	ldr	r2, [pc, #236]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002296:	f7ff fa9d 	bl	80017d4 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229e:	f7ff fa99 	bl	80017d4 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1ef      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ef      	bne.n	800229e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80a6 	beq.w	8002418 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022cc:	2300      	movs	r3, #0
 80022ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10d      	bne.n	80022f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	4a26      	ldr	r2, [pc, #152]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80022e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6593      	str	r3, [r2, #88]	; 0x58
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_OscConfig+0x504>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f4:	2301      	movs	r3, #1
 80022f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_OscConfig+0x508>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d118      	bne.n	8002336 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_RCC_OscConfig+0x508>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <HAL_RCC_OscConfig+0x508>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002310:	f7ff fa60 	bl	80017d4 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002318:	f7ff fa5c 	bl	80017d4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1b2      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <HAL_RCC_OscConfig+0x508>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d108      	bne.n	8002350 <HAL_RCC_OscConfig+0x4d8>
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234e:	e029      	b.n	80023a4 <HAL_RCC_OscConfig+0x52c>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d115      	bne.n	8002384 <HAL_RCC_OscConfig+0x50c>
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a03      	ldr	r2, [pc, #12]	; (800237c <HAL_RCC_OscConfig+0x504>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002378:	e014      	b.n	80023a4 <HAL_RCC_OscConfig+0x52c>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	40007000 	.word	0x40007000
 8002384:	4b9a      	ldr	r3, [pc, #616]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	4a99      	ldr	r2, [pc, #612]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002394:	4b96      	ldr	r3, [pc, #600]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	4a95      	ldr	r2, [pc, #596]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d016      	beq.n	80023da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7ff fa12 	bl	80017d4 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7ff fa0e 	bl	80017d4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e162      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ca:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ed      	beq.n	80023b4 <HAL_RCC_OscConfig+0x53c>
 80023d8:	e015      	b.n	8002406 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7ff f9fb 	bl	80017d4 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e2:	f7ff f9f7 	bl	80017d4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e14b      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023f8:	4b7d      	ldr	r3, [pc, #500]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ed      	bne.n	80023e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002406:	7ffb      	ldrb	r3, [r7, #31]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b78      	ldr	r3, [pc, #480]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	4a77      	ldr	r2, [pc, #476]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b00      	cmp	r3, #0
 8002422:	d03c      	beq.n	800249e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01c      	beq.n	8002466 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800242c:	4b70      	ldr	r3, [pc, #448]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 800242e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002432:	4a6f      	ldr	r2, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7ff f9ca 	bl	80017d4 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002444:	f7ff f9c6 	bl	80017d4 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e11c      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002456:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ef      	beq.n	8002444 <HAL_RCC_OscConfig+0x5cc>
 8002464:	e01b      	b.n	800249e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002466:	4b62      	ldr	r3, [pc, #392]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002468:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800246c:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7ff f9ad 	bl	80017d4 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800247e:	f7ff f9a9 	bl	80017d4 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0ff      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002490:	4b57      	ldr	r3, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ef      	bne.n	800247e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80f3 	beq.w	800268e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	f040 80c9 	bne.w	8002644 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024b2:	4b4f      	ldr	r3, [pc, #316]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0203 	and.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d12c      	bne.n	8002520 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	3b01      	subs	r3, #1
 80024d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d123      	bne.n	8002520 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d11b      	bne.n	8002520 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d113      	bne.n	8002520 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	3b01      	subs	r3, #1
 8002506:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d109      	bne.n	8002520 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	085b      	lsrs	r3, r3, #1
 8002518:	3b01      	subs	r3, #1
 800251a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d06b      	beq.n	80025f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d062      	beq.n	80025ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002526:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0ac      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002536:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 800253c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002540:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002542:	f7ff f947 	bl	80017d4 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7ff f943 	bl	80017d4 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e099      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_RCC_OscConfig+0x77c>)
 800256e:	4013      	ands	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002578:	3a01      	subs	r2, #1
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	4311      	orrs	r1, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002582:	0212      	lsls	r2, r2, #8
 8002584:	4311      	orrs	r1, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800258a:	0852      	lsrs	r2, r2, #1
 800258c:	3a01      	subs	r2, #1
 800258e:	0552      	lsls	r2, r2, #21
 8002590:	4311      	orrs	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002596:	0852      	lsrs	r2, r2, #1
 8002598:	3a01      	subs	r2, #1
 800259a:	0652      	lsls	r2, r2, #25
 800259c:	4311      	orrs	r1, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a2:	06d2      	lsls	r2, r2, #27
 80025a4:	430a      	orrs	r2, r1
 80025a6:	4912      	ldr	r1, [pc, #72]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80025b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025c4:	f7ff f906 	bl	80017d4 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025cc:	f7ff f902 	bl	80017d4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e058      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <HAL_RCC_OscConfig+0x778>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025ea:	e050      	b.n	800268e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e04f      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d144      	bne.n	800268e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002604:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a23      	ldr	r2, [pc, #140]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 800260a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a20      	ldr	r2, [pc, #128]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800261c:	f7ff f8da 	bl	80017d4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7ff f8d6 	bl	80017d4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e02c      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002636:	4b18      	ldr	r3, [pc, #96]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x7ac>
 8002642:	e024      	b.n	800268e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d01f      	beq.n	800268a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 8002650:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7ff f8bd 	bl	80017d4 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7ff f8b9 	bl	80017d4 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e00f      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4905      	ldr	r1, [pc, #20]	; (8002698 <HAL_RCC_OscConfig+0x820>)
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_OscConfig+0x824>)
 8002684:	4013      	ands	r3, r2
 8002686:	60cb      	str	r3, [r1, #12]
 8002688:	e001      	b.n	800268e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	feeefffc 	.word	0xfeeefffc

080026a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0e7      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d910      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b72      	ldr	r3, [pc, #456]	; (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4970      	ldr	r1, [pc, #448]	; (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b6e      	ldr	r3, [pc, #440]	; (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0cf      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d010      	beq.n	8002712 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d908      	bls.n	8002712 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4960      	ldr	r1, [pc, #384]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d04c      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b03      	cmp	r3, #3
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	4b5a      	ldr	r3, [pc, #360]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d121      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0a6      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e09a      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002756:	4b4e      	ldr	r3, [pc, #312]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e08e      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002766:	4b4a      	ldr	r3, [pc, #296]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e086      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f023 0203 	bic.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4943      	ldr	r1, [pc, #268]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002784:	4313      	orrs	r3, r2
 8002786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7ff f824 	bl	80017d4 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7ff f820 	bl	80017d4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e06e      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 020c 	and.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1eb      	bne.n	8002790 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d010      	beq.n	80027e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d208      	bcs.n	80027e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	492b      	ldr	r1, [pc, #172]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d210      	bcs.n	8002816 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f4:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 0207 	bic.w	r2, r3, #7
 80027fc:	4923      	ldr	r1, [pc, #140]	; (800288c <HAL_RCC_ClockConfig+0x1ec>)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	4313      	orrs	r3, r2
 8002802:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002804:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCC_ClockConfig+0x1ec>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d001      	beq.n	8002816 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e036      	b.n	8002884 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d008      	beq.n	8002834 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002822:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4918      	ldr	r1, [pc, #96]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4910      	ldr	r1, [pc, #64]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002854:	f000 f824 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002858:	4602      	mov	r2, r0
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	490b      	ldr	r1, [pc, #44]	; (8002894 <HAL_RCC_ClockConfig+0x1f4>)
 8002866:	5ccb      	ldrb	r3, [r1, r3]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
 8002870:	4a09      	ldr	r2, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1fc>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe ff5b 	bl	8001734 <HAL_InitTick>
 800287e:	4603      	mov	r3, r0
 8002880:	72fb      	strb	r3, [r7, #11]

  return status;
 8002882:	7afb      	ldrb	r3, [r7, #11]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40022000 	.word	0x40022000
 8002890:	40021000 	.word	0x40021000
 8002894:	080061a8 	.word	0x080061a8
 8002898:	20000000 	.word	0x20000000
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61fb      	str	r3, [r7, #28]
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ae:	4b3e      	ldr	r3, [pc, #248]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
 80028b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b8:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x34>
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d121      	bne.n	8002912 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d11e      	bne.n	8002912 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	e005      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028fc:	4a2b      	ldr	r2, [pc, #172]	; (80029ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002904:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10d      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d102      	bne.n	800291e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	e004      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d101      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002926:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d134      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800292e:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d003      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0xa6>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d003      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0xac>
 8002944:	e005      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002948:	617b      	str	r3, [r7, #20]
      break;
 800294a:	e005      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800294e:	617b      	str	r3, [r7, #20]
      break;
 8002950:	e002      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	617b      	str	r3, [r7, #20]
      break;
 8002956:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002958:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	3301      	adds	r3, #1
 8002964:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	fb03 f202 	mul.w	r2, r3, r2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	0e5b      	lsrs	r3, r3, #25
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	3301      	adds	r3, #1
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002998:	69bb      	ldr	r3, [r7, #24]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	080061c0 	.word	0x080061c0
 80029b0:	00f42400 	.word	0x00f42400
 80029b4:	007a1200 	.word	0x007a1200

080029b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_RCC_GetHCLKFreq+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000000 	.word	0x20000000

080029d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029d4:	f7ff fff0 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 80029d8:	4602      	mov	r2, r0
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4904      	ldr	r1, [pc, #16]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029e6:	5ccb      	ldrb	r3, [r1, r3]
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	080061b8 	.word	0x080061b8

080029fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a00:	f7ff ffda 	bl	80029b8 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	0adb      	lsrs	r3, r3, #11
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4904      	ldr	r1, [pc, #16]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	080061b8 	.word	0x080061b8

08002a28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a34:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a40:	f7ff f9b6 	bl	8001db0 <HAL_PWREx_GetVoltageRange>
 8002a44:	6178      	str	r0, [r7, #20]
 8002a46:	e014      	b.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	4a24      	ldr	r2, [pc, #144]	; (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a52:	6593      	str	r3, [r2, #88]	; 0x58
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a60:	f7ff f9a6 	bl	8001db0 <HAL_PWREx_GetVoltageRange>
 8002a64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a78:	d10b      	bne.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d919      	bls.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2ba0      	cmp	r3, #160	; 0xa0
 8002a84:	d902      	bls.n	8002a8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a86:	2302      	movs	r3, #2
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	e013      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	e010      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d902      	bls.n	8002a9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a98:	2303      	movs	r3, #3
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	e00a      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b80      	cmp	r3, #128	; 0x80
 8002aa2:	d102      	bne.n	8002aaa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	e004      	b.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b70      	cmp	r3, #112	; 0x70
 8002aae:	d101      	bne.n	8002ab4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 0207 	bic.w	r2, r3, #7
 8002abc:	4909      	ldr	r1, [pc, #36]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40022000 	.word	0x40022000

08002ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002af0:	2300      	movs	r3, #0
 8002af2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af4:	2300      	movs	r3, #0
 8002af6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d031      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b0c:	d01a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b12:	d814      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b1c:	d10f      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b1e:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	4a5c      	ldr	r2, [pc, #368]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b2a:	e00c      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fa22 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b3c:	e003      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	74fb      	strb	r3, [r7, #19]
      break;
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10b      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b4c:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	494e      	ldr	r1, [pc, #312]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b62:	e001      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 809e 	beq.w	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b7a:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b90:	4b40      	ldr	r3, [pc, #256]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b94:	4a3f      	ldr	r2, [pc, #252]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a39      	ldr	r2, [pc, #228]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fe0c 	bl	80017d4 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bbe:	e009      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7fe fe08 	bl	80017d4 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d902      	bls.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	74fb      	strb	r3, [r7, #19]
        break;
 8002bd2:	e005      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bd4:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ef      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d15a      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002be6:	4b2b      	ldr	r3, [pc, #172]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01e      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d019      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c0e:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c2e:	4a19      	ldr	r2, [pc, #100]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d016      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fdc8 	bl	80017d4 <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c46:	e00b      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fe fdc4 	bl	80017d4 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d902      	bls.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	74fb      	strb	r3, [r7, #19]
            break;
 8002c5e:	e006      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0ec      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10b      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	4904      	ldr	r1, [pc, #16]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c8a:	e009      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	74bb      	strb	r3, [r7, #18]
 8002c90:	e006      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca0:	7c7b      	ldrb	r3, [r7, #17]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	4a8c      	ldr	r2, [pc, #560]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cbe:	4b87      	ldr	r3, [pc, #540]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f023 0203 	bic.w	r2, r3, #3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4983      	ldr	r1, [pc, #524]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f023 020c 	bic.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	497b      	ldr	r1, [pc, #492]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d02:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	4972      	ldr	r1, [pc, #456]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d24:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	496a      	ldr	r1, [pc, #424]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d46:	4b65      	ldr	r3, [pc, #404]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	4961      	ldr	r1, [pc, #388]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d68:	4b5c      	ldr	r3, [pc, #368]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4959      	ldr	r1, [pc, #356]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d8a:	4b54      	ldr	r3, [pc, #336]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	4950      	ldr	r1, [pc, #320]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dba:	4948      	ldr	r1, [pc, #288]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dce:	4b43      	ldr	r3, [pc, #268]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	493f      	ldr	r1, [pc, #252]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d028      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df0:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	4937      	ldr	r1, [pc, #220]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b32      	ldr	r3, [pc, #200]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a31      	ldr	r2, [pc, #196]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]
 8002e1c:	e011      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f8a4 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e4e:	4b23      	ldr	r3, [pc, #140]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5c:	491f      	ldr	r1, [pc, #124]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e78:	60d3      	str	r3, [r2, #12]
 8002e7a:	e011      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e84:	d10c      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f875 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02b      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eba:	4908      	ldr	r1, [pc, #32]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a02      	ldr	r2, [pc, #8]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed6:	60d3      	str	r3, [r2, #12]
 8002ed8:	e014      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f843 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01c      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1e:	4916      	ldr	r1, [pc, #88]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	2102      	movs	r1, #2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f820 	bl	8002f7c <RCCEx_PLLSAI1_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002f46:	7cfb      	ldrb	r3, [r7, #19]
 8002f48:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4904      	ldr	r1, [pc, #16]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000

08002f7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f8a:	4b74      	ldr	r3, [pc, #464]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f96:	4b71      	ldr	r3, [pc, #452]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0203 	and.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d10d      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
       ||
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d009      	beq.n	8002fc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fae:	4b6b      	ldr	r3, [pc, #428]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
       ||
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d047      	beq.n	8003052 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
 8002fc6:	e044      	b.n	8003052 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d018      	beq.n	8003002 <RCCEx_PLLSAI1_Config+0x86>
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d825      	bhi.n	8003020 <RCCEx_PLLSAI1_Config+0xa4>
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d002      	beq.n	8002fde <RCCEx_PLLSAI1_Config+0x62>
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d009      	beq.n	8002ff0 <RCCEx_PLLSAI1_Config+0x74>
 8002fdc:	e020      	b.n	8003020 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fde:	4b5f      	ldr	r3, [pc, #380]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11d      	bne.n	8003026 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fee:	e01a      	b.n	8003026 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff0:	4b5a      	ldr	r3, [pc, #360]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d116      	bne.n	800302a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003000:	e013      	b.n	800302a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003002:	4b56      	ldr	r3, [pc, #344]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10f      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800300e:	4b53      	ldr	r3, [pc, #332]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800301e:	e006      	b.n	800302e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	73fb      	strb	r3, [r7, #15]
      break;
 8003024:	e004      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003026:	bf00      	nop
 8003028:	e002      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800302e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003036:	4b49      	ldr	r3, [pc, #292]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6819      	ldr	r1, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	430b      	orrs	r3, r1
 800304c:	4943      	ldr	r1, [pc, #268]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 800304e:	4313      	orrs	r3, r2
 8003050:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d17c      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003058:	4b40      	ldr	r3, [pc, #256]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a3f      	ldr	r2, [pc, #252]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 800305e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fe fbb6 	bl	80017d4 <HAL_GetTick>
 8003068:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800306a:	e009      	b.n	8003080 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800306c:	f7fe fbb2 	bl	80017d4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d902      	bls.n	8003080 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	73fb      	strb	r3, [r7, #15]
        break;
 800307e:	e005      	b.n	800308c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ef      	bne.n	800306c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d15f      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d110      	bne.n	80030ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003098:	4b30      	ldr	r3, [pc, #192]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6892      	ldr	r2, [r2, #8]
 80030a8:	0211      	lsls	r1, r2, #8
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68d2      	ldr	r2, [r2, #12]
 80030ae:	06d2      	lsls	r2, r2, #27
 80030b0:	430a      	orrs	r2, r1
 80030b2:	492a      	ldr	r1, [pc, #168]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	610b      	str	r3, [r1, #16]
 80030b8:	e027      	b.n	800310a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d112      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030c0:	4b26      	ldr	r3, [pc, #152]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6892      	ldr	r2, [r2, #8]
 80030d0:	0211      	lsls	r1, r2, #8
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6912      	ldr	r2, [r2, #16]
 80030d6:	0852      	lsrs	r2, r2, #1
 80030d8:	3a01      	subs	r2, #1
 80030da:	0552      	lsls	r2, r2, #21
 80030dc:	430a      	orrs	r2, r1
 80030de:	491f      	ldr	r1, [pc, #124]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	610b      	str	r3, [r1, #16]
 80030e4:	e011      	b.n	800310a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6892      	ldr	r2, [r2, #8]
 80030f6:	0211      	lsls	r1, r2, #8
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6952      	ldr	r2, [r2, #20]
 80030fc:	0852      	lsrs	r2, r2, #1
 80030fe:	3a01      	subs	r2, #1
 8003100:	0652      	lsls	r2, r2, #25
 8003102:	430a      	orrs	r2, r1
 8003104:	4915      	ldr	r1, [pc, #84]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003106:	4313      	orrs	r3, r2
 8003108:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a13      	ldr	r2, [pc, #76]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003114:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003116:	f7fe fb5d 	bl	80017d4 <HAL_GetTick>
 800311a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800311c:	e009      	b.n	8003132 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800311e:	f7fe fb59 	bl	80017d4 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d902      	bls.n	8003132 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	73fb      	strb	r3, [r7, #15]
          break;
 8003130:	e005      	b.n	800313e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003132:	4b0a      	ldr	r3, [pc, #40]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ef      	beq.n	800311e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <RCCEx_PLLSAI1_Config+0x1e0>)
 800314e:	4313      	orrs	r3, r2
 8003150:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000

08003160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e049      	b.n	8003206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe f972 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f000 fcf0 	bl	8003b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d001      	beq.n	8003228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e03b      	b.n	80032a0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a19      	ldr	r2, [pc, #100]	; (80032ac <HAL_TIM_Base_Start_IT+0x9c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_TIM_Base_Start_IT+0x4e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d004      	beq.n	800325e <HAL_TIM_Base_Start_IT+0x4e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a15      	ldr	r2, [pc, #84]	; (80032b0 <HAL_TIM_Base_Start_IT+0xa0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d115      	bne.n	800328a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003266:	4013      	ands	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b06      	cmp	r3, #6
 800326e:	d015      	beq.n	800329c <HAL_TIM_Base_Start_IT+0x8c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d011      	beq.n	800329c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	e008      	b.n	800329c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e000      	b.n	800329e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40014000 	.word	0x40014000
 80032b4:	00010007 	.word	0x00010007

080032b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e049      	b.n	800335e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f841 	bl	8003366 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 fc44 	bl	8003b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_TIM_PWM_Start+0x24>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e03c      	b.n	800341a <HAL_TIM_PWM_Start+0x9e>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d109      	bne.n	80033ba <HAL_TIM_PWM_Start+0x3e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e02f      	b.n	800341a <HAL_TIM_PWM_Start+0x9e>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d109      	bne.n	80033d4 <HAL_TIM_PWM_Start+0x58>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e022      	b.n	800341a <HAL_TIM_PWM_Start+0x9e>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d109      	bne.n	80033ee <HAL_TIM_PWM_Start+0x72>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	e015      	b.n	800341a <HAL_TIM_PWM_Start+0x9e>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d109      	bne.n	8003408 <HAL_TIM_PWM_Start+0x8c>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e008      	b.n	800341a <HAL_TIM_PWM_Start+0x9e>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b01      	cmp	r3, #1
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e07e      	b.n	8003520 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Start+0xb6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003430:	e023      	b.n	800347a <HAL_TIM_PWM_Start+0xfe>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start+0xc6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003440:	e01b      	b.n	800347a <HAL_TIM_PWM_Start+0xfe>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d104      	bne.n	8003452 <HAL_TIM_PWM_Start+0xd6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003450:	e013      	b.n	800347a <HAL_TIM_PWM_Start+0xfe>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d104      	bne.n	8003462 <HAL_TIM_PWM_Start+0xe6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003460:	e00b      	b.n	800347a <HAL_TIM_PWM_Start+0xfe>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b10      	cmp	r3, #16
 8003466:	d104      	bne.n	8003472 <HAL_TIM_PWM_Start+0xf6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003470:	e003      	b.n	800347a <HAL_TIM_PWM_Start+0xfe>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2201      	movs	r2, #1
 8003480:	6839      	ldr	r1, [r7, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fefa 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <HAL_TIM_PWM_Start+0x1ac>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x12a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a25      	ldr	r2, [pc, #148]	; (800352c <HAL_TIM_PWM_Start+0x1b0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_TIM_PWM_Start+0x12a>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a23      	ldr	r2, [pc, #140]	; (8003530 <HAL_TIM_PWM_Start+0x1b4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_PWM_Start+0x12e>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_TIM_PWM_Start+0x130>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a18      	ldr	r2, [pc, #96]	; (8003528 <HAL_TIM_PWM_Start+0x1ac>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_TIM_PWM_Start+0x162>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d004      	beq.n	80034de <HAL_TIM_PWM_Start+0x162>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a14      	ldr	r2, [pc, #80]	; (800352c <HAL_TIM_PWM_Start+0x1b0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d115      	bne.n	800350a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_TIM_PWM_Start+0x1b8>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d015      	beq.n	800351c <HAL_TIM_PWM_Start+0x1a0>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f6:	d011      	beq.n	800351c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003508:	e008      	b.n	800351c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e000      	b.n	800351e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40012c00 	.word	0x40012c00
 800352c:	40014000 	.word	0x40014000
 8003530:	40014400 	.word	0x40014400
 8003534:	00010007 	.word	0x00010007

08003538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0202 	mvn.w	r2, #2
 8003564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fae3 	bl	8003b46 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fad5 	bl	8003b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fae6 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0204 	mvn.w	r2, #4
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fab9 	bl	8003b46 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 faab 	bl	8003b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fabc 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d122      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0208 	mvn.w	r2, #8
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2204      	movs	r2, #4
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fa8f 	bl	8003b46 <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fa81 	bl	8003b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fa92 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b10      	cmp	r3, #16
 8003648:	d122      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b10      	cmp	r3, #16
 8003656:	d11b      	bne.n	8003690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0210 	mvn.w	r2, #16
 8003660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2208      	movs	r2, #8
 8003666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fa65 	bl	8003b46 <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fa57 	bl	8003b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fa68 	bl	8003b5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d10e      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d107      	bne.n	80036bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f06f 0201 	mvn.w	r2, #1
 80036b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fbda 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d10e      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b80      	cmp	r3, #128	; 0x80
 80036d6:	d107      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fe60 	bl	80043a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f6:	d10e      	bne.n	8003716 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003702:	2b80      	cmp	r3, #128	; 0x80
 8003704:	d107      	bne.n	8003716 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fe53 	bl	80043bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d10e      	bne.n	8003742 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d107      	bne.n	8003742 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800373a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fa16 	bl	8003b6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d10e      	bne.n	800376e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b20      	cmp	r3, #32
 800375c:	d107      	bne.n	800376e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f06f 0220 	mvn.w	r2, #32
 8003766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fe13 	bl	8004394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003792:	2302      	movs	r3, #2
 8003794:	e0ff      	b.n	8003996 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b14      	cmp	r3, #20
 80037a2:	f200 80f0 	bhi.w	8003986 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	08003801 	.word	0x08003801
 80037b0:	08003987 	.word	0x08003987
 80037b4:	08003987 	.word	0x08003987
 80037b8:	08003987 	.word	0x08003987
 80037bc:	08003841 	.word	0x08003841
 80037c0:	08003987 	.word	0x08003987
 80037c4:	08003987 	.word	0x08003987
 80037c8:	08003987 	.word	0x08003987
 80037cc:	08003883 	.word	0x08003883
 80037d0:	08003987 	.word	0x08003987
 80037d4:	08003987 	.word	0x08003987
 80037d8:	08003987 	.word	0x08003987
 80037dc:	080038c3 	.word	0x080038c3
 80037e0:	08003987 	.word	0x08003987
 80037e4:	08003987 	.word	0x08003987
 80037e8:	08003987 	.word	0x08003987
 80037ec:	08003905 	.word	0x08003905
 80037f0:	08003987 	.word	0x08003987
 80037f4:	08003987 	.word	0x08003987
 80037f8:	08003987 	.word	0x08003987
 80037fc:	08003945 	.word	0x08003945
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fa20 	bl	8003c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f042 0208 	orr.w	r2, r2, #8
 800381a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0204 	bic.w	r2, r2, #4
 800382a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6999      	ldr	r1, [r3, #24]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	619a      	str	r2, [r3, #24]
      break;
 800383e:	e0a5      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fa7c 	bl	8003d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800385a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	021a      	lsls	r2, r3, #8
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	619a      	str	r2, [r3, #24]
      break;
 8003880:	e084      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fad5 	bl	8003e38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69da      	ldr	r2, [r3, #28]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0208 	orr.w	r2, r2, #8
 800389c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0204 	bic.w	r2, r2, #4
 80038ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69d9      	ldr	r1, [r3, #28]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	61da      	str	r2, [r3, #28]
      break;
 80038c0:	e064      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fb2d 	bl	8003f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	021a      	lsls	r2, r3, #8
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	61da      	str	r2, [r3, #28]
      break;
 8003902:	e043      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fb6a 	bl	8003fe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0208 	orr.w	r2, r2, #8
 800391e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0204 	bic.w	r2, r2, #4
 800392e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	691a      	ldr	r2, [r3, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003942:	e023      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fba2 	bl	8004094 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800395e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	021a      	lsls	r2, r3, #8
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003984:	e002      	b.n	800398c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      break;
 800398a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003994:	7dfb      	ldrb	r3, [r7, #23]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop

080039a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIM_ConfigClockSource+0x1c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0b6      	b.n	8003b2a <HAL_TIM_ConfigClockSource+0x18a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f8:	d03e      	beq.n	8003a78 <HAL_TIM_ConfigClockSource+0xd8>
 80039fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fe:	f200 8087 	bhi.w	8003b10 <HAL_TIM_ConfigClockSource+0x170>
 8003a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a06:	f000 8086 	beq.w	8003b16 <HAL_TIM_ConfigClockSource+0x176>
 8003a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0e:	d87f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x170>
 8003a10:	2b70      	cmp	r3, #112	; 0x70
 8003a12:	d01a      	beq.n	8003a4a <HAL_TIM_ConfigClockSource+0xaa>
 8003a14:	2b70      	cmp	r3, #112	; 0x70
 8003a16:	d87b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x170>
 8003a18:	2b60      	cmp	r3, #96	; 0x60
 8003a1a:	d050      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x11e>
 8003a1c:	2b60      	cmp	r3, #96	; 0x60
 8003a1e:	d877      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x170>
 8003a20:	2b50      	cmp	r3, #80	; 0x50
 8003a22:	d03c      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0xfe>
 8003a24:	2b50      	cmp	r3, #80	; 0x50
 8003a26:	d873      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x170>
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d058      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x13e>
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d86f      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x170>
 8003a30:	2b30      	cmp	r3, #48	; 0x30
 8003a32:	d064      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15e>
 8003a34:	2b30      	cmp	r3, #48	; 0x30
 8003a36:	d86b      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x170>
 8003a38:	2b20      	cmp	r3, #32
 8003a3a:	d060      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15e>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d867      	bhi.n	8003b10 <HAL_TIM_ConfigClockSource+0x170>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d05c      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15e>
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d05a      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x15e>
 8003a48:	e062      	b.n	8003b10 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6899      	ldr	r1, [r3, #8]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f000 fbef 	bl	800423c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	609a      	str	r2, [r3, #8]
      break;
 8003a76:	e04f      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6899      	ldr	r1, [r3, #8]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f000 fbd8 	bl	800423c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a9a:	609a      	str	r2, [r3, #8]
      break;
 8003a9c:	e03c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fb4c 	bl	8004148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2150      	movs	r1, #80	; 0x50
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fba5 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003abc:	e02c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 fb6b 	bl	80041a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2160      	movs	r1, #96	; 0x60
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fb95 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003adc:	e01c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 fb2c 	bl	8004148 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fb85 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003afc:	e00c      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4619      	mov	r1, r3
 8003b08:	4610      	mov	r0, r2
 8003b0a:	f000 fb7c 	bl	8004206 <TIM_ITRx_SetConfig>
      break;
 8003b0e:	e003      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e000      	b.n	8003b18 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <TIM_Base_SetConfig+0xbc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0x20>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba2:	d108      	bne.n	8003bb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <TIM_Base_SetConfig+0xbc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00b      	beq.n	8003bd6 <TIM_Base_SetConfig+0x52>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d007      	beq.n	8003bd6 <TIM_Base_SetConfig+0x52>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <TIM_Base_SetConfig+0xc0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_Base_SetConfig+0x52>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <TIM_Base_SetConfig+0xc4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d108      	bne.n	8003be8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <TIM_Base_SetConfig+0xbc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d007      	beq.n	8003c24 <TIM_Base_SetConfig+0xa0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <TIM_Base_SetConfig+0xc0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_Base_SetConfig+0xa0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <TIM_Base_SetConfig+0xc4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d103      	bne.n	8003c2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	615a      	str	r2, [r3, #20]
}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400

08003c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f023 0201 	bic.w	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 0302 	bic.w	r3, r3, #2
 8003c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a24      	ldr	r2, [pc, #144]	; (8003d38 <TIM_OC1_SetConfig+0xec>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d007      	beq.n	8003cbc <TIM_OC1_SetConfig+0x70>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a23      	ldr	r2, [pc, #140]	; (8003d3c <TIM_OC1_SetConfig+0xf0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_OC1_SetConfig+0x70>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <TIM_OC1_SetConfig+0xf4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d10c      	bne.n	8003cd6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0308 	bic.w	r3, r3, #8
 8003cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f023 0304 	bic.w	r3, r3, #4
 8003cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <TIM_OC1_SetConfig+0xec>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_OC1_SetConfig+0xa2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a16      	ldr	r2, [pc, #88]	; (8003d3c <TIM_OC1_SetConfig+0xf0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_OC1_SetConfig+0xa2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <TIM_OC1_SetConfig+0xf4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	621a      	str	r2, [r3, #32]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40012c00 	.word	0x40012c00
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400

08003d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0210 	bic.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0320 	bic.w	r3, r3, #32
 8003d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a22      	ldr	r2, [pc, #136]	; (8003e2c <TIM_OC2_SetConfig+0xe8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10d      	bne.n	8003dc4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <TIM_OC2_SetConfig+0xe8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <TIM_OC2_SetConfig+0x98>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <TIM_OC2_SetConfig+0xec>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_OC2_SetConfig+0x98>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a17      	ldr	r2, [pc, #92]	; (8003e34 <TIM_OC2_SetConfig+0xf0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d113      	bne.n	8003e04 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40012c00 	.word	0x40012c00
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40014400 	.word	0x40014400

08003e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	021b      	lsls	r3, r3, #8
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a21      	ldr	r2, [pc, #132]	; (8003f1c <TIM_OC3_SetConfig+0xe4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d10d      	bne.n	8003eb6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <TIM_OC3_SetConfig+0xe4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d007      	beq.n	8003ece <TIM_OC3_SetConfig+0x96>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <TIM_OC3_SetConfig+0xe8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d003      	beq.n	8003ece <TIM_OC3_SetConfig+0x96>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <TIM_OC3_SetConfig+0xec>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d113      	bne.n	8003ef6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	621a      	str	r2, [r3, #32]
}
 8003f10:	bf00      	nop
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400

08003f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	031b      	lsls	r3, r3, #12
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <TIM_OC4_SetConfig+0xb0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <TIM_OC4_SetConfig+0x74>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <TIM_OC4_SetConfig+0xb4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d003      	beq.n	8003f9c <TIM_OC4_SetConfig+0x74>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <TIM_OC4_SetConfig+0xb8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d109      	bne.n	8003fb0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40014000 	.word	0x40014000
 8003fe0:	40014400 	.word	0x40014400

08003fe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004028:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a13      	ldr	r2, [pc, #76]	; (8004088 <TIM_OC5_SetConfig+0xa4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_OC5_SetConfig+0x6a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <TIM_OC5_SetConfig+0xa8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_OC5_SetConfig+0x6a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a11      	ldr	r2, [pc, #68]	; (8004090 <TIM_OC5_SetConfig+0xac>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d109      	bne.n	8004062 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004054:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40014000 	.word	0x40014000
 8004090:	40014400 	.word	0x40014400

08004094 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	051b      	lsls	r3, r3, #20
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a14      	ldr	r2, [pc, #80]	; (800413c <TIM_OC6_SetConfig+0xa8>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d007      	beq.n	8004100 <TIM_OC6_SetConfig+0x6c>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a13      	ldr	r2, [pc, #76]	; (8004140 <TIM_OC6_SetConfig+0xac>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_OC6_SetConfig+0x6c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <TIM_OC6_SetConfig+0xb0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d109      	bne.n	8004114 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004106:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	029b      	lsls	r3, r3, #10
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400

08004148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 030a 	bic.w	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f023 0210 	bic.w	r2, r3, #16
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	031b      	lsls	r3, r3, #12
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 0307 	orr.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e04f      	b.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a21      	ldr	r2, [pc, #132]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d108      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004310:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a14      	ldr	r2, [pc, #80]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004348:	d004      	beq.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a10      	ldr	r2, [pc, #64]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10c      	bne.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800435a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40014000 	.word	0x40014000

08004394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e040      	b.n	8004464 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fd f8b4 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2224      	movs	r2, #36	; 0x24
 80043fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0201 	bic.w	r2, r2, #1
 800440c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f82c 	bl	800446c <UART_SetConfig>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e022      	b.n	8004464 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fa7a 	bl	8004920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800443a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800444a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fb01 	bl	8004a64 <UART_CheckIdleState>
 8004462:	4603      	mov	r3, r0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004470:	b08a      	sub	sp, #40	; 0x28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	431a      	orrs	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	431a      	orrs	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4313      	orrs	r3, r2
 8004492:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b9e      	ldr	r3, [pc, #632]	; (8004714 <UART_SetConfig+0x2a8>)
 800449c:	4013      	ands	r3, r2
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a93      	ldr	r2, [pc, #588]	; (8004718 <UART_SetConfig+0x2ac>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	4313      	orrs	r3, r2
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a8a      	ldr	r2, [pc, #552]	; (800471c <UART_SetConfig+0x2b0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d126      	bne.n	8004544 <UART_SetConfig+0xd8>
 80044f6:	4b8a      	ldr	r3, [pc, #552]	; (8004720 <UART_SetConfig+0x2b4>)
 80044f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	2b03      	cmp	r3, #3
 8004502:	d81b      	bhi.n	800453c <UART_SetConfig+0xd0>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0xa0>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800451d 	.word	0x0800451d
 8004510:	0800452d 	.word	0x0800452d
 8004514:	08004525 	.word	0x08004525
 8004518:	08004535 	.word	0x08004535
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004522:	e0ab      	b.n	800467c <UART_SetConfig+0x210>
 8004524:	2302      	movs	r3, #2
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452a:	e0a7      	b.n	800467c <UART_SetConfig+0x210>
 800452c:	2304      	movs	r3, #4
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e0a3      	b.n	800467c <UART_SetConfig+0x210>
 8004534:	2308      	movs	r3, #8
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e09f      	b.n	800467c <UART_SetConfig+0x210>
 800453c:	2310      	movs	r3, #16
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e09b      	b.n	800467c <UART_SetConfig+0x210>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a76      	ldr	r2, [pc, #472]	; (8004724 <UART_SetConfig+0x2b8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d138      	bne.n	80045c0 <UART_SetConfig+0x154>
 800454e:	4b74      	ldr	r3, [pc, #464]	; (8004720 <UART_SetConfig+0x2b4>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f003 030c 	and.w	r3, r3, #12
 8004558:	2b0c      	cmp	r3, #12
 800455a:	d82d      	bhi.n	80045b8 <UART_SetConfig+0x14c>
 800455c:	a201      	add	r2, pc, #4	; (adr r2, 8004564 <UART_SetConfig+0xf8>)
 800455e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004599 	.word	0x08004599
 8004568:	080045b9 	.word	0x080045b9
 800456c:	080045b9 	.word	0x080045b9
 8004570:	080045b9 	.word	0x080045b9
 8004574:	080045a9 	.word	0x080045a9
 8004578:	080045b9 	.word	0x080045b9
 800457c:	080045b9 	.word	0x080045b9
 8004580:	080045b9 	.word	0x080045b9
 8004584:	080045a1 	.word	0x080045a1
 8004588:	080045b9 	.word	0x080045b9
 800458c:	080045b9 	.word	0x080045b9
 8004590:	080045b9 	.word	0x080045b9
 8004594:	080045b1 	.word	0x080045b1
 8004598:	2300      	movs	r3, #0
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459e:	e06d      	b.n	800467c <UART_SetConfig+0x210>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a6:	e069      	b.n	800467c <UART_SetConfig+0x210>
 80045a8:	2304      	movs	r3, #4
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e065      	b.n	800467c <UART_SetConfig+0x210>
 80045b0:	2308      	movs	r3, #8
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e061      	b.n	800467c <UART_SetConfig+0x210>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e05d      	b.n	800467c <UART_SetConfig+0x210>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a58      	ldr	r2, [pc, #352]	; (8004728 <UART_SetConfig+0x2bc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d125      	bne.n	8004616 <UART_SetConfig+0x1aa>
 80045ca:	4b55      	ldr	r3, [pc, #340]	; (8004720 <UART_SetConfig+0x2b4>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045d4:	2b30      	cmp	r3, #48	; 0x30
 80045d6:	d016      	beq.n	8004606 <UART_SetConfig+0x19a>
 80045d8:	2b30      	cmp	r3, #48	; 0x30
 80045da:	d818      	bhi.n	800460e <UART_SetConfig+0x1a2>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d00a      	beq.n	80045f6 <UART_SetConfig+0x18a>
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d814      	bhi.n	800460e <UART_SetConfig+0x1a2>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <UART_SetConfig+0x182>
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d008      	beq.n	80045fe <UART_SetConfig+0x192>
 80045ec:	e00f      	b.n	800460e <UART_SetConfig+0x1a2>
 80045ee:	2300      	movs	r3, #0
 80045f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f4:	e042      	b.n	800467c <UART_SetConfig+0x210>
 80045f6:	2302      	movs	r3, #2
 80045f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fc:	e03e      	b.n	800467c <UART_SetConfig+0x210>
 80045fe:	2304      	movs	r3, #4
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004604:	e03a      	b.n	800467c <UART_SetConfig+0x210>
 8004606:	2308      	movs	r3, #8
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460c:	e036      	b.n	800467c <UART_SetConfig+0x210>
 800460e:	2310      	movs	r3, #16
 8004610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004614:	e032      	b.n	800467c <UART_SetConfig+0x210>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3f      	ldr	r2, [pc, #252]	; (8004718 <UART_SetConfig+0x2ac>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d12a      	bne.n	8004676 <UART_SetConfig+0x20a>
 8004620:	4b3f      	ldr	r3, [pc, #252]	; (8004720 <UART_SetConfig+0x2b4>)
 8004622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004626:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800462a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800462e:	d01a      	beq.n	8004666 <UART_SetConfig+0x1fa>
 8004630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004634:	d81b      	bhi.n	800466e <UART_SetConfig+0x202>
 8004636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463a:	d00c      	beq.n	8004656 <UART_SetConfig+0x1ea>
 800463c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004640:	d815      	bhi.n	800466e <UART_SetConfig+0x202>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <UART_SetConfig+0x1e2>
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d008      	beq.n	800465e <UART_SetConfig+0x1f2>
 800464c:	e00f      	b.n	800466e <UART_SetConfig+0x202>
 800464e:	2300      	movs	r3, #0
 8004650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004654:	e012      	b.n	800467c <UART_SetConfig+0x210>
 8004656:	2302      	movs	r3, #2
 8004658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465c:	e00e      	b.n	800467c <UART_SetConfig+0x210>
 800465e:	2304      	movs	r3, #4
 8004660:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004664:	e00a      	b.n	800467c <UART_SetConfig+0x210>
 8004666:	2308      	movs	r3, #8
 8004668:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466c:	e006      	b.n	800467c <UART_SetConfig+0x210>
 800466e:	2310      	movs	r3, #16
 8004670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004674:	e002      	b.n	800467c <UART_SetConfig+0x210>
 8004676:	2310      	movs	r3, #16
 8004678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a25      	ldr	r2, [pc, #148]	; (8004718 <UART_SetConfig+0x2ac>)
 8004682:	4293      	cmp	r3, r2
 8004684:	f040 808a 	bne.w	800479c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800468c:	2b08      	cmp	r3, #8
 800468e:	d824      	bhi.n	80046da <UART_SetConfig+0x26e>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x22c>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046cb 	.word	0x080046cb
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046db 	.word	0x080046db
 80046b4:	080046db 	.word	0x080046db
 80046b8:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046bc:	f7fe f988 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 80046c0:	61f8      	str	r0, [r7, #28]
        break;
 80046c2:	e010      	b.n	80046e6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <UART_SetConfig+0x2c0>)
 80046c6:	61fb      	str	r3, [r7, #28]
        break;
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe f8e9 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80046ce:	61f8      	str	r0, [r7, #28]
        break;
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	61fb      	str	r3, [r7, #28]
        break;
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 8109 	beq.w	8004900 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d305      	bcc.n	800470a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	429a      	cmp	r2, r3
 8004708:	d912      	bls.n	8004730 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004710:	e0f6      	b.n	8004900 <UART_SetConfig+0x494>
 8004712:	bf00      	nop
 8004714:	efff69f3 	.word	0xefff69f3
 8004718:	40008000 	.word	0x40008000
 800471c:	40013800 	.word	0x40013800
 8004720:	40021000 	.word	0x40021000
 8004724:	40004400 	.word	0x40004400
 8004728:	40004800 	.word	0x40004800
 800472c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2200      	movs	r2, #0
 8004734:	461c      	mov	r4, r3
 8004736:	4615      	mov	r5, r2
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	022b      	lsls	r3, r5, #8
 8004742:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004746:	0222      	lsls	r2, r4, #8
 8004748:	68f9      	ldr	r1, [r7, #12]
 800474a:	6849      	ldr	r1, [r1, #4]
 800474c:	0849      	lsrs	r1, r1, #1
 800474e:	2000      	movs	r0, #0
 8004750:	4688      	mov	r8, r1
 8004752:	4681      	mov	r9, r0
 8004754:	eb12 0a08 	adds.w	sl, r2, r8
 8004758:	eb43 0b09 	adc.w	fp, r3, r9
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800476a:	4650      	mov	r0, sl
 800476c:	4659      	mov	r1, fp
 800476e:	f7fc f9fd 	bl	8000b6c <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4613      	mov	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004780:	d308      	bcc.n	8004794 <UART_SetConfig+0x328>
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004788:	d204      	bcs.n	8004794 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e0b5      	b.n	8004900 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800479a:	e0b1      	b.n	8004900 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a4:	d15d      	bne.n	8004862 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80047a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d827      	bhi.n	80047fe <UART_SetConfig+0x392>
 80047ae:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <UART_SetConfig+0x348>)
 80047b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b4:	080047d9 	.word	0x080047d9
 80047b8:	080047e1 	.word	0x080047e1
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	080047ff 	.word	0x080047ff
 80047c4:	080047ef 	.word	0x080047ef
 80047c8:	080047ff 	.word	0x080047ff
 80047cc:	080047ff 	.word	0x080047ff
 80047d0:	080047ff 	.word	0x080047ff
 80047d4:	080047f7 	.word	0x080047f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d8:	f7fe f8fa 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 80047dc:	61f8      	str	r0, [r7, #28]
        break;
 80047de:	e014      	b.n	800480a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e0:	f7fe f90c 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80047e4:	61f8      	str	r0, [r7, #28]
        break;
 80047e6:	e010      	b.n	800480a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <UART_SetConfig+0x4b0>)
 80047ea:	61fb      	str	r3, [r7, #28]
        break;
 80047ec:	e00d      	b.n	800480a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ee:	f7fe f857 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80047f2:	61f8      	str	r0, [r7, #28]
        break;
 80047f4:	e009      	b.n	800480a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047fa:	61fb      	str	r3, [r7, #28]
        break;
 80047fc:	e005      	b.n	800480a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d077      	beq.n	8004900 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005a      	lsls	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	441a      	add	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b0f      	cmp	r3, #15
 800482a:	d916      	bls.n	800485a <UART_SetConfig+0x3ee>
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004832:	d212      	bcs.n	800485a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f023 030f 	bic.w	r3, r3, #15
 800483c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	b29b      	uxth	r3, r3
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	b29a      	uxth	r2, r3
 800484a:	8afb      	ldrh	r3, [r7, #22]
 800484c:	4313      	orrs	r3, r2
 800484e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	8afa      	ldrh	r2, [r7, #22]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	e052      	b.n	8004900 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004860:	e04e      	b.n	8004900 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004866:	2b08      	cmp	r3, #8
 8004868:	d827      	bhi.n	80048ba <UART_SetConfig+0x44e>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x404>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004895 	.word	0x08004895
 8004874:	0800489d 	.word	0x0800489d
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048ab 	.word	0x080048ab
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048bb 	.word	0x080048bb
 800488c:	080048bb 	.word	0x080048bb
 8004890:	080048b3 	.word	0x080048b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7fe f89c 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8004898:	61f8      	str	r0, [r7, #28]
        break;
 800489a:	e014      	b.n	80048c6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fe f8ae 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 80048a0:	61f8      	str	r0, [r7, #28]
        break;
 80048a2:	e010      	b.n	80048c6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <UART_SetConfig+0x4b0>)
 80048a6:	61fb      	str	r3, [r7, #28]
        break;
 80048a8:	e00d      	b.n	80048c6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7fd fff9 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80048ae:	61f8      	str	r0, [r7, #28]
        break;
 80048b0:	e009      	b.n	80048c6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048b6:	61fb      	str	r3, [r7, #28]
        break;
 80048b8:	e005      	b.n	80048c6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048c4:	bf00      	nop
    }

    if (pclk != 0U)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d019      	beq.n	8004900 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	085a      	lsrs	r2, r3, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b0f      	cmp	r3, #15
 80048e4:	d909      	bls.n	80048fa <UART_SetConfig+0x48e>
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ec:	d205      	bcs.n	80048fa <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	e002      	b.n	8004900 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800490c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004910:	4618      	mov	r0, r3
 8004912:	3728      	adds	r7, #40	; 0x28
 8004914:	46bd      	mov	sp, r7
 8004916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800491a:	bf00      	nop
 800491c:	00f42400 	.word	0x00f42400

08004920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f003 0308 	and.w	r3, r3, #8
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1e:	d10a      	bne.n	8004a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a74:	f7fc feae 	bl	80017d4 <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d10e      	bne.n	8004aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f82d 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e023      	b.n	8004aee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d10e      	bne.n	8004ad2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f817 	bl	8004af6 <UART_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e00d      	b.n	8004aee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b09c      	sub	sp, #112	; 0x70
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b06:	e0a5      	b.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0e:	f000 80a1 	beq.w	8004c54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b12:	f7fc fe5f 	bl	80017d4 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d302      	bcc.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d13e      	bne.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	663b      	str	r3, [r7, #96]	; 0x60
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e5      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e067      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d04f      	beq.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc2:	d147      	bne.n	8004c54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bcc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	637b      	str	r3, [r7, #52]	; 0x34
 8004bee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e6      	bne.n	8004bce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f023 0301 	bic.w	r3, r3, #1
 8004c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c20:	623a      	str	r2, [r7, #32]
 8004c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	69f9      	ldr	r1, [r7, #28]
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e5      	bne.n	8004c00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e010      	b.n	8004c76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	f43f af4a 	beq.w	8004b08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3770      	adds	r7, #112	; 0x70
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <__errno>:
 8004c80:	4b01      	ldr	r3, [pc, #4]	; (8004c88 <__errno+0x8>)
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	2000000c 	.word	0x2000000c

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4d0d      	ldr	r5, [pc, #52]	; (8004cc4 <__libc_init_array+0x38>)
 8004c90:	4c0d      	ldr	r4, [pc, #52]	; (8004cc8 <__libc_init_array+0x3c>)
 8004c92:	1b64      	subs	r4, r4, r5
 8004c94:	10a4      	asrs	r4, r4, #2
 8004c96:	2600      	movs	r6, #0
 8004c98:	42a6      	cmp	r6, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	4d0b      	ldr	r5, [pc, #44]	; (8004ccc <__libc_init_array+0x40>)
 8004c9e:	4c0c      	ldr	r4, [pc, #48]	; (8004cd0 <__libc_init_array+0x44>)
 8004ca0:	f001 fa74 	bl	800618c <_init>
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	2600      	movs	r6, #0
 8004caa:	42a6      	cmp	r6, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb4:	4798      	blx	r3
 8004cb6:	3601      	adds	r6, #1
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbe:	4798      	blx	r3
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	08006400 	.word	0x08006400
 8004cc8:	08006400 	.word	0x08006400
 8004ccc:	08006400 	.word	0x08006400
 8004cd0:	08006404 	.word	0x08006404

08004cd4 <memset>:
 8004cd4:	4402      	add	r2, r0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d100      	bne.n	8004cde <memset+0xa>
 8004cdc:	4770      	bx	lr
 8004cde:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce2:	e7f9      	b.n	8004cd8 <memset+0x4>
 8004ce4:	0000      	movs	r0, r0
	...

08004ce8 <sin>:
 8004ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004cea:	ec53 2b10 	vmov	r2, r3, d0
 8004cee:	4828      	ldr	r0, [pc, #160]	; (8004d90 <sin+0xa8>)
 8004cf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cf4:	4281      	cmp	r1, r0
 8004cf6:	dc07      	bgt.n	8004d08 <sin+0x20>
 8004cf8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004d88 <sin+0xa0>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	b005      	add	sp, #20
 8004d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d04:	f001 b838 	b.w	8005d78 <__kernel_sin>
 8004d08:	4822      	ldr	r0, [pc, #136]	; (8004d94 <sin+0xac>)
 8004d0a:	4281      	cmp	r1, r0
 8004d0c:	dd09      	ble.n	8004d22 <sin+0x3a>
 8004d0e:	ee10 0a10 	vmov	r0, s0
 8004d12:	4619      	mov	r1, r3
 8004d14:	f7fb fa60 	bl	80001d8 <__aeabi_dsub>
 8004d18:	ec41 0b10 	vmov	d0, r0, r1
 8004d1c:	b005      	add	sp, #20
 8004d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d22:	4668      	mov	r0, sp
 8004d24:	f000 fa04 	bl	8005130 <__ieee754_rem_pio2>
 8004d28:	f000 0003 	and.w	r0, r0, #3
 8004d2c:	2801      	cmp	r0, #1
 8004d2e:	d00c      	beq.n	8004d4a <sin+0x62>
 8004d30:	2802      	cmp	r0, #2
 8004d32:	d011      	beq.n	8004d58 <sin+0x70>
 8004d34:	b9f0      	cbnz	r0, 8004d74 <sin+0x8c>
 8004d36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d3a:	ed9d 0b00 	vldr	d0, [sp]
 8004d3e:	2001      	movs	r0, #1
 8004d40:	f001 f81a 	bl	8005d78 <__kernel_sin>
 8004d44:	ec51 0b10 	vmov	r0, r1, d0
 8004d48:	e7e6      	b.n	8004d18 <sin+0x30>
 8004d4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d4e:	ed9d 0b00 	vldr	d0, [sp]
 8004d52:	f000 fbf9 	bl	8005548 <__kernel_cos>
 8004d56:	e7f5      	b.n	8004d44 <sin+0x5c>
 8004d58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d5c:	ed9d 0b00 	vldr	d0, [sp]
 8004d60:	2001      	movs	r0, #1
 8004d62:	f001 f809 	bl	8005d78 <__kernel_sin>
 8004d66:	ec53 2b10 	vmov	r2, r3, d0
 8004d6a:	ee10 0a10 	vmov	r0, s0
 8004d6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d72:	e7d1      	b.n	8004d18 <sin+0x30>
 8004d74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004d78:	ed9d 0b00 	vldr	d0, [sp]
 8004d7c:	f000 fbe4 	bl	8005548 <__kernel_cos>
 8004d80:	e7f1      	b.n	8004d66 <sin+0x7e>
 8004d82:	bf00      	nop
 8004d84:	f3af 8000 	nop.w
	...
 8004d90:	3fe921fb 	.word	0x3fe921fb
 8004d94:	7fefffff 	.word	0x7fefffff

08004d98 <exp>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	ed2d 8b02 	vpush	{d8}
 8004d9e:	ec55 4b10 	vmov	r4, r5, d0
 8004da2:	f000 f841 	bl	8004e28 <__ieee754_exp>
 8004da6:	eeb0 8a40 	vmov.f32	s16, s0
 8004daa:	eef0 8a60 	vmov.f32	s17, s1
 8004dae:	ec45 4b10 	vmov	d0, r4, r5
 8004db2:	f001 f8d8 	bl	8005f66 <finite>
 8004db6:	b168      	cbz	r0, 8004dd4 <exp+0x3c>
 8004db8:	a317      	add	r3, pc, #92	; (adr r3, 8004e18 <exp+0x80>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f7fb fe51 	bl	8000a68 <__aeabi_dcmpgt>
 8004dc6:	b160      	cbz	r0, 8004de2 <exp+0x4a>
 8004dc8:	f7ff ff5a 	bl	8004c80 <__errno>
 8004dcc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8004e08 <exp+0x70>
 8004dd0:	2322      	movs	r3, #34	; 0x22
 8004dd2:	6003      	str	r3, [r0, #0]
 8004dd4:	eeb0 0a48 	vmov.f32	s0, s16
 8004dd8:	eef0 0a68 	vmov.f32	s1, s17
 8004ddc:	ecbd 8b02 	vpop	{d8}
 8004de0:	bd38      	pop	{r3, r4, r5, pc}
 8004de2:	a30f      	add	r3, pc, #60	; (adr r3, 8004e20 <exp+0x88>)
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	4620      	mov	r0, r4
 8004dea:	4629      	mov	r1, r5
 8004dec:	f7fb fe1e 	bl	8000a2c <__aeabi_dcmplt>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d0ef      	beq.n	8004dd4 <exp+0x3c>
 8004df4:	f7ff ff44 	bl	8004c80 <__errno>
 8004df8:	2322      	movs	r3, #34	; 0x22
 8004dfa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8004e10 <exp+0x78>
 8004dfe:	6003      	str	r3, [r0, #0]
 8004e00:	e7e8      	b.n	8004dd4 <exp+0x3c>
 8004e02:	bf00      	nop
 8004e04:	f3af 8000 	nop.w
 8004e08:	00000000 	.word	0x00000000
 8004e0c:	7ff00000 	.word	0x7ff00000
	...
 8004e18:	fefa39ef 	.word	0xfefa39ef
 8004e1c:	40862e42 	.word	0x40862e42
 8004e20:	d52d3051 	.word	0xd52d3051
 8004e24:	c0874910 	.word	0xc0874910

08004e28 <__ieee754_exp>:
 8004e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2c:	ec55 4b10 	vmov	r4, r5, d0
 8004e30:	49b5      	ldr	r1, [pc, #724]	; (8005108 <__ieee754_exp+0x2e0>)
 8004e32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004e36:	428b      	cmp	r3, r1
 8004e38:	ed2d 8b04 	vpush	{d8-d9}
 8004e3c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8004e40:	d93d      	bls.n	8004ebe <__ieee754_exp+0x96>
 8004e42:	49b2      	ldr	r1, [pc, #712]	; (800510c <__ieee754_exp+0x2e4>)
 8004e44:	428b      	cmp	r3, r1
 8004e46:	d918      	bls.n	8004e7a <__ieee754_exp+0x52>
 8004e48:	ee10 3a10 	vmov	r3, s0
 8004e4c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8004e50:	4313      	orrs	r3, r2
 8004e52:	d009      	beq.n	8004e68 <__ieee754_exp+0x40>
 8004e54:	ee10 2a10 	vmov	r2, s0
 8004e58:	462b      	mov	r3, r5
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f7fb f9bd 	bl	80001dc <__adddf3>
 8004e62:	4604      	mov	r4, r0
 8004e64:	460d      	mov	r5, r1
 8004e66:	e002      	b.n	8004e6e <__ieee754_exp+0x46>
 8004e68:	b10e      	cbz	r6, 8004e6e <__ieee754_exp+0x46>
 8004e6a:	2400      	movs	r4, #0
 8004e6c:	2500      	movs	r5, #0
 8004e6e:	ecbd 8b04 	vpop	{d8-d9}
 8004e72:	ec45 4b10 	vmov	d0, r4, r5
 8004e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7a:	a38d      	add	r3, pc, #564	; (adr r3, 80050b0 <__ieee754_exp+0x288>)
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	ee10 0a10 	vmov	r0, s0
 8004e84:	4629      	mov	r1, r5
 8004e86:	f7fb fdef 	bl	8000a68 <__aeabi_dcmpgt>
 8004e8a:	4607      	mov	r7, r0
 8004e8c:	b130      	cbz	r0, 8004e9c <__ieee754_exp+0x74>
 8004e8e:	ecbd 8b04 	vpop	{d8-d9}
 8004e92:	2000      	movs	r0, #0
 8004e94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e98:	f001 b853 	b.w	8005f42 <__math_oflow>
 8004e9c:	a386      	add	r3, pc, #536	; (adr r3, 80050b8 <__ieee754_exp+0x290>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	f7fb fdc1 	bl	8000a2c <__aeabi_dcmplt>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	f000 808b 	beq.w	8004fc6 <__ieee754_exp+0x19e>
 8004eb0:	ecbd 8b04 	vpop	{d8-d9}
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eba:	f001 b839 	b.w	8005f30 <__math_uflow>
 8004ebe:	4a94      	ldr	r2, [pc, #592]	; (8005110 <__ieee754_exp+0x2e8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	f240 80ac 	bls.w	800501e <__ieee754_exp+0x1f6>
 8004ec6:	4a93      	ldr	r2, [pc, #588]	; (8005114 <__ieee754_exp+0x2ec>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d87c      	bhi.n	8004fc6 <__ieee754_exp+0x19e>
 8004ecc:	4b92      	ldr	r3, [pc, #584]	; (8005118 <__ieee754_exp+0x2f0>)
 8004ece:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	ee10 0a10 	vmov	r0, s0
 8004eda:	4629      	mov	r1, r5
 8004edc:	f7fb f97c 	bl	80001d8 <__aeabi_dsub>
 8004ee0:	4b8e      	ldr	r3, [pc, #568]	; (800511c <__ieee754_exp+0x2f4>)
 8004ee2:	00f7      	lsls	r7, r6, #3
 8004ee4:	443b      	add	r3, r7
 8004ee6:	ed93 7b00 	vldr	d7, [r3]
 8004eea:	f1c6 0a01 	rsb	sl, r6, #1
 8004eee:	4680      	mov	r8, r0
 8004ef0:	4689      	mov	r9, r1
 8004ef2:	ebaa 0a06 	sub.w	sl, sl, r6
 8004ef6:	eeb0 8a47 	vmov.f32	s16, s14
 8004efa:	eef0 8a67 	vmov.f32	s17, s15
 8004efe:	ec53 2b18 	vmov	r2, r3, d8
 8004f02:	4640      	mov	r0, r8
 8004f04:	4649      	mov	r1, r9
 8004f06:	f7fb f967 	bl	80001d8 <__aeabi_dsub>
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	460d      	mov	r5, r1
 8004f0e:	4622      	mov	r2, r4
 8004f10:	462b      	mov	r3, r5
 8004f12:	4620      	mov	r0, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	f7fb fb17 	bl	8000548 <__aeabi_dmul>
 8004f1a:	a369      	add	r3, pc, #420	; (adr r3, 80050c0 <__ieee754_exp+0x298>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	4606      	mov	r6, r0
 8004f22:	460f      	mov	r7, r1
 8004f24:	f7fb fb10 	bl	8000548 <__aeabi_dmul>
 8004f28:	a367      	add	r3, pc, #412	; (adr r3, 80050c8 <__ieee754_exp+0x2a0>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb f953 	bl	80001d8 <__aeabi_dsub>
 8004f32:	4632      	mov	r2, r6
 8004f34:	463b      	mov	r3, r7
 8004f36:	f7fb fb07 	bl	8000548 <__aeabi_dmul>
 8004f3a:	a365      	add	r3, pc, #404	; (adr r3, 80050d0 <__ieee754_exp+0x2a8>)
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f7fb f94c 	bl	80001dc <__adddf3>
 8004f44:	4632      	mov	r2, r6
 8004f46:	463b      	mov	r3, r7
 8004f48:	f7fb fafe 	bl	8000548 <__aeabi_dmul>
 8004f4c:	a362      	add	r3, pc, #392	; (adr r3, 80050d8 <__ieee754_exp+0x2b0>)
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	f7fb f941 	bl	80001d8 <__aeabi_dsub>
 8004f56:	4632      	mov	r2, r6
 8004f58:	463b      	mov	r3, r7
 8004f5a:	f7fb faf5 	bl	8000548 <__aeabi_dmul>
 8004f5e:	a360      	add	r3, pc, #384	; (adr r3, 80050e0 <__ieee754_exp+0x2b8>)
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f7fb f93a 	bl	80001dc <__adddf3>
 8004f68:	4632      	mov	r2, r6
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	f7fb faec 	bl	8000548 <__aeabi_dmul>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4620      	mov	r0, r4
 8004f76:	4629      	mov	r1, r5
 8004f78:	f7fb f92e 	bl	80001d8 <__aeabi_dsub>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4606      	mov	r6, r0
 8004f82:	460f      	mov	r7, r1
 8004f84:	4620      	mov	r0, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	f7fb fade 	bl	8000548 <__aeabi_dmul>
 8004f8c:	ec41 0b19 	vmov	d9, r0, r1
 8004f90:	f1ba 0f00 	cmp.w	sl, #0
 8004f94:	d15d      	bne.n	8005052 <__ieee754_exp+0x22a>
 8004f96:	2200      	movs	r2, #0
 8004f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb f91a 	bl	80001d8 <__aeabi_dsub>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	ec51 0b19 	vmov	r0, r1, d9
 8004fac:	f7fb fbf6 	bl	800079c <__aeabi_ddiv>
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	462b      	mov	r3, r5
 8004fb4:	f7fb f910 	bl	80001d8 <__aeabi_dsub>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	4958      	ldr	r1, [pc, #352]	; (8005120 <__ieee754_exp+0x2f8>)
 8004fc0:	f7fb f90a 	bl	80001d8 <__aeabi_dsub>
 8004fc4:	e74d      	b.n	8004e62 <__ieee754_exp+0x3a>
 8004fc6:	4857      	ldr	r0, [pc, #348]	; (8005124 <__ieee754_exp+0x2fc>)
 8004fc8:	a347      	add	r3, pc, #284	; (adr r3, 80050e8 <__ieee754_exp+0x2c0>)
 8004fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fce:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f7fb fab7 	bl	8000548 <__aeabi_dmul>
 8004fda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fde:	f7fb f8fd 	bl	80001dc <__adddf3>
 8004fe2:	f7fb fd4b 	bl	8000a7c <__aeabi_d2iz>
 8004fe6:	4682      	mov	sl, r0
 8004fe8:	f7fb fa44 	bl	8000474 <__aeabi_i2d>
 8004fec:	a340      	add	r3, pc, #256	; (adr r3, 80050f0 <__ieee754_exp+0x2c8>)
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	f7fb faa7 	bl	8000548 <__aeabi_dmul>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4620      	mov	r0, r4
 8005000:	4629      	mov	r1, r5
 8005002:	f7fb f8e9 	bl	80001d8 <__aeabi_dsub>
 8005006:	a33c      	add	r3, pc, #240	; (adr r3, 80050f8 <__ieee754_exp+0x2d0>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	4680      	mov	r8, r0
 800500e:	4689      	mov	r9, r1
 8005010:	4630      	mov	r0, r6
 8005012:	4639      	mov	r1, r7
 8005014:	f7fb fa98 	bl	8000548 <__aeabi_dmul>
 8005018:	ec41 0b18 	vmov	d8, r0, r1
 800501c:	e76f      	b.n	8004efe <__ieee754_exp+0xd6>
 800501e:	4a42      	ldr	r2, [pc, #264]	; (8005128 <__ieee754_exp+0x300>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d811      	bhi.n	8005048 <__ieee754_exp+0x220>
 8005024:	a336      	add	r3, pc, #216	; (adr r3, 8005100 <__ieee754_exp+0x2d8>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	ee10 0a10 	vmov	r0, s0
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb f8d4 	bl	80001dc <__adddf3>
 8005034:	4b3a      	ldr	r3, [pc, #232]	; (8005120 <__ieee754_exp+0x2f8>)
 8005036:	2200      	movs	r2, #0
 8005038:	f7fb fd16 	bl	8000a68 <__aeabi_dcmpgt>
 800503c:	b138      	cbz	r0, 800504e <__ieee754_exp+0x226>
 800503e:	4b38      	ldr	r3, [pc, #224]	; (8005120 <__ieee754_exp+0x2f8>)
 8005040:	2200      	movs	r2, #0
 8005042:	4620      	mov	r0, r4
 8005044:	4629      	mov	r1, r5
 8005046:	e70a      	b.n	8004e5e <__ieee754_exp+0x36>
 8005048:	f04f 0a00 	mov.w	sl, #0
 800504c:	e75f      	b.n	8004f0e <__ieee754_exp+0xe6>
 800504e:	4682      	mov	sl, r0
 8005050:	e75d      	b.n	8004f0e <__ieee754_exp+0xe6>
 8005052:	4632      	mov	r2, r6
 8005054:	463b      	mov	r3, r7
 8005056:	2000      	movs	r0, #0
 8005058:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800505c:	f7fb f8bc 	bl	80001d8 <__aeabi_dsub>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	ec51 0b19 	vmov	r0, r1, d9
 8005068:	f7fb fb98 	bl	800079c <__aeabi_ddiv>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	ec51 0b18 	vmov	r0, r1, d8
 8005074:	f7fb f8b0 	bl	80001d8 <__aeabi_dsub>
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	f7fb f8ac 	bl	80001d8 <__aeabi_dsub>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	2000      	movs	r0, #0
 8005086:	4926      	ldr	r1, [pc, #152]	; (8005120 <__ieee754_exp+0x2f8>)
 8005088:	f7fb f8a6 	bl	80001d8 <__aeabi_dsub>
 800508c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8005090:	4592      	cmp	sl, r2
 8005092:	db02      	blt.n	800509a <__ieee754_exp+0x272>
 8005094:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005098:	e6e3      	b.n	8004e62 <__ieee754_exp+0x3a>
 800509a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800509e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80050a2:	2200      	movs	r2, #0
 80050a4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80050a8:	f7fb fa4e 	bl	8000548 <__aeabi_dmul>
 80050ac:	e6d9      	b.n	8004e62 <__ieee754_exp+0x3a>
 80050ae:	bf00      	nop
 80050b0:	fefa39ef 	.word	0xfefa39ef
 80050b4:	40862e42 	.word	0x40862e42
 80050b8:	d52d3051 	.word	0xd52d3051
 80050bc:	c0874910 	.word	0xc0874910
 80050c0:	72bea4d0 	.word	0x72bea4d0
 80050c4:	3e663769 	.word	0x3e663769
 80050c8:	c5d26bf1 	.word	0xc5d26bf1
 80050cc:	3ebbbd41 	.word	0x3ebbbd41
 80050d0:	af25de2c 	.word	0xaf25de2c
 80050d4:	3f11566a 	.word	0x3f11566a
 80050d8:	16bebd93 	.word	0x16bebd93
 80050dc:	3f66c16c 	.word	0x3f66c16c
 80050e0:	5555553e 	.word	0x5555553e
 80050e4:	3fc55555 	.word	0x3fc55555
 80050e8:	652b82fe 	.word	0x652b82fe
 80050ec:	3ff71547 	.word	0x3ff71547
 80050f0:	fee00000 	.word	0xfee00000
 80050f4:	3fe62e42 	.word	0x3fe62e42
 80050f8:	35793c76 	.word	0x35793c76
 80050fc:	3dea39ef 	.word	0x3dea39ef
 8005100:	8800759c 	.word	0x8800759c
 8005104:	7e37e43c 	.word	0x7e37e43c
 8005108:	40862e41 	.word	0x40862e41
 800510c:	7fefffff 	.word	0x7fefffff
 8005110:	3fd62e42 	.word	0x3fd62e42
 8005114:	3ff0a2b1 	.word	0x3ff0a2b1
 8005118:	08006200 	.word	0x08006200
 800511c:	08006210 	.word	0x08006210
 8005120:	3ff00000 	.word	0x3ff00000
 8005124:	080061f0 	.word	0x080061f0
 8005128:	3defffff 	.word	0x3defffff
 800512c:	00000000 	.word	0x00000000

08005130 <__ieee754_rem_pio2>:
 8005130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005134:	ed2d 8b02 	vpush	{d8}
 8005138:	ec55 4b10 	vmov	r4, r5, d0
 800513c:	4bca      	ldr	r3, [pc, #808]	; (8005468 <__ieee754_rem_pio2+0x338>)
 800513e:	b08b      	sub	sp, #44	; 0x2c
 8005140:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005144:	4598      	cmp	r8, r3
 8005146:	4682      	mov	sl, r0
 8005148:	9502      	str	r5, [sp, #8]
 800514a:	dc08      	bgt.n	800515e <__ieee754_rem_pio2+0x2e>
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	ed80 0b00 	vstr	d0, [r0]
 8005154:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005158:	f04f 0b00 	mov.w	fp, #0
 800515c:	e028      	b.n	80051b0 <__ieee754_rem_pio2+0x80>
 800515e:	4bc3      	ldr	r3, [pc, #780]	; (800546c <__ieee754_rem_pio2+0x33c>)
 8005160:	4598      	cmp	r8, r3
 8005162:	dc78      	bgt.n	8005256 <__ieee754_rem_pio2+0x126>
 8005164:	9b02      	ldr	r3, [sp, #8]
 8005166:	4ec2      	ldr	r6, [pc, #776]	; (8005470 <__ieee754_rem_pio2+0x340>)
 8005168:	2b00      	cmp	r3, #0
 800516a:	ee10 0a10 	vmov	r0, s0
 800516e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005430 <__ieee754_rem_pio2+0x300>)
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	4629      	mov	r1, r5
 8005176:	dd39      	ble.n	80051ec <__ieee754_rem_pio2+0xbc>
 8005178:	f7fb f82e 	bl	80001d8 <__aeabi_dsub>
 800517c:	45b0      	cmp	r8, r6
 800517e:	4604      	mov	r4, r0
 8005180:	460d      	mov	r5, r1
 8005182:	d01b      	beq.n	80051bc <__ieee754_rem_pio2+0x8c>
 8005184:	a3ac      	add	r3, pc, #688	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f7fb f825 	bl	80001d8 <__aeabi_dsub>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	e9ca 2300 	strd	r2, r3, [sl]
 8005196:	4620      	mov	r0, r4
 8005198:	4629      	mov	r1, r5
 800519a:	f7fb f81d 	bl	80001d8 <__aeabi_dsub>
 800519e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f7fb f818 	bl	80001d8 <__aeabi_dsub>
 80051a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80051ac:	f04f 0b01 	mov.w	fp, #1
 80051b0:	4658      	mov	r0, fp
 80051b2:	b00b      	add	sp, #44	; 0x2c
 80051b4:	ecbd 8b02 	vpop	{d8}
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005440 <__ieee754_rem_pio2+0x310>)
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	f7fb f809 	bl	80001d8 <__aeabi_dsub>
 80051c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	4604      	mov	r4, r0
 80051ce:	460d      	mov	r5, r1
 80051d0:	f7fb f802 	bl	80001d8 <__aeabi_dsub>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	e9ca 2300 	strd	r2, r3, [sl]
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fa fffa 	bl	80001d8 <__aeabi_dsub>
 80051e4:	a398      	add	r3, pc, #608	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	e7db      	b.n	80051a4 <__ieee754_rem_pio2+0x74>
 80051ec:	f7fa fff6 	bl	80001dc <__adddf3>
 80051f0:	45b0      	cmp	r8, r6
 80051f2:	4604      	mov	r4, r0
 80051f4:	460d      	mov	r5, r1
 80051f6:	d016      	beq.n	8005226 <__ieee754_rem_pio2+0xf6>
 80051f8:	a38f      	add	r3, pc, #572	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fa ffed 	bl	80001dc <__adddf3>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	e9ca 2300 	strd	r2, r3, [sl]
 800520a:	4620      	mov	r0, r4
 800520c:	4629      	mov	r1, r5
 800520e:	f7fa ffe3 	bl	80001d8 <__aeabi_dsub>
 8005212:	a389      	add	r3, pc, #548	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fa ffe0 	bl	80001dc <__adddf3>
 800521c:	f04f 3bff 	mov.w	fp, #4294967295
 8005220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005224:	e7c4      	b.n	80051b0 <__ieee754_rem_pio2+0x80>
 8005226:	a386      	add	r3, pc, #536	; (adr r3, 8005440 <__ieee754_rem_pio2+0x310>)
 8005228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522c:	f7fa ffd6 	bl	80001dc <__adddf3>
 8005230:	a385      	add	r3, pc, #532	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 8005232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005236:	4604      	mov	r4, r0
 8005238:	460d      	mov	r5, r1
 800523a:	f7fa ffcf 	bl	80001dc <__adddf3>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	e9ca 2300 	strd	r2, r3, [sl]
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f7fa ffc5 	bl	80001d8 <__aeabi_dsub>
 800524e:	a37e      	add	r3, pc, #504	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	e7e0      	b.n	8005218 <__ieee754_rem_pio2+0xe8>
 8005256:	4b87      	ldr	r3, [pc, #540]	; (8005474 <__ieee754_rem_pio2+0x344>)
 8005258:	4598      	cmp	r8, r3
 800525a:	f300 80d9 	bgt.w	8005410 <__ieee754_rem_pio2+0x2e0>
 800525e:	f000 fe79 	bl	8005f54 <fabs>
 8005262:	ec55 4b10 	vmov	r4, r5, d0
 8005266:	ee10 0a10 	vmov	r0, s0
 800526a:	a379      	add	r3, pc, #484	; (adr r3, 8005450 <__ieee754_rem_pio2+0x320>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	4629      	mov	r1, r5
 8005272:	f7fb f969 	bl	8000548 <__aeabi_dmul>
 8005276:	4b80      	ldr	r3, [pc, #512]	; (8005478 <__ieee754_rem_pio2+0x348>)
 8005278:	2200      	movs	r2, #0
 800527a:	f7fa ffaf 	bl	80001dc <__adddf3>
 800527e:	f7fb fbfd 	bl	8000a7c <__aeabi_d2iz>
 8005282:	4683      	mov	fp, r0
 8005284:	f7fb f8f6 	bl	8000474 <__aeabi_i2d>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	ec43 2b18 	vmov	d8, r2, r3
 8005290:	a367      	add	r3, pc, #412	; (adr r3, 8005430 <__ieee754_rem_pio2+0x300>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb f957 	bl	8000548 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f7fa ff99 	bl	80001d8 <__aeabi_dsub>
 80052a6:	a364      	add	r3, pc, #400	; (adr r3, 8005438 <__ieee754_rem_pio2+0x308>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	4606      	mov	r6, r0
 80052ae:	460f      	mov	r7, r1
 80052b0:	ec51 0b18 	vmov	r0, r1, d8
 80052b4:	f7fb f948 	bl	8000548 <__aeabi_dmul>
 80052b8:	f1bb 0f1f 	cmp.w	fp, #31
 80052bc:	4604      	mov	r4, r0
 80052be:	460d      	mov	r5, r1
 80052c0:	dc0d      	bgt.n	80052de <__ieee754_rem_pio2+0x1ae>
 80052c2:	4b6e      	ldr	r3, [pc, #440]	; (800547c <__ieee754_rem_pio2+0x34c>)
 80052c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80052c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052cc:	4543      	cmp	r3, r8
 80052ce:	d006      	beq.n	80052de <__ieee754_rem_pio2+0x1ae>
 80052d0:	4622      	mov	r2, r4
 80052d2:	462b      	mov	r3, r5
 80052d4:	4630      	mov	r0, r6
 80052d6:	4639      	mov	r1, r7
 80052d8:	f7fa ff7e 	bl	80001d8 <__aeabi_dsub>
 80052dc:	e00f      	b.n	80052fe <__ieee754_rem_pio2+0x1ce>
 80052de:	462b      	mov	r3, r5
 80052e0:	4622      	mov	r2, r4
 80052e2:	4630      	mov	r0, r6
 80052e4:	4639      	mov	r1, r7
 80052e6:	f7fa ff77 	bl	80001d8 <__aeabi_dsub>
 80052ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80052ee:	9303      	str	r3, [sp, #12]
 80052f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80052f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80052f8:	f1b8 0f10 	cmp.w	r8, #16
 80052fc:	dc02      	bgt.n	8005304 <__ieee754_rem_pio2+0x1d4>
 80052fe:	e9ca 0100 	strd	r0, r1, [sl]
 8005302:	e039      	b.n	8005378 <__ieee754_rem_pio2+0x248>
 8005304:	a34e      	add	r3, pc, #312	; (adr r3, 8005440 <__ieee754_rem_pio2+0x310>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	ec51 0b18 	vmov	r0, r1, d8
 800530e:	f7fb f91b 	bl	8000548 <__aeabi_dmul>
 8005312:	4604      	mov	r4, r0
 8005314:	460d      	mov	r5, r1
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	4630      	mov	r0, r6
 800531c:	4639      	mov	r1, r7
 800531e:	f7fa ff5b 	bl	80001d8 <__aeabi_dsub>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4680      	mov	r8, r0
 8005328:	4689      	mov	r9, r1
 800532a:	4630      	mov	r0, r6
 800532c:	4639      	mov	r1, r7
 800532e:	f7fa ff53 	bl	80001d8 <__aeabi_dsub>
 8005332:	4622      	mov	r2, r4
 8005334:	462b      	mov	r3, r5
 8005336:	f7fa ff4f 	bl	80001d8 <__aeabi_dsub>
 800533a:	a343      	add	r3, pc, #268	; (adr r3, 8005448 <__ieee754_rem_pio2+0x318>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	4604      	mov	r4, r0
 8005342:	460d      	mov	r5, r1
 8005344:	ec51 0b18 	vmov	r0, r1, d8
 8005348:	f7fb f8fe 	bl	8000548 <__aeabi_dmul>
 800534c:	4622      	mov	r2, r4
 800534e:	462b      	mov	r3, r5
 8005350:	f7fa ff42 	bl	80001d8 <__aeabi_dsub>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4604      	mov	r4, r0
 800535a:	460d      	mov	r5, r1
 800535c:	4640      	mov	r0, r8
 800535e:	4649      	mov	r1, r9
 8005360:	f7fa ff3a 	bl	80001d8 <__aeabi_dsub>
 8005364:	9a03      	ldr	r2, [sp, #12]
 8005366:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b31      	cmp	r3, #49	; 0x31
 800536e:	dc24      	bgt.n	80053ba <__ieee754_rem_pio2+0x28a>
 8005370:	e9ca 0100 	strd	r0, r1, [sl]
 8005374:	4646      	mov	r6, r8
 8005376:	464f      	mov	r7, r9
 8005378:	e9da 8900 	ldrd	r8, r9, [sl]
 800537c:	4630      	mov	r0, r6
 800537e:	4642      	mov	r2, r8
 8005380:	464b      	mov	r3, r9
 8005382:	4639      	mov	r1, r7
 8005384:	f7fa ff28 	bl	80001d8 <__aeabi_dsub>
 8005388:	462b      	mov	r3, r5
 800538a:	4622      	mov	r2, r4
 800538c:	f7fa ff24 	bl	80001d8 <__aeabi_dsub>
 8005390:	9b02      	ldr	r3, [sp, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005398:	f6bf af0a 	bge.w	80051b0 <__ieee754_rem_pio2+0x80>
 800539c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80053a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053a8:	f8ca 8000 	str.w	r8, [sl]
 80053ac:	f8ca 0008 	str.w	r0, [sl, #8]
 80053b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80053b4:	f1cb 0b00 	rsb	fp, fp, #0
 80053b8:	e6fa      	b.n	80051b0 <__ieee754_rem_pio2+0x80>
 80053ba:	a327      	add	r3, pc, #156	; (adr r3, 8005458 <__ieee754_rem_pio2+0x328>)
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	ec51 0b18 	vmov	r0, r1, d8
 80053c4:	f7fb f8c0 	bl	8000548 <__aeabi_dmul>
 80053c8:	4604      	mov	r4, r0
 80053ca:	460d      	mov	r5, r1
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4640      	mov	r0, r8
 80053d2:	4649      	mov	r1, r9
 80053d4:	f7fa ff00 	bl	80001d8 <__aeabi_dsub>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4606      	mov	r6, r0
 80053de:	460f      	mov	r7, r1
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	f7fa fef8 	bl	80001d8 <__aeabi_dsub>
 80053e8:	4622      	mov	r2, r4
 80053ea:	462b      	mov	r3, r5
 80053ec:	f7fa fef4 	bl	80001d8 <__aeabi_dsub>
 80053f0:	a31b      	add	r3, pc, #108	; (adr r3, 8005460 <__ieee754_rem_pio2+0x330>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	4604      	mov	r4, r0
 80053f8:	460d      	mov	r5, r1
 80053fa:	ec51 0b18 	vmov	r0, r1, d8
 80053fe:	f7fb f8a3 	bl	8000548 <__aeabi_dmul>
 8005402:	4622      	mov	r2, r4
 8005404:	462b      	mov	r3, r5
 8005406:	f7fa fee7 	bl	80001d8 <__aeabi_dsub>
 800540a:	4604      	mov	r4, r0
 800540c:	460d      	mov	r5, r1
 800540e:	e75f      	b.n	80052d0 <__ieee754_rem_pio2+0x1a0>
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <__ieee754_rem_pio2+0x350>)
 8005412:	4598      	cmp	r8, r3
 8005414:	dd36      	ble.n	8005484 <__ieee754_rem_pio2+0x354>
 8005416:	ee10 2a10 	vmov	r2, s0
 800541a:	462b      	mov	r3, r5
 800541c:	4620      	mov	r0, r4
 800541e:	4629      	mov	r1, r5
 8005420:	f7fa feda 	bl	80001d8 <__aeabi_dsub>
 8005424:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005428:	e9ca 0100 	strd	r0, r1, [sl]
 800542c:	e694      	b.n	8005158 <__ieee754_rem_pio2+0x28>
 800542e:	bf00      	nop
 8005430:	54400000 	.word	0x54400000
 8005434:	3ff921fb 	.word	0x3ff921fb
 8005438:	1a626331 	.word	0x1a626331
 800543c:	3dd0b461 	.word	0x3dd0b461
 8005440:	1a600000 	.word	0x1a600000
 8005444:	3dd0b461 	.word	0x3dd0b461
 8005448:	2e037073 	.word	0x2e037073
 800544c:	3ba3198a 	.word	0x3ba3198a
 8005450:	6dc9c883 	.word	0x6dc9c883
 8005454:	3fe45f30 	.word	0x3fe45f30
 8005458:	2e000000 	.word	0x2e000000
 800545c:	3ba3198a 	.word	0x3ba3198a
 8005460:	252049c1 	.word	0x252049c1
 8005464:	397b839a 	.word	0x397b839a
 8005468:	3fe921fb 	.word	0x3fe921fb
 800546c:	4002d97b 	.word	0x4002d97b
 8005470:	3ff921fb 	.word	0x3ff921fb
 8005474:	413921fb 	.word	0x413921fb
 8005478:	3fe00000 	.word	0x3fe00000
 800547c:	08006220 	.word	0x08006220
 8005480:	7fefffff 	.word	0x7fefffff
 8005484:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005488:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800548c:	ee10 0a10 	vmov	r0, s0
 8005490:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005494:	ee10 6a10 	vmov	r6, s0
 8005498:	460f      	mov	r7, r1
 800549a:	f7fb faef 	bl	8000a7c <__aeabi_d2iz>
 800549e:	f7fa ffe9 	bl	8000474 <__aeabi_i2d>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	4630      	mov	r0, r6
 80054a8:	4639      	mov	r1, r7
 80054aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ae:	f7fa fe93 	bl	80001d8 <__aeabi_dsub>
 80054b2:	4b23      	ldr	r3, [pc, #140]	; (8005540 <__ieee754_rem_pio2+0x410>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	f7fb f847 	bl	8000548 <__aeabi_dmul>
 80054ba:	460f      	mov	r7, r1
 80054bc:	4606      	mov	r6, r0
 80054be:	f7fb fadd 	bl	8000a7c <__aeabi_d2iz>
 80054c2:	f7fa ffd7 	bl	8000474 <__aeabi_i2d>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4630      	mov	r0, r6
 80054cc:	4639      	mov	r1, r7
 80054ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80054d2:	f7fa fe81 	bl	80001d8 <__aeabi_dsub>
 80054d6:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <__ieee754_rem_pio2+0x410>)
 80054d8:	2200      	movs	r2, #0
 80054da:	f7fb f835 	bl	8000548 <__aeabi_dmul>
 80054de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80054e2:	ad04      	add	r5, sp, #16
 80054e4:	f04f 0803 	mov.w	r8, #3
 80054e8:	46a9      	mov	r9, r5
 80054ea:	2600      	movs	r6, #0
 80054ec:	2700      	movs	r7, #0
 80054ee:	4632      	mov	r2, r6
 80054f0:	463b      	mov	r3, r7
 80054f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80054f6:	46c3      	mov	fp, r8
 80054f8:	3d08      	subs	r5, #8
 80054fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80054fe:	f7fb fa8b 	bl	8000a18 <__aeabi_dcmpeq>
 8005502:	2800      	cmp	r0, #0
 8005504:	d1f3      	bne.n	80054ee <__ieee754_rem_pio2+0x3be>
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <__ieee754_rem_pio2+0x414>)
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	2302      	movs	r3, #2
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	4622      	mov	r2, r4
 8005510:	465b      	mov	r3, fp
 8005512:	4651      	mov	r1, sl
 8005514:	4648      	mov	r0, r9
 8005516:	f000 f8df 	bl	80056d8 <__kernel_rem_pio2>
 800551a:	9b02      	ldr	r3, [sp, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	4683      	mov	fp, r0
 8005520:	f6bf ae46 	bge.w	80051b0 <__ieee754_rem_pio2+0x80>
 8005524:	e9da 2100 	ldrd	r2, r1, [sl]
 8005528:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800552c:	e9ca 2300 	strd	r2, r3, [sl]
 8005530:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005538:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800553c:	e73a      	b.n	80053b4 <__ieee754_rem_pio2+0x284>
 800553e:	bf00      	nop
 8005540:	41700000 	.word	0x41700000
 8005544:	080062a0 	.word	0x080062a0

08005548 <__kernel_cos>:
 8005548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	ec57 6b10 	vmov	r6, r7, d0
 8005550:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005554:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005558:	ed8d 1b00 	vstr	d1, [sp]
 800555c:	da07      	bge.n	800556e <__kernel_cos+0x26>
 800555e:	ee10 0a10 	vmov	r0, s0
 8005562:	4639      	mov	r1, r7
 8005564:	f7fb fa8a 	bl	8000a7c <__aeabi_d2iz>
 8005568:	2800      	cmp	r0, #0
 800556a:	f000 8088 	beq.w	800567e <__kernel_cos+0x136>
 800556e:	4632      	mov	r2, r6
 8005570:	463b      	mov	r3, r7
 8005572:	4630      	mov	r0, r6
 8005574:	4639      	mov	r1, r7
 8005576:	f7fa ffe7 	bl	8000548 <__aeabi_dmul>
 800557a:	4b51      	ldr	r3, [pc, #324]	; (80056c0 <__kernel_cos+0x178>)
 800557c:	2200      	movs	r2, #0
 800557e:	4604      	mov	r4, r0
 8005580:	460d      	mov	r5, r1
 8005582:	f7fa ffe1 	bl	8000548 <__aeabi_dmul>
 8005586:	a340      	add	r3, pc, #256	; (adr r3, 8005688 <__kernel_cos+0x140>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	4682      	mov	sl, r0
 800558e:	468b      	mov	fp, r1
 8005590:	4620      	mov	r0, r4
 8005592:	4629      	mov	r1, r5
 8005594:	f7fa ffd8 	bl	8000548 <__aeabi_dmul>
 8005598:	a33d      	add	r3, pc, #244	; (adr r3, 8005690 <__kernel_cos+0x148>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fa fe1d 	bl	80001dc <__adddf3>
 80055a2:	4622      	mov	r2, r4
 80055a4:	462b      	mov	r3, r5
 80055a6:	f7fa ffcf 	bl	8000548 <__aeabi_dmul>
 80055aa:	a33b      	add	r3, pc, #236	; (adr r3, 8005698 <__kernel_cos+0x150>)
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f7fa fe12 	bl	80001d8 <__aeabi_dsub>
 80055b4:	4622      	mov	r2, r4
 80055b6:	462b      	mov	r3, r5
 80055b8:	f7fa ffc6 	bl	8000548 <__aeabi_dmul>
 80055bc:	a338      	add	r3, pc, #224	; (adr r3, 80056a0 <__kernel_cos+0x158>)
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f7fa fe0b 	bl	80001dc <__adddf3>
 80055c6:	4622      	mov	r2, r4
 80055c8:	462b      	mov	r3, r5
 80055ca:	f7fa ffbd 	bl	8000548 <__aeabi_dmul>
 80055ce:	a336      	add	r3, pc, #216	; (adr r3, 80056a8 <__kernel_cos+0x160>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fa fe00 	bl	80001d8 <__aeabi_dsub>
 80055d8:	4622      	mov	r2, r4
 80055da:	462b      	mov	r3, r5
 80055dc:	f7fa ffb4 	bl	8000548 <__aeabi_dmul>
 80055e0:	a333      	add	r3, pc, #204	; (adr r3, 80056b0 <__kernel_cos+0x168>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f7fa fdf9 	bl	80001dc <__adddf3>
 80055ea:	4622      	mov	r2, r4
 80055ec:	462b      	mov	r3, r5
 80055ee:	f7fa ffab 	bl	8000548 <__aeabi_dmul>
 80055f2:	4622      	mov	r2, r4
 80055f4:	462b      	mov	r3, r5
 80055f6:	f7fa ffa7 	bl	8000548 <__aeabi_dmul>
 80055fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055fe:	4604      	mov	r4, r0
 8005600:	460d      	mov	r5, r1
 8005602:	4630      	mov	r0, r6
 8005604:	4639      	mov	r1, r7
 8005606:	f7fa ff9f 	bl	8000548 <__aeabi_dmul>
 800560a:	460b      	mov	r3, r1
 800560c:	4602      	mov	r2, r0
 800560e:	4629      	mov	r1, r5
 8005610:	4620      	mov	r0, r4
 8005612:	f7fa fde1 	bl	80001d8 <__aeabi_dsub>
 8005616:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <__kernel_cos+0x17c>)
 8005618:	4598      	cmp	r8, r3
 800561a:	4606      	mov	r6, r0
 800561c:	460f      	mov	r7, r1
 800561e:	dc10      	bgt.n	8005642 <__kernel_cos+0xfa>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4650      	mov	r0, sl
 8005626:	4659      	mov	r1, fp
 8005628:	f7fa fdd6 	bl	80001d8 <__aeabi_dsub>
 800562c:	460b      	mov	r3, r1
 800562e:	4926      	ldr	r1, [pc, #152]	; (80056c8 <__kernel_cos+0x180>)
 8005630:	4602      	mov	r2, r0
 8005632:	2000      	movs	r0, #0
 8005634:	f7fa fdd0 	bl	80001d8 <__aeabi_dsub>
 8005638:	ec41 0b10 	vmov	d0, r0, r1
 800563c:	b003      	add	sp, #12
 800563e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005642:	4b22      	ldr	r3, [pc, #136]	; (80056cc <__kernel_cos+0x184>)
 8005644:	4920      	ldr	r1, [pc, #128]	; (80056c8 <__kernel_cos+0x180>)
 8005646:	4598      	cmp	r8, r3
 8005648:	bfcc      	ite	gt
 800564a:	4d21      	ldrgt	r5, [pc, #132]	; (80056d0 <__kernel_cos+0x188>)
 800564c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005650:	2400      	movs	r4, #0
 8005652:	4622      	mov	r2, r4
 8005654:	462b      	mov	r3, r5
 8005656:	2000      	movs	r0, #0
 8005658:	f7fa fdbe 	bl	80001d8 <__aeabi_dsub>
 800565c:	4622      	mov	r2, r4
 800565e:	4680      	mov	r8, r0
 8005660:	4689      	mov	r9, r1
 8005662:	462b      	mov	r3, r5
 8005664:	4650      	mov	r0, sl
 8005666:	4659      	mov	r1, fp
 8005668:	f7fa fdb6 	bl	80001d8 <__aeabi_dsub>
 800566c:	4632      	mov	r2, r6
 800566e:	463b      	mov	r3, r7
 8005670:	f7fa fdb2 	bl	80001d8 <__aeabi_dsub>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4640      	mov	r0, r8
 800567a:	4649      	mov	r1, r9
 800567c:	e7da      	b.n	8005634 <__kernel_cos+0xec>
 800567e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80056b8 <__kernel_cos+0x170>
 8005682:	e7db      	b.n	800563c <__kernel_cos+0xf4>
 8005684:	f3af 8000 	nop.w
 8005688:	be8838d4 	.word	0xbe8838d4
 800568c:	bda8fae9 	.word	0xbda8fae9
 8005690:	bdb4b1c4 	.word	0xbdb4b1c4
 8005694:	3e21ee9e 	.word	0x3e21ee9e
 8005698:	809c52ad 	.word	0x809c52ad
 800569c:	3e927e4f 	.word	0x3e927e4f
 80056a0:	19cb1590 	.word	0x19cb1590
 80056a4:	3efa01a0 	.word	0x3efa01a0
 80056a8:	16c15177 	.word	0x16c15177
 80056ac:	3f56c16c 	.word	0x3f56c16c
 80056b0:	5555554c 	.word	0x5555554c
 80056b4:	3fa55555 	.word	0x3fa55555
 80056b8:	00000000 	.word	0x00000000
 80056bc:	3ff00000 	.word	0x3ff00000
 80056c0:	3fe00000 	.word	0x3fe00000
 80056c4:	3fd33332 	.word	0x3fd33332
 80056c8:	3ff00000 	.word	0x3ff00000
 80056cc:	3fe90000 	.word	0x3fe90000
 80056d0:	3fd20000 	.word	0x3fd20000
 80056d4:	00000000 	.word	0x00000000

080056d8 <__kernel_rem_pio2>:
 80056d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056dc:	ed2d 8b02 	vpush	{d8}
 80056e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80056e4:	f112 0f14 	cmn.w	r2, #20
 80056e8:	9308      	str	r3, [sp, #32]
 80056ea:	9101      	str	r1, [sp, #4]
 80056ec:	4bc4      	ldr	r3, [pc, #784]	; (8005a00 <__kernel_rem_pio2+0x328>)
 80056ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80056f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80056f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056f6:	9302      	str	r3, [sp, #8]
 80056f8:	9b08      	ldr	r3, [sp, #32]
 80056fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80056fe:	bfa8      	it	ge
 8005700:	1ed4      	subge	r4, r2, #3
 8005702:	9306      	str	r3, [sp, #24]
 8005704:	bfb2      	itee	lt
 8005706:	2400      	movlt	r4, #0
 8005708:	2318      	movge	r3, #24
 800570a:	fb94 f4f3 	sdivge	r4, r4, r3
 800570e:	f06f 0317 	mvn.w	r3, #23
 8005712:	fb04 3303 	mla	r3, r4, r3, r3
 8005716:	eb03 0a02 	add.w	sl, r3, r2
 800571a:	9b02      	ldr	r3, [sp, #8]
 800571c:	9a06      	ldr	r2, [sp, #24]
 800571e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80059f0 <__kernel_rem_pio2+0x318>
 8005722:	eb03 0802 	add.w	r8, r3, r2
 8005726:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005728:	1aa7      	subs	r7, r4, r2
 800572a:	ae22      	add	r6, sp, #136	; 0x88
 800572c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005730:	2500      	movs	r5, #0
 8005732:	4545      	cmp	r5, r8
 8005734:	dd13      	ble.n	800575e <__kernel_rem_pio2+0x86>
 8005736:	9b08      	ldr	r3, [sp, #32]
 8005738:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80059f0 <__kernel_rem_pio2+0x318>
 800573c:	aa22      	add	r2, sp, #136	; 0x88
 800573e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005742:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005746:	f04f 0800 	mov.w	r8, #0
 800574a:	9b02      	ldr	r3, [sp, #8]
 800574c:	4598      	cmp	r8, r3
 800574e:	dc2f      	bgt.n	80057b0 <__kernel_rem_pio2+0xd8>
 8005750:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005754:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005758:	462f      	mov	r7, r5
 800575a:	2600      	movs	r6, #0
 800575c:	e01b      	b.n	8005796 <__kernel_rem_pio2+0xbe>
 800575e:	42ef      	cmn	r7, r5
 8005760:	d407      	bmi.n	8005772 <__kernel_rem_pio2+0x9a>
 8005762:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005766:	f7fa fe85 	bl	8000474 <__aeabi_i2d>
 800576a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800576e:	3501      	adds	r5, #1
 8005770:	e7df      	b.n	8005732 <__kernel_rem_pio2+0x5a>
 8005772:	ec51 0b18 	vmov	r0, r1, d8
 8005776:	e7f8      	b.n	800576a <__kernel_rem_pio2+0x92>
 8005778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800577c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005780:	f7fa fee2 	bl	8000548 <__aeabi_dmul>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800578c:	f7fa fd26 	bl	80001dc <__adddf3>
 8005790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005794:	3601      	adds	r6, #1
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	429e      	cmp	r6, r3
 800579a:	f1a7 0708 	sub.w	r7, r7, #8
 800579e:	ddeb      	ble.n	8005778 <__kernel_rem_pio2+0xa0>
 80057a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80057a4:	f108 0801 	add.w	r8, r8, #1
 80057a8:	ecab 7b02 	vstmia	fp!, {d7}
 80057ac:	3508      	adds	r5, #8
 80057ae:	e7cc      	b.n	800574a <__kernel_rem_pio2+0x72>
 80057b0:	9b02      	ldr	r3, [sp, #8]
 80057b2:	aa0e      	add	r2, sp, #56	; 0x38
 80057b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80057b8:	930d      	str	r3, [sp, #52]	; 0x34
 80057ba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80057bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80057c0:	9c02      	ldr	r4, [sp, #8]
 80057c2:	930c      	str	r3, [sp, #48]	; 0x30
 80057c4:	00e3      	lsls	r3, r4, #3
 80057c6:	930a      	str	r3, [sp, #40]	; 0x28
 80057c8:	ab9a      	add	r3, sp, #616	; 0x268
 80057ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80057d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80057d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80057d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80057dc:	46c3      	mov	fp, r8
 80057de:	46a1      	mov	r9, r4
 80057e0:	f1b9 0f00 	cmp.w	r9, #0
 80057e4:	f1a5 0508 	sub.w	r5, r5, #8
 80057e8:	dc77      	bgt.n	80058da <__kernel_rem_pio2+0x202>
 80057ea:	ec47 6b10 	vmov	d0, r6, r7
 80057ee:	4650      	mov	r0, sl
 80057f0:	f000 fc46 	bl	8006080 <scalbn>
 80057f4:	ec57 6b10 	vmov	r6, r7, d0
 80057f8:	2200      	movs	r2, #0
 80057fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80057fe:	ee10 0a10 	vmov	r0, s0
 8005802:	4639      	mov	r1, r7
 8005804:	f7fa fea0 	bl	8000548 <__aeabi_dmul>
 8005808:	ec41 0b10 	vmov	d0, r0, r1
 800580c:	f000 fbb8 	bl	8005f80 <floor>
 8005810:	4b7c      	ldr	r3, [pc, #496]	; (8005a04 <__kernel_rem_pio2+0x32c>)
 8005812:	ec51 0b10 	vmov	r0, r1, d0
 8005816:	2200      	movs	r2, #0
 8005818:	f7fa fe96 	bl	8000548 <__aeabi_dmul>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4630      	mov	r0, r6
 8005822:	4639      	mov	r1, r7
 8005824:	f7fa fcd8 	bl	80001d8 <__aeabi_dsub>
 8005828:	460f      	mov	r7, r1
 800582a:	4606      	mov	r6, r0
 800582c:	f7fb f926 	bl	8000a7c <__aeabi_d2iz>
 8005830:	9004      	str	r0, [sp, #16]
 8005832:	f7fa fe1f 	bl	8000474 <__aeabi_i2d>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4630      	mov	r0, r6
 800583c:	4639      	mov	r1, r7
 800583e:	f7fa fccb 	bl	80001d8 <__aeabi_dsub>
 8005842:	f1ba 0f00 	cmp.w	sl, #0
 8005846:	4606      	mov	r6, r0
 8005848:	460f      	mov	r7, r1
 800584a:	dd6d      	ble.n	8005928 <__kernel_rem_pio2+0x250>
 800584c:	1e62      	subs	r2, r4, #1
 800584e:	ab0e      	add	r3, sp, #56	; 0x38
 8005850:	9d04      	ldr	r5, [sp, #16]
 8005852:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005856:	f1ca 0118 	rsb	r1, sl, #24
 800585a:	fa40 f301 	asr.w	r3, r0, r1
 800585e:	441d      	add	r5, r3
 8005860:	408b      	lsls	r3, r1
 8005862:	1ac0      	subs	r0, r0, r3
 8005864:	ab0e      	add	r3, sp, #56	; 0x38
 8005866:	9504      	str	r5, [sp, #16]
 8005868:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800586c:	f1ca 0317 	rsb	r3, sl, #23
 8005870:	fa40 fb03 	asr.w	fp, r0, r3
 8005874:	f1bb 0f00 	cmp.w	fp, #0
 8005878:	dd65      	ble.n	8005946 <__kernel_rem_pio2+0x26e>
 800587a:	9b04      	ldr	r3, [sp, #16]
 800587c:	2200      	movs	r2, #0
 800587e:	3301      	adds	r3, #1
 8005880:	9304      	str	r3, [sp, #16]
 8005882:	4615      	mov	r5, r2
 8005884:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005888:	4294      	cmp	r4, r2
 800588a:	f300 809c 	bgt.w	80059c6 <__kernel_rem_pio2+0x2ee>
 800588e:	f1ba 0f00 	cmp.w	sl, #0
 8005892:	dd07      	ble.n	80058a4 <__kernel_rem_pio2+0x1cc>
 8005894:	f1ba 0f01 	cmp.w	sl, #1
 8005898:	f000 80c0 	beq.w	8005a1c <__kernel_rem_pio2+0x344>
 800589c:	f1ba 0f02 	cmp.w	sl, #2
 80058a0:	f000 80c6 	beq.w	8005a30 <__kernel_rem_pio2+0x358>
 80058a4:	f1bb 0f02 	cmp.w	fp, #2
 80058a8:	d14d      	bne.n	8005946 <__kernel_rem_pio2+0x26e>
 80058aa:	4632      	mov	r2, r6
 80058ac:	463b      	mov	r3, r7
 80058ae:	4956      	ldr	r1, [pc, #344]	; (8005a08 <__kernel_rem_pio2+0x330>)
 80058b0:	2000      	movs	r0, #0
 80058b2:	f7fa fc91 	bl	80001d8 <__aeabi_dsub>
 80058b6:	4606      	mov	r6, r0
 80058b8:	460f      	mov	r7, r1
 80058ba:	2d00      	cmp	r5, #0
 80058bc:	d043      	beq.n	8005946 <__kernel_rem_pio2+0x26e>
 80058be:	4650      	mov	r0, sl
 80058c0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80059f8 <__kernel_rem_pio2+0x320>
 80058c4:	f000 fbdc 	bl	8006080 <scalbn>
 80058c8:	4630      	mov	r0, r6
 80058ca:	4639      	mov	r1, r7
 80058cc:	ec53 2b10 	vmov	r2, r3, d0
 80058d0:	f7fa fc82 	bl	80001d8 <__aeabi_dsub>
 80058d4:	4606      	mov	r6, r0
 80058d6:	460f      	mov	r7, r1
 80058d8:	e035      	b.n	8005946 <__kernel_rem_pio2+0x26e>
 80058da:	4b4c      	ldr	r3, [pc, #304]	; (8005a0c <__kernel_rem_pio2+0x334>)
 80058dc:	2200      	movs	r2, #0
 80058de:	4630      	mov	r0, r6
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7fa fe31 	bl	8000548 <__aeabi_dmul>
 80058e6:	f7fb f8c9 	bl	8000a7c <__aeabi_d2iz>
 80058ea:	f7fa fdc3 	bl	8000474 <__aeabi_i2d>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	ec43 2b18 	vmov	d8, r2, r3
 80058f6:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <__kernel_rem_pio2+0x338>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	f7fa fe25 	bl	8000548 <__aeabi_dmul>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4630      	mov	r0, r6
 8005904:	4639      	mov	r1, r7
 8005906:	f7fa fc67 	bl	80001d8 <__aeabi_dsub>
 800590a:	f7fb f8b7 	bl	8000a7c <__aeabi_d2iz>
 800590e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005912:	f84b 0b04 	str.w	r0, [fp], #4
 8005916:	ec51 0b18 	vmov	r0, r1, d8
 800591a:	f7fa fc5f 	bl	80001dc <__adddf3>
 800591e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005922:	4606      	mov	r6, r0
 8005924:	460f      	mov	r7, r1
 8005926:	e75b      	b.n	80057e0 <__kernel_rem_pio2+0x108>
 8005928:	d106      	bne.n	8005938 <__kernel_rem_pio2+0x260>
 800592a:	1e63      	subs	r3, r4, #1
 800592c:	aa0e      	add	r2, sp, #56	; 0x38
 800592e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005932:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005936:	e79d      	b.n	8005874 <__kernel_rem_pio2+0x19c>
 8005938:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <__kernel_rem_pio2+0x33c>)
 800593a:	2200      	movs	r2, #0
 800593c:	f7fb f88a 	bl	8000a54 <__aeabi_dcmpge>
 8005940:	2800      	cmp	r0, #0
 8005942:	d13d      	bne.n	80059c0 <__kernel_rem_pio2+0x2e8>
 8005944:	4683      	mov	fp, r0
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	4630      	mov	r0, r6
 800594c:	4639      	mov	r1, r7
 800594e:	f7fb f863 	bl	8000a18 <__aeabi_dcmpeq>
 8005952:	2800      	cmp	r0, #0
 8005954:	f000 80c0 	beq.w	8005ad8 <__kernel_rem_pio2+0x400>
 8005958:	1e65      	subs	r5, r4, #1
 800595a:	462b      	mov	r3, r5
 800595c:	2200      	movs	r2, #0
 800595e:	9902      	ldr	r1, [sp, #8]
 8005960:	428b      	cmp	r3, r1
 8005962:	da6c      	bge.n	8005a3e <__kernel_rem_pio2+0x366>
 8005964:	2a00      	cmp	r2, #0
 8005966:	f000 8089 	beq.w	8005a7c <__kernel_rem_pio2+0x3a4>
 800596a:	ab0e      	add	r3, sp, #56	; 0x38
 800596c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005970:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80ad 	beq.w	8005ad4 <__kernel_rem_pio2+0x3fc>
 800597a:	4650      	mov	r0, sl
 800597c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80059f8 <__kernel_rem_pio2+0x320>
 8005980:	f000 fb7e 	bl	8006080 <scalbn>
 8005984:	ab9a      	add	r3, sp, #616	; 0x268
 8005986:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800598a:	ec57 6b10 	vmov	r6, r7, d0
 800598e:	00ec      	lsls	r4, r5, #3
 8005990:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005994:	46aa      	mov	sl, r5
 8005996:	f1ba 0f00 	cmp.w	sl, #0
 800599a:	f280 80d6 	bge.w	8005b4a <__kernel_rem_pio2+0x472>
 800599e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80059f0 <__kernel_rem_pio2+0x318>
 80059a2:	462e      	mov	r6, r5
 80059a4:	2e00      	cmp	r6, #0
 80059a6:	f2c0 8104 	blt.w	8005bb2 <__kernel_rem_pio2+0x4da>
 80059aa:	ab72      	add	r3, sp, #456	; 0x1c8
 80059ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 80059b0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005a18 <__kernel_rem_pio2+0x340>
 80059b4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80059b8:	f04f 0800 	mov.w	r8, #0
 80059bc:	1baf      	subs	r7, r5, r6
 80059be:	e0ea      	b.n	8005b96 <__kernel_rem_pio2+0x4be>
 80059c0:	f04f 0b02 	mov.w	fp, #2
 80059c4:	e759      	b.n	800587a <__kernel_rem_pio2+0x1a2>
 80059c6:	f8d8 3000 	ldr.w	r3, [r8]
 80059ca:	b955      	cbnz	r5, 80059e2 <__kernel_rem_pio2+0x30a>
 80059cc:	b123      	cbz	r3, 80059d8 <__kernel_rem_pio2+0x300>
 80059ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80059d2:	f8c8 3000 	str.w	r3, [r8]
 80059d6:	2301      	movs	r3, #1
 80059d8:	3201      	adds	r2, #1
 80059da:	f108 0804 	add.w	r8, r8, #4
 80059de:	461d      	mov	r5, r3
 80059e0:	e752      	b.n	8005888 <__kernel_rem_pio2+0x1b0>
 80059e2:	1acb      	subs	r3, r1, r3
 80059e4:	f8c8 3000 	str.w	r3, [r8]
 80059e8:	462b      	mov	r3, r5
 80059ea:	e7f5      	b.n	80059d8 <__kernel_rem_pio2+0x300>
 80059ec:	f3af 8000 	nop.w
	...
 80059fc:	3ff00000 	.word	0x3ff00000
 8005a00:	080063e8 	.word	0x080063e8
 8005a04:	40200000 	.word	0x40200000
 8005a08:	3ff00000 	.word	0x3ff00000
 8005a0c:	3e700000 	.word	0x3e700000
 8005a10:	41700000 	.word	0x41700000
 8005a14:	3fe00000 	.word	0x3fe00000
 8005a18:	080063a8 	.word	0x080063a8
 8005a1c:	1e62      	subs	r2, r4, #1
 8005a1e:	ab0e      	add	r3, sp, #56	; 0x38
 8005a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005a28:	a90e      	add	r1, sp, #56	; 0x38
 8005a2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005a2e:	e739      	b.n	80058a4 <__kernel_rem_pio2+0x1cc>
 8005a30:	1e62      	subs	r2, r4, #1
 8005a32:	ab0e      	add	r3, sp, #56	; 0x38
 8005a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a3c:	e7f4      	b.n	8005a28 <__kernel_rem_pio2+0x350>
 8005a3e:	a90e      	add	r1, sp, #56	; 0x38
 8005a40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	430a      	orrs	r2, r1
 8005a48:	e789      	b.n	800595e <__kernel_rem_pio2+0x286>
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005a50:	2900      	cmp	r1, #0
 8005a52:	d0fa      	beq.n	8005a4a <__kernel_rem_pio2+0x372>
 8005a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a56:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005a5a:	446a      	add	r2, sp
 8005a5c:	3a98      	subs	r2, #152	; 0x98
 8005a5e:	920a      	str	r2, [sp, #40]	; 0x28
 8005a60:	9a08      	ldr	r2, [sp, #32]
 8005a62:	18e3      	adds	r3, r4, r3
 8005a64:	18a5      	adds	r5, r4, r2
 8005a66:	aa22      	add	r2, sp, #136	; 0x88
 8005a68:	f104 0801 	add.w	r8, r4, #1
 8005a6c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	9b04      	ldr	r3, [sp, #16]
 8005a74:	4543      	cmp	r3, r8
 8005a76:	da04      	bge.n	8005a82 <__kernel_rem_pio2+0x3aa>
 8005a78:	461c      	mov	r4, r3
 8005a7a:	e6a3      	b.n	80057c4 <__kernel_rem_pio2+0xec>
 8005a7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e7e4      	b.n	8005a4c <__kernel_rem_pio2+0x374>
 8005a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005a88:	f7fa fcf4 	bl	8000474 <__aeabi_i2d>
 8005a8c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a92:	46ab      	mov	fp, r5
 8005a94:	461c      	mov	r4, r3
 8005a96:	f04f 0900 	mov.w	r9, #0
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	2700      	movs	r7, #0
 8005a9e:	9b06      	ldr	r3, [sp, #24]
 8005aa0:	4599      	cmp	r9, r3
 8005aa2:	dd06      	ble.n	8005ab2 <__kernel_rem_pio2+0x3da>
 8005aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005aaa:	f108 0801 	add.w	r8, r8, #1
 8005aae:	930a      	str	r3, [sp, #40]	; 0x28
 8005ab0:	e7df      	b.n	8005a72 <__kernel_rem_pio2+0x39a>
 8005ab2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005ab6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005aba:	f7fa fd45 	bl	8000548 <__aeabi_dmul>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	f7fa fb89 	bl	80001dc <__adddf3>
 8005aca:	f109 0901 	add.w	r9, r9, #1
 8005ace:	4606      	mov	r6, r0
 8005ad0:	460f      	mov	r7, r1
 8005ad2:	e7e4      	b.n	8005a9e <__kernel_rem_pio2+0x3c6>
 8005ad4:	3d01      	subs	r5, #1
 8005ad6:	e748      	b.n	800596a <__kernel_rem_pio2+0x292>
 8005ad8:	ec47 6b10 	vmov	d0, r6, r7
 8005adc:	f1ca 0000 	rsb	r0, sl, #0
 8005ae0:	f000 face 	bl	8006080 <scalbn>
 8005ae4:	ec57 6b10 	vmov	r6, r7, d0
 8005ae8:	4ba0      	ldr	r3, [pc, #640]	; (8005d6c <__kernel_rem_pio2+0x694>)
 8005aea:	ee10 0a10 	vmov	r0, s0
 8005aee:	2200      	movs	r2, #0
 8005af0:	4639      	mov	r1, r7
 8005af2:	f7fa ffaf 	bl	8000a54 <__aeabi_dcmpge>
 8005af6:	b1f8      	cbz	r0, 8005b38 <__kernel_rem_pio2+0x460>
 8005af8:	4b9d      	ldr	r3, [pc, #628]	; (8005d70 <__kernel_rem_pio2+0x698>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fa fd22 	bl	8000548 <__aeabi_dmul>
 8005b04:	f7fa ffba 	bl	8000a7c <__aeabi_d2iz>
 8005b08:	4680      	mov	r8, r0
 8005b0a:	f7fa fcb3 	bl	8000474 <__aeabi_i2d>
 8005b0e:	4b97      	ldr	r3, [pc, #604]	; (8005d6c <__kernel_rem_pio2+0x694>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	f7fa fd19 	bl	8000548 <__aeabi_dmul>
 8005b16:	460b      	mov	r3, r1
 8005b18:	4602      	mov	r2, r0
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	f7fa fb5b 	bl	80001d8 <__aeabi_dsub>
 8005b22:	f7fa ffab 	bl	8000a7c <__aeabi_d2iz>
 8005b26:	1c65      	adds	r5, r4, #1
 8005b28:	ab0e      	add	r3, sp, #56	; 0x38
 8005b2a:	f10a 0a18 	add.w	sl, sl, #24
 8005b2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b32:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005b36:	e720      	b.n	800597a <__kernel_rem_pio2+0x2a2>
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fa ff9e 	bl	8000a7c <__aeabi_d2iz>
 8005b40:	ab0e      	add	r3, sp, #56	; 0x38
 8005b42:	4625      	mov	r5, r4
 8005b44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b48:	e717      	b.n	800597a <__kernel_rem_pio2+0x2a2>
 8005b4a:	ab0e      	add	r3, sp, #56	; 0x38
 8005b4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005b50:	f7fa fc90 	bl	8000474 <__aeabi_i2d>
 8005b54:	4632      	mov	r2, r6
 8005b56:	463b      	mov	r3, r7
 8005b58:	f7fa fcf6 	bl	8000548 <__aeabi_dmul>
 8005b5c:	4b84      	ldr	r3, [pc, #528]	; (8005d70 <__kernel_rem_pio2+0x698>)
 8005b5e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005b62:	2200      	movs	r2, #0
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	f7fa fcee 	bl	8000548 <__aeabi_dmul>
 8005b6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b70:	4606      	mov	r6, r0
 8005b72:	460f      	mov	r7, r1
 8005b74:	e70f      	b.n	8005996 <__kernel_rem_pio2+0x2be>
 8005b76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005b7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005b7e:	f7fa fce3 	bl	8000548 <__aeabi_dmul>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b8a:	f7fa fb27 	bl	80001dc <__adddf3>
 8005b8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b92:	f108 0801 	add.w	r8, r8, #1
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	4598      	cmp	r8, r3
 8005b9a:	dc01      	bgt.n	8005ba0 <__kernel_rem_pio2+0x4c8>
 8005b9c:	45b8      	cmp	r8, r7
 8005b9e:	ddea      	ble.n	8005b76 <__kernel_rem_pio2+0x49e>
 8005ba0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005ba4:	ab4a      	add	r3, sp, #296	; 0x128
 8005ba6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005baa:	ed87 7b00 	vstr	d7, [r7]
 8005bae:	3e01      	subs	r6, #1
 8005bb0:	e6f8      	b.n	80059a4 <__kernel_rem_pio2+0x2cc>
 8005bb2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	dc0b      	bgt.n	8005bd0 <__kernel_rem_pio2+0x4f8>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dc35      	bgt.n	8005c28 <__kernel_rem_pio2+0x550>
 8005bbc:	d059      	beq.n	8005c72 <__kernel_rem_pio2+0x59a>
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	f003 0007 	and.w	r0, r3, #7
 8005bc4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005bc8:	ecbd 8b02 	vpop	{d8}
 8005bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d1f3      	bne.n	8005bbe <__kernel_rem_pio2+0x4e6>
 8005bd6:	ab4a      	add	r3, sp, #296	; 0x128
 8005bd8:	4423      	add	r3, r4
 8005bda:	9306      	str	r3, [sp, #24]
 8005bdc:	461c      	mov	r4, r3
 8005bde:	469a      	mov	sl, r3
 8005be0:	9502      	str	r5, [sp, #8]
 8005be2:	9b02      	ldr	r3, [sp, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f1aa 0a08 	sub.w	sl, sl, #8
 8005bea:	dc6b      	bgt.n	8005cc4 <__kernel_rem_pio2+0x5ec>
 8005bec:	46aa      	mov	sl, r5
 8005bee:	f1ba 0f01 	cmp.w	sl, #1
 8005bf2:	f1a4 0408 	sub.w	r4, r4, #8
 8005bf6:	f300 8085 	bgt.w	8005d04 <__kernel_rem_pio2+0x62c>
 8005bfa:	9c06      	ldr	r4, [sp, #24]
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	3408      	adds	r4, #8
 8005c00:	2100      	movs	r1, #0
 8005c02:	2d01      	cmp	r5, #1
 8005c04:	f300 809d 	bgt.w	8005d42 <__kernel_rem_pio2+0x66a>
 8005c08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005c0c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005c10:	f1bb 0f00 	cmp.w	fp, #0
 8005c14:	f040 809b 	bne.w	8005d4e <__kernel_rem_pio2+0x676>
 8005c18:	9b01      	ldr	r3, [sp, #4]
 8005c1a:	e9c3 5600 	strd	r5, r6, [r3]
 8005c1e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005c22:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005c26:	e7ca      	b.n	8005bbe <__kernel_rem_pio2+0x4e6>
 8005c28:	3408      	adds	r4, #8
 8005c2a:	ab4a      	add	r3, sp, #296	; 0x128
 8005c2c:	441c      	add	r4, r3
 8005c2e:	462e      	mov	r6, r5
 8005c30:	2000      	movs	r0, #0
 8005c32:	2100      	movs	r1, #0
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	da36      	bge.n	8005ca6 <__kernel_rem_pio2+0x5ce>
 8005c38:	f1bb 0f00 	cmp.w	fp, #0
 8005c3c:	d039      	beq.n	8005cb2 <__kernel_rem_pio2+0x5da>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c44:	9c01      	ldr	r4, [sp, #4]
 8005c46:	e9c4 2300 	strd	r2, r3, [r4]
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005c52:	f7fa fac1 	bl	80001d8 <__aeabi_dsub>
 8005c56:	ae4c      	add	r6, sp, #304	; 0x130
 8005c58:	2401      	movs	r4, #1
 8005c5a:	42a5      	cmp	r5, r4
 8005c5c:	da2c      	bge.n	8005cb8 <__kernel_rem_pio2+0x5e0>
 8005c5e:	f1bb 0f00 	cmp.w	fp, #0
 8005c62:	d002      	beq.n	8005c6a <__kernel_rem_pio2+0x592>
 8005c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c68:	4619      	mov	r1, r3
 8005c6a:	9b01      	ldr	r3, [sp, #4]
 8005c6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005c70:	e7a5      	b.n	8005bbe <__kernel_rem_pio2+0x4e6>
 8005c72:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005c76:	eb0d 0403 	add.w	r4, sp, r3
 8005c7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005c7e:	2000      	movs	r0, #0
 8005c80:	2100      	movs	r1, #0
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	da09      	bge.n	8005c9a <__kernel_rem_pio2+0x5c2>
 8005c86:	f1bb 0f00 	cmp.w	fp, #0
 8005c8a:	d002      	beq.n	8005c92 <__kernel_rem_pio2+0x5ba>
 8005c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c90:	4619      	mov	r1, r3
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	e9c3 0100 	strd	r0, r1, [r3]
 8005c98:	e791      	b.n	8005bbe <__kernel_rem_pio2+0x4e6>
 8005c9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005c9e:	f7fa fa9d 	bl	80001dc <__adddf3>
 8005ca2:	3d01      	subs	r5, #1
 8005ca4:	e7ed      	b.n	8005c82 <__kernel_rem_pio2+0x5aa>
 8005ca6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005caa:	f7fa fa97 	bl	80001dc <__adddf3>
 8005cae:	3e01      	subs	r6, #1
 8005cb0:	e7c0      	b.n	8005c34 <__kernel_rem_pio2+0x55c>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	e7c5      	b.n	8005c44 <__kernel_rem_pio2+0x56c>
 8005cb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005cbc:	f7fa fa8e 	bl	80001dc <__adddf3>
 8005cc0:	3401      	adds	r4, #1
 8005cc2:	e7ca      	b.n	8005c5a <__kernel_rem_pio2+0x582>
 8005cc4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005cc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005ccc:	9b02      	ldr	r3, [sp, #8]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	9302      	str	r3, [sp, #8]
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	4649      	mov	r1, r9
 8005cda:	f7fa fa7f 	bl	80001dc <__adddf3>
 8005cde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f7fa fa75 	bl	80001d8 <__aeabi_dsub>
 8005cee:	4632      	mov	r2, r6
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	f7fa fa73 	bl	80001dc <__adddf3>
 8005cf6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005cfa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005cfe:	ed8a 7b00 	vstr	d7, [sl]
 8005d02:	e76e      	b.n	8005be2 <__kernel_rem_pio2+0x50a>
 8005d04:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005d08:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	4632      	mov	r2, r6
 8005d10:	463b      	mov	r3, r7
 8005d12:	4649      	mov	r1, r9
 8005d14:	f7fa fa62 	bl	80001dc <__adddf3>
 8005d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4640      	mov	r0, r8
 8005d22:	4649      	mov	r1, r9
 8005d24:	f7fa fa58 	bl	80001d8 <__aeabi_dsub>
 8005d28:	4632      	mov	r2, r6
 8005d2a:	463b      	mov	r3, r7
 8005d2c:	f7fa fa56 	bl	80001dc <__adddf3>
 8005d30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d38:	ed84 7b00 	vstr	d7, [r4]
 8005d3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d40:	e755      	b.n	8005bee <__kernel_rem_pio2+0x516>
 8005d42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d46:	f7fa fa49 	bl	80001dc <__adddf3>
 8005d4a:	3d01      	subs	r5, #1
 8005d4c:	e759      	b.n	8005c02 <__kernel_rem_pio2+0x52a>
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	9a01      	ldr	r2, [sp, #4]
 8005d52:	601d      	str	r5, [r3, #0]
 8005d54:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005d58:	605c      	str	r4, [r3, #4]
 8005d5a:	609f      	str	r7, [r3, #8]
 8005d5c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005d60:	60d3      	str	r3, [r2, #12]
 8005d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d66:	6110      	str	r0, [r2, #16]
 8005d68:	6153      	str	r3, [r2, #20]
 8005d6a:	e728      	b.n	8005bbe <__kernel_rem_pio2+0x4e6>
 8005d6c:	41700000 	.word	0x41700000
 8005d70:	3e700000 	.word	0x3e700000
 8005d74:	00000000 	.word	0x00000000

08005d78 <__kernel_sin>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	ed2d 8b04 	vpush	{d8-d9}
 8005d80:	eeb0 8a41 	vmov.f32	s16, s2
 8005d84:	eef0 8a61 	vmov.f32	s17, s3
 8005d88:	ec55 4b10 	vmov	r4, r5, d0
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005d92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005d96:	9001      	str	r0, [sp, #4]
 8005d98:	da06      	bge.n	8005da8 <__kernel_sin+0x30>
 8005d9a:	ee10 0a10 	vmov	r0, s0
 8005d9e:	4629      	mov	r1, r5
 8005da0:	f7fa fe6c 	bl	8000a7c <__aeabi_d2iz>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d051      	beq.n	8005e4c <__kernel_sin+0xd4>
 8005da8:	4622      	mov	r2, r4
 8005daa:	462b      	mov	r3, r5
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7fa fbca 	bl	8000548 <__aeabi_dmul>
 8005db4:	4682      	mov	sl, r0
 8005db6:	468b      	mov	fp, r1
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	f7fa fbc2 	bl	8000548 <__aeabi_dmul>
 8005dc4:	a341      	add	r3, pc, #260	; (adr r3, 8005ecc <__kernel_sin+0x154>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	4680      	mov	r8, r0
 8005dcc:	4689      	mov	r9, r1
 8005dce:	4650      	mov	r0, sl
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	f7fa fbb9 	bl	8000548 <__aeabi_dmul>
 8005dd6:	a33f      	add	r3, pc, #252	; (adr r3, 8005ed4 <__kernel_sin+0x15c>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	f7fa f9fc 	bl	80001d8 <__aeabi_dsub>
 8005de0:	4652      	mov	r2, sl
 8005de2:	465b      	mov	r3, fp
 8005de4:	f7fa fbb0 	bl	8000548 <__aeabi_dmul>
 8005de8:	a33c      	add	r3, pc, #240	; (adr r3, 8005edc <__kernel_sin+0x164>)
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f7fa f9f5 	bl	80001dc <__adddf3>
 8005df2:	4652      	mov	r2, sl
 8005df4:	465b      	mov	r3, fp
 8005df6:	f7fa fba7 	bl	8000548 <__aeabi_dmul>
 8005dfa:	a33a      	add	r3, pc, #232	; (adr r3, 8005ee4 <__kernel_sin+0x16c>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f7fa f9ea 	bl	80001d8 <__aeabi_dsub>
 8005e04:	4652      	mov	r2, sl
 8005e06:	465b      	mov	r3, fp
 8005e08:	f7fa fb9e 	bl	8000548 <__aeabi_dmul>
 8005e0c:	a337      	add	r3, pc, #220	; (adr r3, 8005eec <__kernel_sin+0x174>)
 8005e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e12:	f7fa f9e3 	bl	80001dc <__adddf3>
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	b9eb      	cbnz	r3, 8005e5a <__kernel_sin+0xe2>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4650      	mov	r0, sl
 8005e24:	4659      	mov	r1, fp
 8005e26:	f7fa fb8f 	bl	8000548 <__aeabi_dmul>
 8005e2a:	a325      	add	r3, pc, #148	; (adr r3, 8005ec0 <__kernel_sin+0x148>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa f9d2 	bl	80001d8 <__aeabi_dsub>
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	f7fa fb86 	bl	8000548 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4620      	mov	r0, r4
 8005e42:	4629      	mov	r1, r5
 8005e44:	f7fa f9ca 	bl	80001dc <__adddf3>
 8005e48:	4604      	mov	r4, r0
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	ec45 4b10 	vmov	d0, r4, r5
 8005e50:	b003      	add	sp, #12
 8005e52:	ecbd 8b04 	vpop	{d8-d9}
 8005e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <__kernel_sin+0x150>)
 8005e5c:	ec51 0b18 	vmov	r0, r1, d8
 8005e60:	2200      	movs	r2, #0
 8005e62:	f7fa fb71 	bl	8000548 <__aeabi_dmul>
 8005e66:	4632      	mov	r2, r6
 8005e68:	ec41 0b19 	vmov	d9, r0, r1
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	4640      	mov	r0, r8
 8005e70:	4649      	mov	r1, r9
 8005e72:	f7fa fb69 	bl	8000548 <__aeabi_dmul>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	ec51 0b19 	vmov	r0, r1, d9
 8005e7e:	f7fa f9ab 	bl	80001d8 <__aeabi_dsub>
 8005e82:	4652      	mov	r2, sl
 8005e84:	465b      	mov	r3, fp
 8005e86:	f7fa fb5f 	bl	8000548 <__aeabi_dmul>
 8005e8a:	ec53 2b18 	vmov	r2, r3, d8
 8005e8e:	f7fa f9a3 	bl	80001d8 <__aeabi_dsub>
 8005e92:	a30b      	add	r3, pc, #44	; (adr r3, 8005ec0 <__kernel_sin+0x148>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	4606      	mov	r6, r0
 8005e9a:	460f      	mov	r7, r1
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	f7fa fb52 	bl	8000548 <__aeabi_dmul>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	4639      	mov	r1, r7
 8005eac:	f7fa f996 	bl	80001dc <__adddf3>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f7fa f98e 	bl	80001d8 <__aeabi_dsub>
 8005ebc:	e7c4      	b.n	8005e48 <__kernel_sin+0xd0>
 8005ebe:	bf00      	nop
 8005ec0:	55555549 	.word	0x55555549
 8005ec4:	3fc55555 	.word	0x3fc55555
 8005ec8:	3fe00000 	.word	0x3fe00000
 8005ecc:	5acfd57c 	.word	0x5acfd57c
 8005ed0:	3de5d93a 	.word	0x3de5d93a
 8005ed4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ed8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005edc:	57b1fe7d 	.word	0x57b1fe7d
 8005ee0:	3ec71de3 	.word	0x3ec71de3
 8005ee4:	19c161d5 	.word	0x19c161d5
 8005ee8:	3f2a01a0 	.word	0x3f2a01a0
 8005eec:	1110f8a6 	.word	0x1110f8a6
 8005ef0:	3f811111 	.word	0x3f811111

08005ef4 <with_errno>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	460d      	mov	r5, r1
 8005efa:	4616      	mov	r6, r2
 8005efc:	f7fe fec0 	bl	8004c80 <__errno>
 8005f00:	4629      	mov	r1, r5
 8005f02:	6006      	str	r6, [r0, #0]
 8005f04:	4620      	mov	r0, r4
 8005f06:	bd70      	pop	{r4, r5, r6, pc}

08005f08 <xflow>:
 8005f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f0a:	4614      	mov	r4, r2
 8005f0c:	461d      	mov	r5, r3
 8005f0e:	b108      	cbz	r0, 8005f14 <xflow+0xc>
 8005f10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f14:	e9cd 2300 	strd	r2, r3, [sp]
 8005f18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa fb12 	bl	8000548 <__aeabi_dmul>
 8005f24:	2222      	movs	r2, #34	; 0x22
 8005f26:	b003      	add	sp, #12
 8005f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f2c:	f7ff bfe2 	b.w	8005ef4 <with_errno>

08005f30 <__math_uflow>:
 8005f30:	b508      	push	{r3, lr}
 8005f32:	2200      	movs	r2, #0
 8005f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005f38:	f7ff ffe6 	bl	8005f08 <xflow>
 8005f3c:	ec41 0b10 	vmov	d0, r0, r1
 8005f40:	bd08      	pop	{r3, pc}

08005f42 <__math_oflow>:
 8005f42:	b508      	push	{r3, lr}
 8005f44:	2200      	movs	r2, #0
 8005f46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005f4a:	f7ff ffdd 	bl	8005f08 <xflow>
 8005f4e:	ec41 0b10 	vmov	d0, r0, r1
 8005f52:	bd08      	pop	{r3, pc}

08005f54 <fabs>:
 8005f54:	ec51 0b10 	vmov	r0, r1, d0
 8005f58:	ee10 2a10 	vmov	r2, s0
 8005f5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f60:	ec43 2b10 	vmov	d0, r2, r3
 8005f64:	4770      	bx	lr

08005f66 <finite>:
 8005f66:	b082      	sub	sp, #8
 8005f68:	ed8d 0b00 	vstr	d0, [sp]
 8005f6c:	9801      	ldr	r0, [sp, #4]
 8005f6e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005f72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005f76:	0fc0      	lsrs	r0, r0, #31
 8005f78:	b002      	add	sp, #8
 8005f7a:	4770      	bx	lr
 8005f7c:	0000      	movs	r0, r0
	...

08005f80 <floor>:
 8005f80:	ec51 0b10 	vmov	r0, r1, d0
 8005f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005f8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005f90:	2e13      	cmp	r6, #19
 8005f92:	ee10 5a10 	vmov	r5, s0
 8005f96:	ee10 8a10 	vmov	r8, s0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	dc32      	bgt.n	8006004 <floor+0x84>
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	da14      	bge.n	8005fcc <floor+0x4c>
 8005fa2:	a333      	add	r3, pc, #204	; (adr r3, 8006070 <floor+0xf0>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa f918 	bl	80001dc <__adddf3>
 8005fac:	2200      	movs	r2, #0
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f7fa fd5a 	bl	8000a68 <__aeabi_dcmpgt>
 8005fb4:	b138      	cbz	r0, 8005fc6 <floor+0x46>
 8005fb6:	2c00      	cmp	r4, #0
 8005fb8:	da57      	bge.n	800606a <floor+0xea>
 8005fba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005fbe:	431d      	orrs	r5, r3
 8005fc0:	d001      	beq.n	8005fc6 <floor+0x46>
 8005fc2:	4c2d      	ldr	r4, [pc, #180]	; (8006078 <floor+0xf8>)
 8005fc4:	2500      	movs	r5, #0
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	4628      	mov	r0, r5
 8005fca:	e025      	b.n	8006018 <floor+0x98>
 8005fcc:	4f2b      	ldr	r7, [pc, #172]	; (800607c <floor+0xfc>)
 8005fce:	4137      	asrs	r7, r6
 8005fd0:	ea01 0307 	and.w	r3, r1, r7
 8005fd4:	4303      	orrs	r3, r0
 8005fd6:	d01f      	beq.n	8006018 <floor+0x98>
 8005fd8:	a325      	add	r3, pc, #148	; (adr r3, 8006070 <floor+0xf0>)
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f7fa f8fd 	bl	80001dc <__adddf3>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f7fa fd3f 	bl	8000a68 <__aeabi_dcmpgt>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d0eb      	beq.n	8005fc6 <floor+0x46>
 8005fee:	2c00      	cmp	r4, #0
 8005ff0:	bfbe      	ittt	lt
 8005ff2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005ff6:	fa43 f606 	asrlt.w	r6, r3, r6
 8005ffa:	19a4      	addlt	r4, r4, r6
 8005ffc:	ea24 0407 	bic.w	r4, r4, r7
 8006000:	2500      	movs	r5, #0
 8006002:	e7e0      	b.n	8005fc6 <floor+0x46>
 8006004:	2e33      	cmp	r6, #51	; 0x33
 8006006:	dd0b      	ble.n	8006020 <floor+0xa0>
 8006008:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800600c:	d104      	bne.n	8006018 <floor+0x98>
 800600e:	ee10 2a10 	vmov	r2, s0
 8006012:	460b      	mov	r3, r1
 8006014:	f7fa f8e2 	bl	80001dc <__adddf3>
 8006018:	ec41 0b10 	vmov	d0, r0, r1
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006020:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006024:	f04f 33ff 	mov.w	r3, #4294967295
 8006028:	fa23 f707 	lsr.w	r7, r3, r7
 800602c:	4207      	tst	r7, r0
 800602e:	d0f3      	beq.n	8006018 <floor+0x98>
 8006030:	a30f      	add	r3, pc, #60	; (adr r3, 8006070 <floor+0xf0>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa f8d1 	bl	80001dc <__adddf3>
 800603a:	2200      	movs	r2, #0
 800603c:	2300      	movs	r3, #0
 800603e:	f7fa fd13 	bl	8000a68 <__aeabi_dcmpgt>
 8006042:	2800      	cmp	r0, #0
 8006044:	d0bf      	beq.n	8005fc6 <floor+0x46>
 8006046:	2c00      	cmp	r4, #0
 8006048:	da02      	bge.n	8006050 <floor+0xd0>
 800604a:	2e14      	cmp	r6, #20
 800604c:	d103      	bne.n	8006056 <floor+0xd6>
 800604e:	3401      	adds	r4, #1
 8006050:	ea25 0507 	bic.w	r5, r5, r7
 8006054:	e7b7      	b.n	8005fc6 <floor+0x46>
 8006056:	2301      	movs	r3, #1
 8006058:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800605c:	fa03 f606 	lsl.w	r6, r3, r6
 8006060:	4435      	add	r5, r6
 8006062:	4545      	cmp	r5, r8
 8006064:	bf38      	it	cc
 8006066:	18e4      	addcc	r4, r4, r3
 8006068:	e7f2      	b.n	8006050 <floor+0xd0>
 800606a:	2500      	movs	r5, #0
 800606c:	462c      	mov	r4, r5
 800606e:	e7aa      	b.n	8005fc6 <floor+0x46>
 8006070:	8800759c 	.word	0x8800759c
 8006074:	7e37e43c 	.word	0x7e37e43c
 8006078:	bff00000 	.word	0xbff00000
 800607c:	000fffff 	.word	0x000fffff

08006080 <scalbn>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	ec55 4b10 	vmov	r4, r5, d0
 8006086:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800608a:	4606      	mov	r6, r0
 800608c:	462b      	mov	r3, r5
 800608e:	b99a      	cbnz	r2, 80060b8 <scalbn+0x38>
 8006090:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006094:	4323      	orrs	r3, r4
 8006096:	d036      	beq.n	8006106 <scalbn+0x86>
 8006098:	4b39      	ldr	r3, [pc, #228]	; (8006180 <scalbn+0x100>)
 800609a:	4629      	mov	r1, r5
 800609c:	ee10 0a10 	vmov	r0, s0
 80060a0:	2200      	movs	r2, #0
 80060a2:	f7fa fa51 	bl	8000548 <__aeabi_dmul>
 80060a6:	4b37      	ldr	r3, [pc, #220]	; (8006184 <scalbn+0x104>)
 80060a8:	429e      	cmp	r6, r3
 80060aa:	4604      	mov	r4, r0
 80060ac:	460d      	mov	r5, r1
 80060ae:	da10      	bge.n	80060d2 <scalbn+0x52>
 80060b0:	a32b      	add	r3, pc, #172	; (adr r3, 8006160 <scalbn+0xe0>)
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	e03a      	b.n	800612e <scalbn+0xae>
 80060b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80060bc:	428a      	cmp	r2, r1
 80060be:	d10c      	bne.n	80060da <scalbn+0x5a>
 80060c0:	ee10 2a10 	vmov	r2, s0
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	f7fa f888 	bl	80001dc <__adddf3>
 80060cc:	4604      	mov	r4, r0
 80060ce:	460d      	mov	r5, r1
 80060d0:	e019      	b.n	8006106 <scalbn+0x86>
 80060d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80060d6:	460b      	mov	r3, r1
 80060d8:	3a36      	subs	r2, #54	; 0x36
 80060da:	4432      	add	r2, r6
 80060dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80060e0:	428a      	cmp	r2, r1
 80060e2:	dd08      	ble.n	80060f6 <scalbn+0x76>
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	a120      	add	r1, pc, #128	; (adr r1, 8006168 <scalbn+0xe8>)
 80060e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060ec:	da1c      	bge.n	8006128 <scalbn+0xa8>
 80060ee:	a120      	add	r1, pc, #128	; (adr r1, 8006170 <scalbn+0xf0>)
 80060f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060f4:	e018      	b.n	8006128 <scalbn+0xa8>
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	dd08      	ble.n	800610c <scalbn+0x8c>
 80060fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006102:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006106:	ec45 4b10 	vmov	d0, r4, r5
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006110:	da19      	bge.n	8006146 <scalbn+0xc6>
 8006112:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006116:	429e      	cmp	r6, r3
 8006118:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800611c:	dd0a      	ble.n	8006134 <scalbn+0xb4>
 800611e:	a112      	add	r1, pc, #72	; (adr r1, 8006168 <scalbn+0xe8>)
 8006120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1e2      	bne.n	80060ee <scalbn+0x6e>
 8006128:	a30f      	add	r3, pc, #60	; (adr r3, 8006168 <scalbn+0xe8>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa fa0b 	bl	8000548 <__aeabi_dmul>
 8006132:	e7cb      	b.n	80060cc <scalbn+0x4c>
 8006134:	a10a      	add	r1, pc, #40	; (adr r1, 8006160 <scalbn+0xe0>)
 8006136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0b8      	beq.n	80060b0 <scalbn+0x30>
 800613e:	a10e      	add	r1, pc, #56	; (adr r1, 8006178 <scalbn+0xf8>)
 8006140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006144:	e7b4      	b.n	80060b0 <scalbn+0x30>
 8006146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800614a:	3236      	adds	r2, #54	; 0x36
 800614c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006150:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006154:	4620      	mov	r0, r4
 8006156:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <scalbn+0x108>)
 8006158:	2200      	movs	r2, #0
 800615a:	e7e8      	b.n	800612e <scalbn+0xae>
 800615c:	f3af 8000 	nop.w
 8006160:	c2f8f359 	.word	0xc2f8f359
 8006164:	01a56e1f 	.word	0x01a56e1f
 8006168:	8800759c 	.word	0x8800759c
 800616c:	7e37e43c 	.word	0x7e37e43c
 8006170:	8800759c 	.word	0x8800759c
 8006174:	fe37e43c 	.word	0xfe37e43c
 8006178:	c2f8f359 	.word	0xc2f8f359
 800617c:	81a56e1f 	.word	0x81a56e1f
 8006180:	43500000 	.word	0x43500000
 8006184:	ffff3cb0 	.word	0xffff3cb0
 8006188:	3c900000 	.word	0x3c900000

0800618c <_init>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr

08006198 <_fini>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr
