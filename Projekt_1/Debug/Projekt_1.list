
Projekt_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a8  080043a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b0  080043b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  08004428  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004428  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b099  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001998  00000000  00000000  0002b139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022766  00000000  00000000  0002dd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b112  00000000  00000000  00050486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce1cd  00000000  00000000  0005b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129765  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da4  00000000  00000000  001297b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004258 	.word	0x08004258

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004258 	.word	0x08004258

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <led_set>:
		{ LED5_GPIO_Port, LED5_Pin },
		{ LED6_GPIO_Port, LED6_Pin },
};

void led_set(int led, bool turn_on)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	GPIO_PinState state = (turn_on) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	73fb      	strb	r3, [r7, #15]

	if (led >= 0 && led < 6) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	db0f      	blt.n	80005ca <led_set+0x36>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b05      	cmp	r3, #5
 80005ae:	dc0c      	bgt.n	80005ca <led_set+0x36>
		HAL_GPIO_WritePin(LED[led].port, LED[led].pin, state);
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <led_set+0x40>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80005b8:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <led_set+0x40>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	4413      	add	r3, r2
 80005c0:	889b      	ldrh	r3, [r3, #4]
 80005c2:	7bfa      	ldrb	r2, [r7, #15]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f000 fed9 	bl	800137c <HAL_GPIO_WritePin>
        }
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	08004298 	.word	0x08004298

080005d8 <__io_putchar>:
  default:
    return false;
  }
}
int __io_putchar(int ch)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b0a      	cmp	r3, #10
 80005e4:	d109      	bne.n	80005fa <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80005e6:	230d      	movs	r3, #13
 80005e8:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80005ea:	f107 010f 	add.w	r1, r7, #15
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	2201      	movs	r2, #1
 80005f4:	4807      	ldr	r0, [pc, #28]	; (8000614 <__io_putchar+0x3c>)
 80005f6:	f002 f8ff 	bl	80027f8 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005fa:	1d39      	adds	r1, r7, #4
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	2201      	movs	r2, #1
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <__io_putchar+0x3c>)
 8000604:	f002 f8f8 	bl	80027f8 <HAL_UART_Transmit>
    return 1;
 8000608:	2301      	movs	r3, #1
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000008c 	.word	0x2000008c

08000618 <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b0d      	cmp	r3, #13
 8000626:	d003      	beq.n	8000630 <line_append+0x18>
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b0a      	cmp	r3, #10
 800062c:	f040 80a5 	bne.w	800077a <line_append+0x162>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 8000630:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <line_append+0x18c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	f000 80b0 	beq.w	800079a <line_append+0x182>
			// dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 800063a:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <line_append+0x18c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a5a      	ldr	r2, [pc, #360]	; (80007a8 <line_append+0x190>)
 8000640:	2100      	movs	r1, #0
 8000642:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			if (strcmp(line_buffer, "linijka") == 0)
 8000644:	4959      	ldr	r1, [pc, #356]	; (80007ac <line_append+0x194>)
 8000646:	4858      	ldr	r0, [pc, #352]	; (80007a8 <line_append+0x190>)
 8000648:	f7ff fdc2 	bl	80001d0 <strcmp>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d14f      	bne.n	80006f2 <line_append+0xda>
			{
				 for(int i =0; i <6; i++)
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
 8000656:	e048      	b.n	80006ea <line_append+0xd2>
				                {
				                    HAL_GPIO_WritePin(LED[i].port, LED[i].pin, GPIO_PIN_SET);
 8000658:	4a55      	ldr	r2, [pc, #340]	; (80007b0 <line_append+0x198>)
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000660:	4a53      	ldr	r2, [pc, #332]	; (80007b0 <line_append+0x198>)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	00db      	lsls	r3, r3, #3
 8000666:	4413      	add	r3, r2
 8000668:	889b      	ldrh	r3, [r3, #4]
 800066a:	2201      	movs	r2, #1
 800066c:	4619      	mov	r1, r3
 800066e:	f000 fe85 	bl	800137c <HAL_GPIO_WritePin>
				                    HAL_Delay(250);
 8000672:	20fa      	movs	r0, #250	; 0xfa
 8000674:	f000 fbfe 	bl	8000e74 <HAL_Delay>
				                    HAL_GPIO_WritePin(LED[i].port, LED[i].pin, GPIO_PIN_RESET);
 8000678:	4a4d      	ldr	r2, [pc, #308]	; (80007b0 <line_append+0x198>)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000680:	4a4b      	ldr	r2, [pc, #300]	; (80007b0 <line_append+0x198>)
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	889b      	ldrh	r3, [r3, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	4619      	mov	r1, r3
 800068e:	f000 fe75 	bl	800137c <HAL_GPIO_WritePin>
				                    if(i == 5)
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b05      	cmp	r3, #5
 8000696:	d125      	bne.n	80006e4 <line_append+0xcc>
				                    {
				                        for(int a = 5; a > 0 ; a--)
 8000698:	2305      	movs	r3, #5
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	e01f      	b.n	80006de <line_append+0xc6>
				                        {
				                            HAL_GPIO_WritePin(LED[a].port, LED[a].pin, GPIO_PIN_SET);
 800069e:	4a44      	ldr	r2, [pc, #272]	; (80007b0 <line_append+0x198>)
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006a6:	4a42      	ldr	r2, [pc, #264]	; (80007b0 <line_append+0x198>)
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4413      	add	r3, r2
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	f000 fe62 	bl	800137c <HAL_GPIO_WritePin>
				                            HAL_Delay(250);
 80006b8:	20fa      	movs	r0, #250	; 0xfa
 80006ba:	f000 fbdb 	bl	8000e74 <HAL_Delay>
				                            HAL_GPIO_WritePin(LED[a].port, LED[a].pin, GPIO_PIN_RESET);
 80006be:	4a3c      	ldr	r2, [pc, #240]	; (80007b0 <line_append+0x198>)
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006c6:	4a3a      	ldr	r2, [pc, #232]	; (80007b0 <line_append+0x198>)
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4413      	add	r3, r2
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f000 fe52 	bl	800137c <HAL_GPIO_WritePin>
				                        for(int a = 5; a > 0 ; a--)
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	3b01      	subs	r3, #1
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dcdc      	bgt.n	800069e <line_append+0x86>
				 for(int i =0; i <6; i++)
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	3301      	adds	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	2b05      	cmp	r3, #5
 80006ee:	ddb3      	ble.n	8000658 <line_append+0x40>
 80006f0:	e03f      	b.n	8000772 <line_append+0x15a>
				                        }
				                    }
				                }

			}
			else if (strcmp(line_buffer, "off") == 0)
 80006f2:	4930      	ldr	r1, [pc, #192]	; (80007b4 <line_append+0x19c>)
 80006f4:	482c      	ldr	r0, [pc, #176]	; (80007a8 <line_append+0x190>)
 80006f6:	f7ff fd6b 	bl	80001d0 <strcmp>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d116      	bne.n	800072e <line_append+0x116>
			{
				for(int i =0; i <6; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e00f      	b.n	8000726 <line_append+0x10e>
				                {
				                    HAL_GPIO_WritePin(LED[i].port, LED[i].pin, GPIO_PIN_RESET);
 8000706:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <line_append+0x198>)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800070e:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <line_append+0x198>)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	4413      	add	r3, r2
 8000716:	889b      	ldrh	r3, [r3, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	4619      	mov	r1, r3
 800071c:	f000 fe2e 	bl	800137c <HAL_GPIO_WritePin>
				for(int i =0; i <6; i++)
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	3301      	adds	r3, #1
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2b05      	cmp	r3, #5
 800072a:	ddec      	ble.n	8000706 <line_append+0xee>
 800072c:	e021      	b.n	8000772 <line_append+0x15a>
				                }
			}
			else if(strcmp(line_buffer, "on") == 0)
 800072e:	4922      	ldr	r1, [pc, #136]	; (80007b8 <line_append+0x1a0>)
 8000730:	481d      	ldr	r0, [pc, #116]	; (80007a8 <line_append+0x190>)
 8000732:	f7ff fd4d 	bl	80001d0 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d116      	bne.n	800076a <line_append+0x152>
			{
				for(int i =0; i <6; i++)
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	e00f      	b.n	8000762 <line_append+0x14a>
				                {
				                    HAL_GPIO_WritePin(LED[i].port, LED[i].pin, GPIO_PIN_SET);
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <line_append+0x198>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <line_append+0x198>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	4413      	add	r3, r2
 8000752:	889b      	ldrh	r3, [r3, #4]
 8000754:	2201      	movs	r2, #1
 8000756:	4619      	mov	r1, r3
 8000758:	f000 fe10 	bl	800137c <HAL_GPIO_WritePin>
				for(int i =0; i <6; i++)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3301      	adds	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b05      	cmp	r3, #5
 8000766:	ddec      	ble.n	8000742 <line_append+0x12a>
 8000768:	e003      	b.n	8000772 <line_append+0x15a>
				                }
			}
			else
			{
				printf("Nieznane polecenie: %s\n", line_buffer);
 800076a:	490f      	ldr	r1, [pc, #60]	; (80007a8 <line_append+0x190>)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <line_append+0x1a4>)
 800076e:	f002 fde5 	bl	800333c <iprintf>
			}
			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <line_append+0x18c>)
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 8000778:	e00f      	b.n	800079a <line_append+0x182>
		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <line_append+0x18c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b4f      	cmp	r3, #79	; 0x4f
 8000780:	d902      	bls.n	8000788 <line_append+0x170>
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <line_append+0x18c>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <line_append+0x18c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	4905      	ldr	r1, [pc, #20]	; (80007a4 <line_append+0x18c>)
 8000790:	600a      	str	r2, [r1, #0]
 8000792:	4905      	ldr	r1, [pc, #20]	; (80007a8 <line_append+0x190>)
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	54ca      	strb	r2, [r1, r3]
	}
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000164 	.word	0x20000164
 80007a8:	20000110 	.word	0x20000110
 80007ac:	08004270 	.word	0x08004270
 80007b0:	08004298 	.word	0x08004298
 80007b4:	08004278 	.word	0x08004278
 80007b8:	0800427c 	.word	0x0800427c
 80007bc:	08004280 	.word	0x08004280

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fad9 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f81b 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 f89b 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 f869 	bl	80008a8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int led = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  led_set(led, true);
 80007da:	2101      	movs	r1, #1
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff fed9 	bl	8000594 <led_set>
	  		while (is_button_pressed(1)) {}
	  		 HAL_Delay(20);
	  		 */
	  	  uint8_t value;

	 	  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK)
 80007e2:	1cf9      	adds	r1, r7, #3
 80007e4:	2300      	movs	r3, #0
 80007e6:	2201      	movs	r2, #1
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <main+0x40>)
 80007ea:	f002 f899 	bl	8002920 <HAL_UART_Receive>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f6      	bne.n	80007e2 <main+0x22>
	 		  line_append(value);
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff0e 	bl	8000618 <line_append>
  {
 80007fc:	e7f1      	b.n	80007e2 <main+0x22>
 80007fe:	bf00      	nop
 8000800:	2000008c 	.word	0x2000008c

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b096      	sub	sp, #88	; 0x58
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2244      	movs	r2, #68	; 0x44
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fd8a 	bl	800332c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	463b      	mov	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000826:	f44f 7000 	mov.w	r0, #512	; 0x200
 800082a:	f000 fdcd 	bl	80013c8 <HAL_PWREx_ControlVoltageScaling>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000834:	f000 f914 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000842:	2310      	movs	r3, #16
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084a:	2302      	movs	r3, #2
 800084c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800084e:	2301      	movs	r3, #1
 8000850:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000852:	230a      	movs	r3, #10
 8000854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000856:	2307      	movs	r3, #7
 8000858:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fe04 	bl	8001474 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000872:	f000 f8f5 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2303      	movs	r3, #3
 800087c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2104      	movs	r1, #4
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fa04 	bl	8001c9c <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800089a:	f000 f8e1 	bl	8000a60 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3758      	adds	r7, #88	; 0x58
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART2_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ec:	f001 ff36 	bl	800275c <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f8b3 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000008c 	.word	0x2000008c
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a4c      	ldr	r2, [pc, #304]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a46      	ldr	r2, [pc, #280]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, XYZ_Pin|SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin
 800097e:	2200      	movs	r2, #0
 8000980:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8000984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000988:	f000 fcf8 	bl	800137c <HAL_GPIO_WritePin>
                          |LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD4_Pin|LED5_Pin|LED4_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5106 	mov.w	r1, #8576	; 0x2180
 8000992:	4831      	ldr	r0, [pc, #196]	; (8000a58 <MX_GPIO_Init+0x150>)
 8000994:	f000 fcf2 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7150 	mov.w	r1, #832	; 0x340
 800099e:	482f      	ldr	r0, [pc, #188]	; (8000a5c <MX_GPIO_Init+0x154>)
 80009a0:	f000 fcec 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4828      	ldr	r0, [pc, #160]	; (8000a5c <MX_GPIO_Init+0x154>)
 80009ba:	f000 fb65 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : XYZ_Pin SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin
                           LED6_Pin */
  GPIO_InitStruct.Pin = XYZ_Pin|SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin
 80009be:	f240 43b1 	movw	r3, #1201	; 0x4b1
 80009c2:	617b      	str	r3, [r7, #20]
                          |LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f000 fb55 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f4:	f000 fb48 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LED5_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LED5_Pin|LED4_Pin;
 80009f8:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4811      	ldr	r0, [pc, #68]	; (8000a58 <MX_GPIO_Init+0x150>)
 8000a12:	f000 fb39 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000a16:	f44f 7350 	mov.w	r3, #832	; 0x340
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <MX_GPIO_Init+0x154>)
 8000a30:	f000 fb2a 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button2_Pin */
  GPIO_InitStruct.Pin = User_Button2_Pin;
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button2_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0x154>)
 8000a48:	f000 fb1e 	bl	8001088 <HAL_GPIO_Init>

}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	48000400 	.word	0x48000400
 8000a5c:	48000800 	.word	0x48000800

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6593      	str	r3, [r2, #88]	; 0x58
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x44>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0a2      	sub	sp, #136	; 0x88
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2260      	movs	r2, #96	; 0x60
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 fc29 	bl	800332c <memset>
  if(huart->Instance==USART2)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a20      	ldr	r2, [pc, #128]	; (8000b60 <HAL_UART_MspInit+0xac>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d138      	bne.n	8000b56 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 faf7 	bl	80020e4 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000afc:	f7ff ffb0 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0xb0>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_UART_MspInit+0xb0>)
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_UART_MspInit+0xb0>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_UART_MspInit+0xb0>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <HAL_UART_MspInit+0xb0>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_UART_MspInit+0xb0>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b30:	230c      	movs	r3, #12
 8000b32:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b42:	2307      	movs	r3, #7
 8000b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b52:	f000 fa99 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3788      	adds	r7, #136	; 0x88
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40004400 	.word	0x40004400
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f93e 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	e00a      	b.n	8000be4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bce:	f3af 8000 	nop.w
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	b2ca      	uxtb	r2, r1
 8000bdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dbf0      	blt.n	8000bce <_read+0x12>
  }

  return len;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e009      	b.n	8000c1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fce1 	bl	80005d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf1      	blt.n	8000c08 <_write+0x12>
  }
  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_close>:

int _close(int file)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c56:	605a      	str	r2, [r3, #4]
  return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_isatty>:

int _isatty(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f002 fb06 	bl	80032d8 <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20010000 	.word	0x20010000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	20000168 	.word	0x20000168
 8000d00:	20000180 	.word	0x20000180

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff ffea 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	; (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	; (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 fac5 	bl	80032e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5a:	f7ff fd31 	bl	80007c0 <main>

08000d5e <LoopForever>:

LoopForever:
    b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d6c:	080043b8 	.word	0x080043b8
  ldr r2, =_sbss
 8000d70:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d74:	20000180 	.word	0x20000180

08000d78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_Init+0x3c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_Init+0x3c>)
 8000d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d92:	2003      	movs	r0, #3
 8000d94:	f000 f944 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 f80f 	bl	8000dbc <HAL_InitTick>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	e001      	b.n	8000dae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000daa:	f7ff fe5f 	bl	8000a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40022000 	.word	0x40022000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dc8:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_InitTick+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d023      	beq.n	8000e18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_InitTick+0x70>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_InitTick+0x6c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f941 	bl	800106e <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10f      	bne.n	8000e12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d809      	bhi.n	8000e0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f919 	bl	8001036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_InitTick+0x74>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e004      	b.n	8000e1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e001      	b.n	8000e1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	2000016c 	.word	0x2000016c

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000016c 	.word	0x2000016c

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff47 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff5c 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffb0 	bl	8000fdc <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001096:	e154      	b.n	8001342 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8146 	beq.w	800133c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d005      	beq.n	80010c8 <HAL_GPIO_Init+0x40>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d130      	bne.n	800112a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f003 0201 	and.w	r2, r3, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b03      	cmp	r3, #3
 8001134:	d017      	beq.n	8001166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	6939      	ldr	r1, [r7, #16]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80a0 	beq.w	800133c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b58      	ldr	r3, [pc, #352]	; (8001360 <HAL_GPIO_Init+0x2d8>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	4a57      	ldr	r2, [pc, #348]	; (8001360 <HAL_GPIO_Init+0x2d8>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6613      	str	r3, [r2, #96]	; 0x60
 8001208:	4b55      	ldr	r3, [pc, #340]	; (8001360 <HAL_GPIO_Init+0x2d8>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001214:	4a53      	ldr	r2, [pc, #332]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123e:	d019      	beq.n	8001274 <HAL_GPIO_Init+0x1ec>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a49      	ldr	r2, [pc, #292]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d013      	beq.n	8001270 <HAL_GPIO_Init+0x1e8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a48      	ldr	r2, [pc, #288]	; (800136c <HAL_GPIO_Init+0x2e4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d00d      	beq.n	800126c <HAL_GPIO_Init+0x1e4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a47      	ldr	r2, [pc, #284]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d007      	beq.n	8001268 <HAL_GPIO_Init+0x1e0>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_GPIO_Init+0x2ec>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d101      	bne.n	8001264 <HAL_GPIO_Init+0x1dc>
 8001260:	2304      	movs	r3, #4
 8001262:	e008      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001264:	2307      	movs	r3, #7
 8001266:	e006      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001268:	2303      	movs	r3, #3
 800126a:	e004      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 800126c:	2302      	movs	r3, #2
 800126e:	e002      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <HAL_GPIO_Init+0x1ee>
 8001274:	2300      	movs	r3, #0
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	f002 0203 	and.w	r2, r2, #3
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	4093      	lsls	r3, r2
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001286:	4937      	ldr	r1, [pc, #220]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	43db      	mvns	r3, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4013      	ands	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b8:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012be:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012e2:	4a25      	ldr	r2, [pc, #148]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800130c:	4a1a      	ldr	r2, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3301      	adds	r3, #1
 8001340:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa22 f303 	lsr.w	r3, r2, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	f47f aea3 	bne.w	8001098 <HAL_GPIO_Init+0x10>
  }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	371c      	adds	r7, #28
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000
 8001368:	48000400 	.word	0x48000400
 800136c:	48000800 	.word	0x48000800
 8001370:	48000c00 	.word	0x48000c00
 8001374:	48001000 	.word	0x48001000
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40007000 	.word	0x40007000

080013c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013d6:	d130      	bne.n	800143a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e4:	d038      	beq.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2232      	movs	r2, #50	; 0x32
 80013fc:	fb02 f303 	mul.w	r3, r2, r3
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9b      	lsrs	r3, r3, #18
 8001408:	3301      	adds	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800140c:	e002      	b.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3b01      	subs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001420:	d102      	bne.n	8001428 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f2      	bne.n	800140e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001434:	d110      	bne.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e00f      	b.n	800145a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001446:	d007      	beq.n	8001458 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001456:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40007000 	.word	0x40007000
 800146c:	20000000 	.word	0x20000000
 8001470:	431bde83 	.word	0x431bde83

08001474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	f000 bc02 	b.w	8001c8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001488:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001492:	4b94      	ldr	r3, [pc, #592]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80e4 	beq.w	8001672 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4c>
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	f040 808b 	bne.w	80015ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	f040 8087 	bne.w	80015ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c0:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x64>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e3d9      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1a      	ldr	r2, [r3, #32]
 80014dc:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <HAL_RCC_OscConfig+0x7e>
 80014e8:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014f0:	e005      	b.n	80014fe <HAL_RCC_OscConfig+0x8a>
 80014f2:	4b7c      	ldr	r3, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80014f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014fe:	4293      	cmp	r3, r2
 8001500:	d223      	bcs.n	800154a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fd8c 	bl	8002024 <RCC_SetFlashLatencyFromMSIRange>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e3ba      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001516:	4b73      	ldr	r3, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a72      	ldr	r2, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b70      	ldr	r3, [pc, #448]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	496d      	ldr	r1, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001534:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	4968      	ldr	r1, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e025      	b.n	8001596 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154a:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a65      	ldr	r2, [pc, #404]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4960      	ldr	r1, [pc, #384]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001568:	4b5e      	ldr	r3, [pc, #376]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	495b      	ldr	r1, [pc, #364]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d109      	bne.n	8001596 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fd4c 	bl	8002024 <RCC_SetFlashLatencyFromMSIRange>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e37a      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001596:	f000 fc81 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 800159a:	4602      	mov	r2, r0
 800159c:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	4950      	ldr	r1, [pc, #320]	; (80016e8 <HAL_RCC_OscConfig+0x274>)
 80015a8:	5ccb      	ldrb	r3, [r1, r3]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	fa22 f303 	lsr.w	r3, r2, r3
 80015b2:	4a4e      	ldr	r2, [pc, #312]	; (80016ec <HAL_RCC_OscConfig+0x278>)
 80015b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015b6:	4b4e      	ldr	r3, [pc, #312]	; (80016f0 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fbfe 	bl	8000dbc <HAL_InitTick>
 80015c0:	4603      	mov	r3, r0
 80015c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d052      	beq.n	8001670 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	e35e      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d032      	beq.n	800163c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a42      	ldr	r2, [pc, #264]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fc3b 	bl	8000e5c <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ea:	f7ff fc37 	bl	8000e5c <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e347      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001608:	4b36      	ldr	r3, [pc, #216]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a35      	ldr	r2, [pc, #212]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4930      	ldr	r1, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	492b      	ldr	r1, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
 800163a:	e01a      	b.n	8001672 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001648:	f7ff fc08 	bl	8000e5c <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001650:	f7ff fc04 	bl	8000e5c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e314      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1dc>
 800166e:	e000      	b.n	8001672 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001670:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d073      	beq.n	8001766 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d005      	beq.n	8001690 <HAL_RCC_OscConfig+0x21c>
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d10e      	bne.n	80016a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b03      	cmp	r3, #3
 800168e:	d10b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d063      	beq.n	8001764 <HAL_RCC_OscConfig+0x2f0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d15f      	bne.n	8001764 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e2f1      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x24c>
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e025      	b.n	800170c <HAL_RCC_OscConfig+0x298>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c8:	d114      	bne.n	80016f4 <HAL_RCC_OscConfig+0x280>
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a02      	ldr	r2, [pc, #8]	; (80016e4 <HAL_RCC_OscConfig+0x270>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e013      	b.n	800170c <HAL_RCC_OscConfig+0x298>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	080042c8 	.word	0x080042c8
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000004 	.word	0x20000004
 80016f4:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a9f      	ldr	r2, [pc, #636]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b9d      	ldr	r3, [pc, #628]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a9c      	ldr	r2, [pc, #624]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fba2 	bl	8000e5c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fb9e 	bl	8000e5c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e2ae      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172e:	4b92      	ldr	r3, [pc, #584]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x2a8>
 800173a:	e014      	b.n	8001766 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fb8e 	bl	8000e5c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fb8a 	bl	8000e5c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e29a      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001756:	4b88      	ldr	r3, [pc, #544]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x2d0>
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d060      	beq.n	8001834 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d005      	beq.n	8001784 <HAL_RCC_OscConfig+0x310>
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d119      	bne.n	80017b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d116      	bne.n	80017b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001784:	4b7c      	ldr	r3, [pc, #496]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x328>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e277      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179c:	4b76      	ldr	r3, [pc, #472]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	4973      	ldr	r1, [pc, #460]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b0:	e040      	b.n	8001834 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d023      	beq.n	8001802 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ba:	4b6f      	ldr	r3, [pc, #444]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a6e      	ldr	r2, [pc, #440]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb49 	bl	8000e5c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fb45 	bl	8000e5c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e255      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e0:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b62      	ldr	r3, [pc, #392]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	495f      	ldr	r1, [pc, #380]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	e018      	b.n	8001834 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a5c      	ldr	r2, [pc, #368]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7ff fb25 	bl	8000e5c <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fb21 	bl	8000e5c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e231      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03c      	beq.n	80018ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01c      	beq.n	8001882 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 800184a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184e:	4a4a      	ldr	r2, [pc, #296]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fb00 	bl	8000e5c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001860:	f7ff fafc 	bl	8000e5c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e20c      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001872:	4b41      	ldr	r3, [pc, #260]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0ef      	beq.n	8001860 <HAL_RCC_OscConfig+0x3ec>
 8001880:	e01b      	b.n	80018ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001888:	4a3b      	ldr	r2, [pc, #236]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fae3 	bl	8000e5c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189a:	f7ff fadf 	bl	8000e5c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1ef      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80018ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ef      	bne.n	800189a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80a6 	beq.w	8001a14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018cc:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80018ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10d      	bne.n	80018f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f0:	2301      	movs	r3, #1
 80018f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_RCC_OscConfig+0x508>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d118      	bne.n	8001932 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <HAL_RCC_OscConfig+0x508>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_RCC_OscConfig+0x508>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190c:	f7ff faa6 	bl	8000e5c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001914:	f7ff faa2 	bl	8000e5c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1b2      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_RCC_OscConfig+0x508>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <HAL_RCC_OscConfig+0x4d8>
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800194a:	e029      	b.n	80019a0 <HAL_RCC_OscConfig+0x52c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d115      	bne.n	8001980 <HAL_RCC_OscConfig+0x50c>
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800196a:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_RCC_OscConfig+0x504>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001974:	e014      	b.n	80019a0 <HAL_RCC_OscConfig+0x52c>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	40007000 	.word	0x40007000
 8001980:	4b9a      	ldr	r3, [pc, #616]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001986:	4a99      	ldr	r2, [pc, #612]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001990:	4b96      	ldr	r3, [pc, #600]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001996:	4a95      	ldr	r2, [pc, #596]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001998:	f023 0304 	bic.w	r3, r3, #4
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d016      	beq.n	80019d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff fa58 	bl	8000e5c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7ff fa54 	bl	8000e5c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e162      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c6:	4b89      	ldr	r3, [pc, #548]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 80019c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ed      	beq.n	80019b0 <HAL_RCC_OscConfig+0x53c>
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff fa41 	bl	8000e5c <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff fa3d 	bl	8000e5c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e14b      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f4:	4b7d      	ldr	r3, [pc, #500]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 80019f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ed      	bne.n	80019de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a02:	7ffb      	ldrb	r3, [r7, #31]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	4a77      	ldr	r2, [pc, #476]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d03c      	beq.n	8001a9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a28:	4b70      	ldr	r3, [pc, #448]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001a2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a2e:	4a6f      	ldr	r2, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff fa10 	bl	8000e5c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a40:	f7ff fa0c 	bl	8000e5c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e11c      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a52:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ef      	beq.n	8001a40 <HAL_RCC_OscConfig+0x5cc>
 8001a60:	e01b      	b.n	8001a9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a68:	4a60      	ldr	r2, [pc, #384]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f9f3 	bl	8000e5c <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a7a:	f7ff f9ef 	bl	8000e5c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0ff      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a8c:	4b57      	ldr	r3, [pc, #348]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ef      	bne.n	8001a7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80f3 	beq.w	8001c8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	f040 80c9 	bne.w	8001c40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aae:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f003 0203 	and.w	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d12c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	3b01      	subs	r3, #1
 8001ace:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d123      	bne.n	8001b1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ade:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d11b      	bne.n	8001b1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d113      	bne.n	8001b1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afe:	085b      	lsrs	r3, r3, #1
 8001b00:	3b01      	subs	r3, #1
 8001b02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d109      	bne.n	8001b1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d06b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d062      	beq.n	8001be8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b22:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0ac      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b3e:	f7ff f98d 	bl	8000e5c <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff f989 	bl	8000e5c <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e099      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_RCC_OscConfig+0x77c>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b74:	3a01      	subs	r2, #1
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	4311      	orrs	r1, r2
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b7e:	0212      	lsls	r2, r2, #8
 8001b80:	4311      	orrs	r1, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b86:	0852      	lsrs	r2, r2, #1
 8001b88:	3a01      	subs	r2, #1
 8001b8a:	0552      	lsls	r2, r2, #21
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b92:	0852      	lsrs	r2, r2, #1
 8001b94:	3a01      	subs	r2, #1
 8001b96:	0652      	lsls	r2, r2, #25
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b9e:	06d2      	lsls	r2, r2, #27
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	4912      	ldr	r1, [pc, #72]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc0:	f7ff f94c 	bl	8000e5c <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f948 	bl	8000e5c <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e058      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <HAL_RCC_OscConfig+0x778>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be6:	e050      	b.n	8001c8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e04f      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d144      	bne.n	8001c8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c18:	f7ff f920 	bl	8000e5c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f91c 	bl	8000e5c <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e02c      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x7ac>
 8001c3e:	e024      	b.n	8001c8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d01f      	beq.n	8001c86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff f903 	bl	8000e5c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff f8ff 	bl	8000e5c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e00f      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4905      	ldr	r1, [pc, #20]	; (8001c94 <HAL_RCC_OscConfig+0x820>)
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x824>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
 8001c84:	e001      	b.n	8001c8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	feeefffc 	.word	0xfeeefffc

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0e7      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d910      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 0207 	bic.w	r2, r3, #7
 8001cc6:	4970      	ldr	r1, [pc, #448]	; (8001e88 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b6e      	ldr	r3, [pc, #440]	; (8001e88 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0cf      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d010      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d908      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4960      	ldr	r1, [pc, #384]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d04c      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d121      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e0a6      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d3a:	4b54      	ldr	r3, [pc, #336]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e09a      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d52:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e08e      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d62:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e086      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d72:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 0203 	bic.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4943      	ldr	r1, [pc, #268]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d84:	f7ff f86a 	bl	8000e5c <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7ff f866 	bl	8000e5c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e06e      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 020c 	and.w	r2, r3, #12
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1eb      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d208      	bcs.n	8001de2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	492b      	ldr	r1, [pc, #172]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_RCC_ClockConfig+0x1ec>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d210      	bcs.n	8001e12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <HAL_RCC_ClockConfig+0x1ec>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 0207 	bic.w	r2, r3, #7
 8001df8:	4923      	ldr	r1, [pc, #140]	; (8001e88 <HAL_RCC_ClockConfig+0x1ec>)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_RCC_ClockConfig+0x1ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d001      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e036      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4918      	ldr	r1, [pc, #96]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4910      	ldr	r1, [pc, #64]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e50:	f000 f824 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	490b      	ldr	r1, [pc, #44]	; (8001e90 <HAL_RCC_ClockConfig+0x1f4>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x1fc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe ffa1 	bl	8000dbc <HAL_InitTick>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	080042c8 	.word	0x080042c8
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b0c      	cmp	r3, #12
 8001ec8:	d121      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d11e      	bne.n	8001f0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ed0:	4b34      	ldr	r3, [pc, #208]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001edc:	4b31      	ldr	r3, [pc, #196]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e005      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10d      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d102      	bne.n	8001f1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_GetSysClockFreq+0x110>)
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	e004      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	2b0c      	cmp	r3, #12
 8001f28:	d134      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d003      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0xac>
 8001f40:	e005      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_RCC_GetSysClockFreq+0x110>)
 8001f44:	617b      	str	r3, [r7, #20]
      break;
 8001f46:	e005      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f4a:	617b      	str	r3, [r7, #20]
      break;
 8001f4c:	e002      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	617b      	str	r3, [r7, #20]
      break;
 8001f52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	3301      	adds	r3, #1
 8001f60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f62:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	fb03 f202 	mul.w	r2, r3, r2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	0e5b      	lsrs	r3, r3, #25
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	3301      	adds	r3, #1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f94:	69bb      	ldr	r3, [r7, #24]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	080042e0 	.word	0x080042e0
 8001fac:	00f42400 	.word	0x00f42400
 8001fb0:	007a1200 	.word	0x007a1200

08001fb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000000 	.word	0x20000000

08001fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0a1b      	lsrs	r3, r3, #8
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4904      	ldr	r1, [pc, #16]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	080042d8 	.word	0x080042d8

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ffc:	f7ff ffda 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0adb      	lsrs	r3, r3, #11
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4904      	ldr	r1, [pc, #16]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	080042d8 	.word	0x080042d8

08002024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800203c:	f7ff f9b6 	bl	80013ac <HAL_PWREx_GetVoltageRange>
 8002040:	6178      	str	r0, [r7, #20]
 8002042:	e014      	b.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	4a24      	ldr	r2, [pc, #144]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	; 0x58
 8002050:	4b22      	ldr	r3, [pc, #136]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800205c:	f7ff f9a6 	bl	80013ac <HAL_PWREx_GetVoltageRange>
 8002060:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002074:	d10b      	bne.n	800208e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	d919      	bls.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2ba0      	cmp	r3, #160	; 0xa0
 8002080:	d902      	bls.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002082:	2302      	movs	r3, #2
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e013      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	e010      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b80      	cmp	r3, #128	; 0x80
 8002092:	d902      	bls.n	800209a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002094:	2303      	movs	r3, #3
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	e00a      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b80      	cmp	r3, #128	; 0x80
 800209e:	d102      	bne.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020a0:	2302      	movs	r3, #2
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	e004      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b70      	cmp	r3, #112	; 0x70
 80020aa:	d101      	bne.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ac:	2301      	movs	r3, #1
 80020ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f023 0207 	bic.w	r2, r3, #7
 80020b8:	4909      	ldr	r1, [pc, #36]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d001      	beq.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020ec:	2300      	movs	r3, #0
 80020ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020f0:	2300      	movs	r3, #0
 80020f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d031      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002104:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002108:	d01a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800210a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800210e:	d814      	bhi.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002110:	2b00      	cmp	r3, #0
 8002112:	d009      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002118:	d10f      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800211a:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a5c      	ldr	r2, [pc, #368]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002126:	e00c      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fa22 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002138:	e003      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	74fb      	strb	r3, [r7, #19]
      break;
 800213e:	e000      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002148:	4b51      	ldr	r3, [pc, #324]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	494e      	ldr	r1, [pc, #312]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800215e:	e001      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 809e 	beq.w	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00d      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b40      	ldr	r3, [pc, #256]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6593      	str	r3, [r2, #88]	; 0x58
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a4:	2301      	movs	r3, #1
 80021a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a39      	ldr	r2, [pc, #228]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fe52 	bl	8000e5c <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ba:	e009      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe fe4e 	bl	8000e5c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d902      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	74fb      	strb	r3, [r7, #19]
        break;
 80021ce:	e005      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ef      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d15a      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01e      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d019      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002208:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800222a:	4a19      	ldr	r2, [pc, #100]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d016      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223c:	f7fe fe0e 	bl	8000e5c <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002242:	e00b      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe fe0a 	bl	8000e5c <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d902      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	74fb      	strb	r3, [r7, #19]
            break;
 800225a:	e006      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0ec      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10b      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227e:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002286:	e009      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
 800228c:	e006      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229c:	7c7b      	ldrb	r3, [r7, #17]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b8d      	ldr	r3, [pc, #564]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a8c      	ldr	r2, [pc, #560]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ba:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f023 0203 	bic.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4983      	ldr	r1, [pc, #524]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022dc:	4b7e      	ldr	r3, [pc, #504]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f023 020c 	bic.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	497b      	ldr	r1, [pc, #492]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fe:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	4972      	ldr	r1, [pc, #456]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002320:	4b6d      	ldr	r3, [pc, #436]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	496a      	ldr	r1, [pc, #424]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	4961      	ldr	r1, [pc, #388]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002364:	4b5c      	ldr	r3, [pc, #368]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4959      	ldr	r1, [pc, #356]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002386:	4b54      	ldr	r3, [pc, #336]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4950      	ldr	r1, [pc, #320]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a8:	4b4b      	ldr	r3, [pc, #300]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b6:	4948      	ldr	r1, [pc, #288]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ca:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	493f      	ldr	r1, [pc, #252]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d028      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023ec:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fa:	4937      	ldr	r1, [pc, #220]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800240a:	d106      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a31      	ldr	r2, [pc, #196]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
 8002418:	e011      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002422:	d10c      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f8a4 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d028      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800244a:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	491f      	ldr	r1, [pc, #124]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002468:	d106      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002474:	60d3      	str	r3, [r2, #12]
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f875 	bl	8002578 <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02b      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024b6:	4908      	ldr	r1, [pc, #32]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024c6:	d109      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
 80024d4:	e014      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f843 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01c      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	4916      	ldr	r1, [pc, #88]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800252a:	d10c      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	2102      	movs	r1, #2
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f820 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002568:	7cbb      	ldrb	r3, [r7, #18]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002586:	4b74      	ldr	r3, [pc, #464]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002592:	4b71      	ldr	r3, [pc, #452]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10d      	bne.n	80025be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
       ||
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025aa:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d047      	beq.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e044      	b.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d018      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0x86>
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d825      	bhi.n	800261c <RCCEx_PLLSAI1_Config+0xa4>
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d002      	beq.n	80025da <RCCEx_PLLSAI1_Config+0x62>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d009      	beq.n	80025ec <RCCEx_PLLSAI1_Config+0x74>
 80025d8:	e020      	b.n	800261c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025da:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11d      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e01a      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ec:	4b5a      	ldr	r3, [pc, #360]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e013      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fe:	4b56      	ldr	r3, [pc, #344]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800261a:	e006      	b.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e004      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262a:	bf00      	nop
    }

    if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	430b      	orrs	r3, r1
 8002648:	4943      	ldr	r1, [pc, #268]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d17c      	bne.n	800274e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002654:	4b40      	ldr	r3, [pc, #256]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800265e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe fbfc 	bl	8000e5c <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002666:	e009      	b.n	800267c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002668:	f7fe fbf8 	bl	8000e5c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	73fb      	strb	r3, [r7, #15]
        break;
 800267a:	e005      	b.n	8002688 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ef      	bne.n	8002668 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d15f      	bne.n	800274e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d110      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	06d2      	lsls	r2, r2, #27
 80026ac:	430a      	orrs	r2, r1
 80026ae:	492a      	ldr	r1, [pc, #168]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	610b      	str	r3, [r1, #16]
 80026b4:	e027      	b.n	8002706 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d112      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026bc:	4b26      	ldr	r3, [pc, #152]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6912      	ldr	r2, [r2, #16]
 80026d2:	0852      	lsrs	r2, r2, #1
 80026d4:	3a01      	subs	r2, #1
 80026d6:	0552      	lsls	r2, r2, #21
 80026d8:	430a      	orrs	r2, r1
 80026da:	491f      	ldr	r1, [pc, #124]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	610b      	str	r3, [r1, #16]
 80026e0:	e011      	b.n	8002706 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	0211      	lsls	r1, r2, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6952      	ldr	r2, [r2, #20]
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	3a01      	subs	r2, #1
 80026fc:	0652      	lsls	r2, r2, #25
 80026fe:	430a      	orrs	r2, r1
 8002700:	4915      	ldr	r1, [pc, #84]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a13      	ldr	r2, [pc, #76]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002710:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fba3 	bl	8000e5c <HAL_GetTick>
 8002716:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002718:	e009      	b.n	800272e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800271a:	f7fe fb9f 	bl	8000e5c <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d902      	bls.n	800272e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	73fb      	strb	r3, [r7, #15]
          break;
 800272c:	e005      	b.n	800273a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ef      	beq.n	800271a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4903      	ldr	r1, [pc, #12]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e040      	b.n	80027f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe f998 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f992 	bl	8002ac4 <UART_SetConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e022      	b.n	80027f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fbe0 	bl	8002f78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fc67 	bl	80030bc <UART_CheckIdleState>
 80027ee:	4603      	mov	r3, r0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280c:	2b20      	cmp	r3, #32
 800280e:	f040 8082 	bne.w	8002916 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_UART_Transmit+0x26>
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e07a      	b.n	8002918 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_UART_Transmit+0x38>
 800282c:	2302      	movs	r3, #2
 800282e:	e073      	b.n	8002918 <HAL_UART_Transmit+0x120>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2221      	movs	r2, #33	; 0x21
 8002844:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002846:	f7fe fb09 	bl	8000e5c <HAL_GetTick>
 800284a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002864:	d108      	bne.n	8002878 <HAL_UART_Transmit+0x80>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d104      	bne.n	8002878 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	e003      	b.n	8002880 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002888:	e02d      	b.n	80028e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fc5a 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e039      	b.n	8002918 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028b6:	b292      	uxth	r2, r2
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	3302      	adds	r3, #2
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	e008      	b.n	80028d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b292      	uxth	r2, r2
 80028cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1cb      	bne.n	800288a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2140      	movs	r1, #64	; 0x40
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fc26 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e005      	b.n	8002918 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	; 0x28
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	603b      	str	r3, [r7, #0]
 800292c:	4613      	mov	r3, r2
 800292e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002934:	2b20      	cmp	r3, #32
 8002936:	f040 80bf 	bne.w	8002ab8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <HAL_UART_Receive+0x26>
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0b7      	b.n	8002aba <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_UART_Receive+0x38>
 8002954:	2302      	movs	r3, #2
 8002956:	e0b0      	b.n	8002aba <HAL_UART_Receive+0x19a>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2222      	movs	r2, #34	; 0x22
 800296c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002974:	f7fe fa72 	bl	8000e5c <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002992:	d10e      	bne.n	80029b2 <HAL_UART_Receive+0x92>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_UART_Receive+0x88>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80029a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029a6:	e02d      	b.n	8002a04 <HAL_UART_Receive+0xe4>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	22ff      	movs	r2, #255	; 0xff
 80029ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029b0:	e028      	b.n	8002a04 <HAL_UART_Receive+0xe4>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <HAL_UART_Receive+0xb6>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d104      	bne.n	80029cc <HAL_UART_Receive+0xac>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	22ff      	movs	r2, #255	; 0xff
 80029c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029ca:	e01b      	b.n	8002a04 <HAL_UART_Receive+0xe4>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	227f      	movs	r2, #127	; 0x7f
 80029d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029d4:	e016      	b.n	8002a04 <HAL_UART_Receive+0xe4>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029de:	d10d      	bne.n	80029fc <HAL_UART_Receive+0xdc>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <HAL_UART_Receive+0xd2>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	227f      	movs	r2, #127	; 0x7f
 80029ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029f0:	e008      	b.n	8002a04 <HAL_UART_Receive+0xe4>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	223f      	movs	r2, #63	; 0x3f
 80029f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80029fa:	e003      	b.n	8002a04 <HAL_UART_Receive+0xe4>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a14:	d108      	bne.n	8002a28 <HAL_UART_Receive+0x108>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d104      	bne.n	8002a28 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e003      	b.n	8002a30 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a38:	e033      	b.n	8002aa2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2200      	movs	r2, #0
 8002a42:	2120      	movs	r1, #32
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fb82 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e032      	b.n	8002aba <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	8a7b      	ldrh	r3, [r7, #18]
 8002a64:	4013      	ands	r3, r2
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	3302      	adds	r3, #2
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e00d      	b.n	8002a90 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	8a7b      	ldrh	r3, [r7, #18]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4013      	ands	r3, r2
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1c5      	bne.n	8002a3a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
  }
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3720      	adds	r7, #32
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac8:	b08a      	sub	sp, #40	; 0x28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b9e      	ldr	r3, [pc, #632]	; (8002d6c <UART_SetConfig+0x2a8>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002afc:	430b      	orrs	r3, r1
 8002afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a93      	ldr	r2, [pc, #588]	; (8002d70 <UART_SetConfig+0x2ac>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d004      	beq.n	8002b30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	430a      	orrs	r2, r1
 8002b42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a8a      	ldr	r2, [pc, #552]	; (8002d74 <UART_SetConfig+0x2b0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d126      	bne.n	8002b9c <UART_SetConfig+0xd8>
 8002b4e:	4b8a      	ldr	r3, [pc, #552]	; (8002d78 <UART_SetConfig+0x2b4>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d81b      	bhi.n	8002b94 <UART_SetConfig+0xd0>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <UART_SetConfig+0xa0>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002b85 	.word	0x08002b85
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b8d 	.word	0x08002b8d
 8002b74:	2301      	movs	r3, #1
 8002b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b7a:	e0ab      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b82:	e0a7      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002b84:	2304      	movs	r3, #4
 8002b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b8a:	e0a3      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b92:	e09f      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002b94:	2310      	movs	r3, #16
 8002b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b9a:	e09b      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a76      	ldr	r2, [pc, #472]	; (8002d7c <UART_SetConfig+0x2b8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d138      	bne.n	8002c18 <UART_SetConfig+0x154>
 8002ba6:	4b74      	ldr	r3, [pc, #464]	; (8002d78 <UART_SetConfig+0x2b4>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f003 030c 	and.w	r3, r3, #12
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	d82d      	bhi.n	8002c10 <UART_SetConfig+0x14c>
 8002bb4:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <UART_SetConfig+0xf8>)
 8002bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bba:	bf00      	nop
 8002bbc:	08002bf1 	.word	0x08002bf1
 8002bc0:	08002c11 	.word	0x08002c11
 8002bc4:	08002c11 	.word	0x08002c11
 8002bc8:	08002c11 	.word	0x08002c11
 8002bcc:	08002c01 	.word	0x08002c01
 8002bd0:	08002c11 	.word	0x08002c11
 8002bd4:	08002c11 	.word	0x08002c11
 8002bd8:	08002c11 	.word	0x08002c11
 8002bdc:	08002bf9 	.word	0x08002bf9
 8002be0:	08002c11 	.word	0x08002c11
 8002be4:	08002c11 	.word	0x08002c11
 8002be8:	08002c11 	.word	0x08002c11
 8002bec:	08002c09 	.word	0x08002c09
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bf6:	e06d      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bfe:	e069      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c00:	2304      	movs	r3, #4
 8002c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c06:	e065      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c08:	2308      	movs	r3, #8
 8002c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c0e:	e061      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c10:	2310      	movs	r3, #16
 8002c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c16:	e05d      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <UART_SetConfig+0x2bc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d125      	bne.n	8002c6e <UART_SetConfig+0x1aa>
 8002c22:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <UART_SetConfig+0x2b4>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c2c:	2b30      	cmp	r3, #48	; 0x30
 8002c2e:	d016      	beq.n	8002c5e <UART_SetConfig+0x19a>
 8002c30:	2b30      	cmp	r3, #48	; 0x30
 8002c32:	d818      	bhi.n	8002c66 <UART_SetConfig+0x1a2>
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d00a      	beq.n	8002c4e <UART_SetConfig+0x18a>
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d814      	bhi.n	8002c66 <UART_SetConfig+0x1a2>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <UART_SetConfig+0x182>
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d008      	beq.n	8002c56 <UART_SetConfig+0x192>
 8002c44:	e00f      	b.n	8002c66 <UART_SetConfig+0x1a2>
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c4c:	e042      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c54:	e03e      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c56:	2304      	movs	r3, #4
 8002c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c5c:	e03a      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c64:	e036      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c66:	2310      	movs	r3, #16
 8002c68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c6c:	e032      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a3f      	ldr	r2, [pc, #252]	; (8002d70 <UART_SetConfig+0x2ac>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d12a      	bne.n	8002cce <UART_SetConfig+0x20a>
 8002c78:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <UART_SetConfig+0x2b4>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c86:	d01a      	beq.n	8002cbe <UART_SetConfig+0x1fa>
 8002c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c8c:	d81b      	bhi.n	8002cc6 <UART_SetConfig+0x202>
 8002c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c92:	d00c      	beq.n	8002cae <UART_SetConfig+0x1ea>
 8002c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c98:	d815      	bhi.n	8002cc6 <UART_SetConfig+0x202>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <UART_SetConfig+0x1e2>
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d008      	beq.n	8002cb6 <UART_SetConfig+0x1f2>
 8002ca4:	e00f      	b.n	8002cc6 <UART_SetConfig+0x202>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cac:	e012      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb4:	e00e      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cbc:	e00a      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc4:	e006      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ccc:	e002      	b.n	8002cd4 <UART_SetConfig+0x210>
 8002cce:	2310      	movs	r3, #16
 8002cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <UART_SetConfig+0x2ac>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	f040 808a 	bne.w	8002df4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d824      	bhi.n	8002d32 <UART_SetConfig+0x26e>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <UART_SetConfig+0x22c>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d15 	.word	0x08002d15
 8002cf4:	08002d33 	.word	0x08002d33
 8002cf8:	08002d1d 	.word	0x08002d1d
 8002cfc:	08002d33 	.word	0x08002d33
 8002d00:	08002d23 	.word	0x08002d23
 8002d04:	08002d33 	.word	0x08002d33
 8002d08:	08002d33 	.word	0x08002d33
 8002d0c:	08002d33 	.word	0x08002d33
 8002d10:	08002d2b 	.word	0x08002d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d14:	f7ff f95a 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8002d18:	61f8      	str	r0, [r7, #28]
        break;
 8002d1a:	e010      	b.n	8002d3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <UART_SetConfig+0x2c0>)
 8002d1e:	61fb      	str	r3, [r7, #28]
        break;
 8002d20:	e00d      	b.n	8002d3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d22:	f7ff f8bb 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002d26:	61f8      	str	r0, [r7, #28]
        break;
 8002d28:	e009      	b.n	8002d3e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d2e:	61fb      	str	r3, [r7, #28]
        break;
 8002d30:	e005      	b.n	8002d3e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8109 	beq.w	8002f58 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d305      	bcc.n	8002d62 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d912      	bls.n	8002d88 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d68:	e0f6      	b.n	8002f58 <UART_SetConfig+0x494>
 8002d6a:	bf00      	nop
 8002d6c:	efff69f3 	.word	0xefff69f3
 8002d70:	40008000 	.word	0x40008000
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40004400 	.word	0x40004400
 8002d80:	40004800 	.word	0x40004800
 8002d84:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	461c      	mov	r4, r3
 8002d8e:	4615      	mov	r5, r2
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	022b      	lsls	r3, r5, #8
 8002d9a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d9e:	0222      	lsls	r2, r4, #8
 8002da0:	68f9      	ldr	r1, [r7, #12]
 8002da2:	6849      	ldr	r1, [r1, #4]
 8002da4:	0849      	lsrs	r1, r1, #1
 8002da6:	2000      	movs	r0, #0
 8002da8:	4688      	mov	r8, r1
 8002daa:	4681      	mov	r9, r0
 8002dac:	eb12 0a08 	adds.w	sl, r2, r8
 8002db0:	eb43 0b09 	adc.w	fp, r3, r9
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dc2:	4650      	mov	r0, sl
 8002dc4:	4659      	mov	r1, fp
 8002dc6:	f7fd fa63 	bl	8000290 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dd8:	d308      	bcc.n	8002dec <UART_SetConfig+0x328>
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de0:	d204      	bcs.n	8002dec <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	e0b5      	b.n	8002f58 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002df2:	e0b1      	b.n	8002f58 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	d15d      	bne.n	8002eba <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8002dfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d827      	bhi.n	8002e56 <UART_SetConfig+0x392>
 8002e06:	a201      	add	r2, pc, #4	; (adr r2, 8002e0c <UART_SetConfig+0x348>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e31 	.word	0x08002e31
 8002e10:	08002e39 	.word	0x08002e39
 8002e14:	08002e41 	.word	0x08002e41
 8002e18:	08002e57 	.word	0x08002e57
 8002e1c:	08002e47 	.word	0x08002e47
 8002e20:	08002e57 	.word	0x08002e57
 8002e24:	08002e57 	.word	0x08002e57
 8002e28:	08002e57 	.word	0x08002e57
 8002e2c:	08002e4f 	.word	0x08002e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e30:	f7ff f8cc 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8002e34:	61f8      	str	r0, [r7, #28]
        break;
 8002e36:	e014      	b.n	8002e62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e38:	f7ff f8de 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002e3c:	61f8      	str	r0, [r7, #28]
        break;
 8002e3e:	e010      	b.n	8002e62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <UART_SetConfig+0x4b0>)
 8002e42:	61fb      	str	r3, [r7, #28]
        break;
 8002e44:	e00d      	b.n	8002e62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e46:	f7ff f829 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002e4a:	61f8      	str	r0, [r7, #28]
        break;
 8002e4c:	e009      	b.n	8002e62 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e52:	61fb      	str	r3, [r7, #28]
        break;
 8002e54:	e005      	b.n	8002e62 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d077      	beq.n	8002f58 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005a      	lsls	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	085b      	lsrs	r3, r3, #1
 8002e72:	441a      	add	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d916      	bls.n	8002eb2 <UART_SetConfig+0x3ee>
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8a:	d212      	bcs.n	8002eb2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	f023 030f 	bic.w	r3, r3, #15
 8002e94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	8afb      	ldrh	r3, [r7, #22]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	8afa      	ldrh	r2, [r7, #22]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	e052      	b.n	8002f58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002eb8:	e04e      	b.n	8002f58 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d827      	bhi.n	8002f12 <UART_SetConfig+0x44e>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <UART_SetConfig+0x404>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002eed 	.word	0x08002eed
 8002ecc:	08002ef5 	.word	0x08002ef5
 8002ed0:	08002efd 	.word	0x08002efd
 8002ed4:	08002f13 	.word	0x08002f13
 8002ed8:	08002f03 	.word	0x08002f03
 8002edc:	08002f13 	.word	0x08002f13
 8002ee0:	08002f13 	.word	0x08002f13
 8002ee4:	08002f13 	.word	0x08002f13
 8002ee8:	08002f0b 	.word	0x08002f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002eec:	f7ff f86e 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8002ef0:	61f8      	str	r0, [r7, #28]
        break;
 8002ef2:	e014      	b.n	8002f1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef4:	f7ff f880 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002ef8:	61f8      	str	r0, [r7, #28]
        break;
 8002efa:	e010      	b.n	8002f1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <UART_SetConfig+0x4b0>)
 8002efe:	61fb      	str	r3, [r7, #28]
        break;
 8002f00:	e00d      	b.n	8002f1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f02:	f7fe ffcb 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002f06:	61f8      	str	r0, [r7, #28]
        break;
 8002f08:	e009      	b.n	8002f1e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f0e:	61fb      	str	r3, [r7, #28]
        break;
 8002f10:	e005      	b.n	8002f1e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f1c:	bf00      	nop
    }

    if (pclk != 0U)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d019      	beq.n	8002f58 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	085a      	lsrs	r2, r3, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	441a      	add	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	d909      	bls.n	8002f52 <UART_SetConfig+0x48e>
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d205      	bcs.n	8002f52 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	e002      	b.n	8002f58 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f72:	bf00      	nop
 8002f74:	00f42400 	.word	0x00f42400

08002f78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01a      	beq.n	800308e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003076:	d10a      	bne.n	800308e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
  }
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030cc:	f7fd fec6 	bl	8000e5c <HAL_GetTick>
 80030d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d10e      	bne.n	80030fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f82d 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e023      	b.n	8003146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d10e      	bne.n	800312a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800310c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f817 	bl	800314e <UART_WaitOnFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e00d      	b.n	8003146 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2220      	movs	r2, #32
 8003134:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b09c      	sub	sp, #112	; 0x70
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315e:	e0a5      	b.n	80032ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003166:	f000 80a1 	beq.w	80032ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fd fe77 	bl	8000e5c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <UART_WaitOnFlagUntilTimeout+0x32>
 800317a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800317c:	2b00      	cmp	r3, #0
 800317e:	d13e      	bne.n	80031fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003188:	e853 3f00 	ldrex	r3, [r3]
 800318c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800318e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003190:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003194:	667b      	str	r3, [r7, #100]	; 0x64
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800319e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031a6:	e841 2300 	strex	r3, r2, [r1]
 80031aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e6      	bne.n	8003180 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3308      	adds	r3, #8
 80031b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	663b      	str	r3, [r7, #96]	; 0x60
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3308      	adds	r3, #8
 80031d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80031d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e5      	bne.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e067      	b.n	80032ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d04f      	beq.n	80032ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800321a:	d147      	bne.n	80032ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003224:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	e853 3f00 	ldrex	r3, [r3]
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800323a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	637b      	str	r3, [r7, #52]	; 0x34
 8003246:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800324a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e6      	bne.n	8003226 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3308      	adds	r3, #8
 800325e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	613b      	str	r3, [r7, #16]
   return(result);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3308      	adds	r3, #8
 8003276:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003278:	623a      	str	r2, [r7, #32]
 800327a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	69f9      	ldr	r1, [r7, #28]
 800327e:	6a3a      	ldr	r2, [r7, #32]
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	61bb      	str	r3, [r7, #24]
   return(result);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e5      	bne.n	8003258 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e010      	b.n	80032ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	4013      	ands	r3, r2
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	f43f af4a 	beq.w	8003160 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3770      	adds	r7, #112	; 0x70
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <__errno>:
 80032d8:	4b01      	ldr	r3, [pc, #4]	; (80032e0 <__errno+0x8>)
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	2000000c 	.word	0x2000000c

080032e4 <__libc_init_array>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	4d0d      	ldr	r5, [pc, #52]	; (800331c <__libc_init_array+0x38>)
 80032e8:	4c0d      	ldr	r4, [pc, #52]	; (8003320 <__libc_init_array+0x3c>)
 80032ea:	1b64      	subs	r4, r4, r5
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	2600      	movs	r6, #0
 80032f0:	42a6      	cmp	r6, r4
 80032f2:	d109      	bne.n	8003308 <__libc_init_array+0x24>
 80032f4:	4d0b      	ldr	r5, [pc, #44]	; (8003324 <__libc_init_array+0x40>)
 80032f6:	4c0c      	ldr	r4, [pc, #48]	; (8003328 <__libc_init_array+0x44>)
 80032f8:	f000 ffae 	bl	8004258 <_init>
 80032fc:	1b64      	subs	r4, r4, r5
 80032fe:	10a4      	asrs	r4, r4, #2
 8003300:	2600      	movs	r6, #0
 8003302:	42a6      	cmp	r6, r4
 8003304:	d105      	bne.n	8003312 <__libc_init_array+0x2e>
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	f855 3b04 	ldr.w	r3, [r5], #4
 800330c:	4798      	blx	r3
 800330e:	3601      	adds	r6, #1
 8003310:	e7ee      	b.n	80032f0 <__libc_init_array+0xc>
 8003312:	f855 3b04 	ldr.w	r3, [r5], #4
 8003316:	4798      	blx	r3
 8003318:	3601      	adds	r6, #1
 800331a:	e7f2      	b.n	8003302 <__libc_init_array+0x1e>
 800331c:	080043b0 	.word	0x080043b0
 8003320:	080043b0 	.word	0x080043b0
 8003324:	080043b0 	.word	0x080043b0
 8003328:	080043b4 	.word	0x080043b4

0800332c <memset>:
 800332c:	4402      	add	r2, r0
 800332e:	4603      	mov	r3, r0
 8003330:	4293      	cmp	r3, r2
 8003332:	d100      	bne.n	8003336 <memset+0xa>
 8003334:	4770      	bx	lr
 8003336:	f803 1b01 	strb.w	r1, [r3], #1
 800333a:	e7f9      	b.n	8003330 <memset+0x4>

0800333c <iprintf>:
 800333c:	b40f      	push	{r0, r1, r2, r3}
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <iprintf+0x2c>)
 8003340:	b513      	push	{r0, r1, r4, lr}
 8003342:	681c      	ldr	r4, [r3, #0]
 8003344:	b124      	cbz	r4, 8003350 <iprintf+0x14>
 8003346:	69a3      	ldr	r3, [r4, #24]
 8003348:	b913      	cbnz	r3, 8003350 <iprintf+0x14>
 800334a:	4620      	mov	r0, r4
 800334c:	f000 f866 	bl	800341c <__sinit>
 8003350:	ab05      	add	r3, sp, #20
 8003352:	9a04      	ldr	r2, [sp, #16]
 8003354:	68a1      	ldr	r1, [r4, #8]
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	4620      	mov	r0, r4
 800335a:	f000 f9bd 	bl	80036d8 <_vfiprintf_r>
 800335e:	b002      	add	sp, #8
 8003360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003364:	b004      	add	sp, #16
 8003366:	4770      	bx	lr
 8003368:	2000000c 	.word	0x2000000c

0800336c <std>:
 800336c:	2300      	movs	r3, #0
 800336e:	b510      	push	{r4, lr}
 8003370:	4604      	mov	r4, r0
 8003372:	e9c0 3300 	strd	r3, r3, [r0]
 8003376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800337a:	6083      	str	r3, [r0, #8]
 800337c:	8181      	strh	r1, [r0, #12]
 800337e:	6643      	str	r3, [r0, #100]	; 0x64
 8003380:	81c2      	strh	r2, [r0, #14]
 8003382:	6183      	str	r3, [r0, #24]
 8003384:	4619      	mov	r1, r3
 8003386:	2208      	movs	r2, #8
 8003388:	305c      	adds	r0, #92	; 0x5c
 800338a:	f7ff ffcf 	bl	800332c <memset>
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <std+0x38>)
 8003390:	6263      	str	r3, [r4, #36]	; 0x24
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <std+0x3c>)
 8003394:	62a3      	str	r3, [r4, #40]	; 0x28
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <std+0x40>)
 8003398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800339a:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <std+0x44>)
 800339c:	6224      	str	r4, [r4, #32]
 800339e:	6323      	str	r3, [r4, #48]	; 0x30
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	bf00      	nop
 80033a4:	08003c81 	.word	0x08003c81
 80033a8:	08003ca3 	.word	0x08003ca3
 80033ac:	08003cdb 	.word	0x08003cdb
 80033b0:	08003cff 	.word	0x08003cff

080033b4 <_cleanup_r>:
 80033b4:	4901      	ldr	r1, [pc, #4]	; (80033bc <_cleanup_r+0x8>)
 80033b6:	f000 b8af 	b.w	8003518 <_fwalk_reent>
 80033ba:	bf00      	nop
 80033bc:	08003fd9 	.word	0x08003fd9

080033c0 <__sfmoreglue>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2268      	movs	r2, #104	; 0x68
 80033c4:	1e4d      	subs	r5, r1, #1
 80033c6:	4355      	muls	r5, r2
 80033c8:	460e      	mov	r6, r1
 80033ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033ce:	f000 f8e5 	bl	800359c <_malloc_r>
 80033d2:	4604      	mov	r4, r0
 80033d4:	b140      	cbz	r0, 80033e8 <__sfmoreglue+0x28>
 80033d6:	2100      	movs	r1, #0
 80033d8:	e9c0 1600 	strd	r1, r6, [r0]
 80033dc:	300c      	adds	r0, #12
 80033de:	60a0      	str	r0, [r4, #8]
 80033e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033e4:	f7ff ffa2 	bl	800332c <memset>
 80033e8:	4620      	mov	r0, r4
 80033ea:	bd70      	pop	{r4, r5, r6, pc}

080033ec <__sfp_lock_acquire>:
 80033ec:	4801      	ldr	r0, [pc, #4]	; (80033f4 <__sfp_lock_acquire+0x8>)
 80033ee:	f000 b8b3 	b.w	8003558 <__retarget_lock_acquire_recursive>
 80033f2:	bf00      	nop
 80033f4:	20000171 	.word	0x20000171

080033f8 <__sfp_lock_release>:
 80033f8:	4801      	ldr	r0, [pc, #4]	; (8003400 <__sfp_lock_release+0x8>)
 80033fa:	f000 b8ae 	b.w	800355a <__retarget_lock_release_recursive>
 80033fe:	bf00      	nop
 8003400:	20000171 	.word	0x20000171

08003404 <__sinit_lock_acquire>:
 8003404:	4801      	ldr	r0, [pc, #4]	; (800340c <__sinit_lock_acquire+0x8>)
 8003406:	f000 b8a7 	b.w	8003558 <__retarget_lock_acquire_recursive>
 800340a:	bf00      	nop
 800340c:	20000172 	.word	0x20000172

08003410 <__sinit_lock_release>:
 8003410:	4801      	ldr	r0, [pc, #4]	; (8003418 <__sinit_lock_release+0x8>)
 8003412:	f000 b8a2 	b.w	800355a <__retarget_lock_release_recursive>
 8003416:	bf00      	nop
 8003418:	20000172 	.word	0x20000172

0800341c <__sinit>:
 800341c:	b510      	push	{r4, lr}
 800341e:	4604      	mov	r4, r0
 8003420:	f7ff fff0 	bl	8003404 <__sinit_lock_acquire>
 8003424:	69a3      	ldr	r3, [r4, #24]
 8003426:	b11b      	cbz	r3, 8003430 <__sinit+0x14>
 8003428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800342c:	f7ff bff0 	b.w	8003410 <__sinit_lock_release>
 8003430:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003434:	6523      	str	r3, [r4, #80]	; 0x50
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <__sinit+0x68>)
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <__sinit+0x6c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	62a2      	str	r2, [r4, #40]	; 0x28
 800343e:	42a3      	cmp	r3, r4
 8003440:	bf04      	itt	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	61a3      	streq	r3, [r4, #24]
 8003446:	4620      	mov	r0, r4
 8003448:	f000 f820 	bl	800348c <__sfp>
 800344c:	6060      	str	r0, [r4, #4]
 800344e:	4620      	mov	r0, r4
 8003450:	f000 f81c 	bl	800348c <__sfp>
 8003454:	60a0      	str	r0, [r4, #8]
 8003456:	4620      	mov	r0, r4
 8003458:	f000 f818 	bl	800348c <__sfp>
 800345c:	2200      	movs	r2, #0
 800345e:	60e0      	str	r0, [r4, #12]
 8003460:	2104      	movs	r1, #4
 8003462:	6860      	ldr	r0, [r4, #4]
 8003464:	f7ff ff82 	bl	800336c <std>
 8003468:	68a0      	ldr	r0, [r4, #8]
 800346a:	2201      	movs	r2, #1
 800346c:	2109      	movs	r1, #9
 800346e:	f7ff ff7d 	bl	800336c <std>
 8003472:	68e0      	ldr	r0, [r4, #12]
 8003474:	2202      	movs	r2, #2
 8003476:	2112      	movs	r1, #18
 8003478:	f7ff ff78 	bl	800336c <std>
 800347c:	2301      	movs	r3, #1
 800347e:	61a3      	str	r3, [r4, #24]
 8003480:	e7d2      	b.n	8003428 <__sinit+0xc>
 8003482:	bf00      	nop
 8003484:	08004310 	.word	0x08004310
 8003488:	080033b5 	.word	0x080033b5

0800348c <__sfp>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	4607      	mov	r7, r0
 8003490:	f7ff ffac 	bl	80033ec <__sfp_lock_acquire>
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <__sfp+0x84>)
 8003496:	681e      	ldr	r6, [r3, #0]
 8003498:	69b3      	ldr	r3, [r6, #24]
 800349a:	b913      	cbnz	r3, 80034a2 <__sfp+0x16>
 800349c:	4630      	mov	r0, r6
 800349e:	f7ff ffbd 	bl	800341c <__sinit>
 80034a2:	3648      	adds	r6, #72	; 0x48
 80034a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	d503      	bpl.n	80034b4 <__sfp+0x28>
 80034ac:	6833      	ldr	r3, [r6, #0]
 80034ae:	b30b      	cbz	r3, 80034f4 <__sfp+0x68>
 80034b0:	6836      	ldr	r6, [r6, #0]
 80034b2:	e7f7      	b.n	80034a4 <__sfp+0x18>
 80034b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034b8:	b9d5      	cbnz	r5, 80034f0 <__sfp+0x64>
 80034ba:	4b16      	ldr	r3, [pc, #88]	; (8003514 <__sfp+0x88>)
 80034bc:	60e3      	str	r3, [r4, #12]
 80034be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034c2:	6665      	str	r5, [r4, #100]	; 0x64
 80034c4:	f000 f847 	bl	8003556 <__retarget_lock_init_recursive>
 80034c8:	f7ff ff96 	bl	80033f8 <__sfp_lock_release>
 80034cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034d4:	6025      	str	r5, [r4, #0]
 80034d6:	61a5      	str	r5, [r4, #24]
 80034d8:	2208      	movs	r2, #8
 80034da:	4629      	mov	r1, r5
 80034dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034e0:	f7ff ff24 	bl	800332c <memset>
 80034e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034ec:	4620      	mov	r0, r4
 80034ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f0:	3468      	adds	r4, #104	; 0x68
 80034f2:	e7d9      	b.n	80034a8 <__sfp+0x1c>
 80034f4:	2104      	movs	r1, #4
 80034f6:	4638      	mov	r0, r7
 80034f8:	f7ff ff62 	bl	80033c0 <__sfmoreglue>
 80034fc:	4604      	mov	r4, r0
 80034fe:	6030      	str	r0, [r6, #0]
 8003500:	2800      	cmp	r0, #0
 8003502:	d1d5      	bne.n	80034b0 <__sfp+0x24>
 8003504:	f7ff ff78 	bl	80033f8 <__sfp_lock_release>
 8003508:	230c      	movs	r3, #12
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	e7ee      	b.n	80034ec <__sfp+0x60>
 800350e:	bf00      	nop
 8003510:	08004310 	.word	0x08004310
 8003514:	ffff0001 	.word	0xffff0001

08003518 <_fwalk_reent>:
 8003518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800351c:	4606      	mov	r6, r0
 800351e:	4688      	mov	r8, r1
 8003520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003524:	2700      	movs	r7, #0
 8003526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800352a:	f1b9 0901 	subs.w	r9, r9, #1
 800352e:	d505      	bpl.n	800353c <_fwalk_reent+0x24>
 8003530:	6824      	ldr	r4, [r4, #0]
 8003532:	2c00      	cmp	r4, #0
 8003534:	d1f7      	bne.n	8003526 <_fwalk_reent+0xe>
 8003536:	4638      	mov	r0, r7
 8003538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800353c:	89ab      	ldrh	r3, [r5, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d907      	bls.n	8003552 <_fwalk_reent+0x3a>
 8003542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003546:	3301      	adds	r3, #1
 8003548:	d003      	beq.n	8003552 <_fwalk_reent+0x3a>
 800354a:	4629      	mov	r1, r5
 800354c:	4630      	mov	r0, r6
 800354e:	47c0      	blx	r8
 8003550:	4307      	orrs	r7, r0
 8003552:	3568      	adds	r5, #104	; 0x68
 8003554:	e7e9      	b.n	800352a <_fwalk_reent+0x12>

08003556 <__retarget_lock_init_recursive>:
 8003556:	4770      	bx	lr

08003558 <__retarget_lock_acquire_recursive>:
 8003558:	4770      	bx	lr

0800355a <__retarget_lock_release_recursive>:
 800355a:	4770      	bx	lr

0800355c <sbrk_aligned>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	4e0e      	ldr	r6, [pc, #56]	; (8003598 <sbrk_aligned+0x3c>)
 8003560:	460c      	mov	r4, r1
 8003562:	6831      	ldr	r1, [r6, #0]
 8003564:	4605      	mov	r5, r0
 8003566:	b911      	cbnz	r1, 800356e <sbrk_aligned+0x12>
 8003568:	f000 fb7a 	bl	8003c60 <_sbrk_r>
 800356c:	6030      	str	r0, [r6, #0]
 800356e:	4621      	mov	r1, r4
 8003570:	4628      	mov	r0, r5
 8003572:	f000 fb75 	bl	8003c60 <_sbrk_r>
 8003576:	1c43      	adds	r3, r0, #1
 8003578:	d00a      	beq.n	8003590 <sbrk_aligned+0x34>
 800357a:	1cc4      	adds	r4, r0, #3
 800357c:	f024 0403 	bic.w	r4, r4, #3
 8003580:	42a0      	cmp	r0, r4
 8003582:	d007      	beq.n	8003594 <sbrk_aligned+0x38>
 8003584:	1a21      	subs	r1, r4, r0
 8003586:	4628      	mov	r0, r5
 8003588:	f000 fb6a 	bl	8003c60 <_sbrk_r>
 800358c:	3001      	adds	r0, #1
 800358e:	d101      	bne.n	8003594 <sbrk_aligned+0x38>
 8003590:	f04f 34ff 	mov.w	r4, #4294967295
 8003594:	4620      	mov	r0, r4
 8003596:	bd70      	pop	{r4, r5, r6, pc}
 8003598:	20000178 	.word	0x20000178

0800359c <_malloc_r>:
 800359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a0:	1ccd      	adds	r5, r1, #3
 80035a2:	f025 0503 	bic.w	r5, r5, #3
 80035a6:	3508      	adds	r5, #8
 80035a8:	2d0c      	cmp	r5, #12
 80035aa:	bf38      	it	cc
 80035ac:	250c      	movcc	r5, #12
 80035ae:	2d00      	cmp	r5, #0
 80035b0:	4607      	mov	r7, r0
 80035b2:	db01      	blt.n	80035b8 <_malloc_r+0x1c>
 80035b4:	42a9      	cmp	r1, r5
 80035b6:	d905      	bls.n	80035c4 <_malloc_r+0x28>
 80035b8:	230c      	movs	r3, #12
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	2600      	movs	r6, #0
 80035be:	4630      	mov	r0, r6
 80035c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035c4:	4e2e      	ldr	r6, [pc, #184]	; (8003680 <_malloc_r+0xe4>)
 80035c6:	f000 fdbb 	bl	8004140 <__malloc_lock>
 80035ca:	6833      	ldr	r3, [r6, #0]
 80035cc:	461c      	mov	r4, r3
 80035ce:	bb34      	cbnz	r4, 800361e <_malloc_r+0x82>
 80035d0:	4629      	mov	r1, r5
 80035d2:	4638      	mov	r0, r7
 80035d4:	f7ff ffc2 	bl	800355c <sbrk_aligned>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	4604      	mov	r4, r0
 80035dc:	d14d      	bne.n	800367a <_malloc_r+0xde>
 80035de:	6834      	ldr	r4, [r6, #0]
 80035e0:	4626      	mov	r6, r4
 80035e2:	2e00      	cmp	r6, #0
 80035e4:	d140      	bne.n	8003668 <_malloc_r+0xcc>
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	4631      	mov	r1, r6
 80035ea:	4638      	mov	r0, r7
 80035ec:	eb04 0803 	add.w	r8, r4, r3
 80035f0:	f000 fb36 	bl	8003c60 <_sbrk_r>
 80035f4:	4580      	cmp	r8, r0
 80035f6:	d13a      	bne.n	800366e <_malloc_r+0xd2>
 80035f8:	6821      	ldr	r1, [r4, #0]
 80035fa:	3503      	adds	r5, #3
 80035fc:	1a6d      	subs	r5, r5, r1
 80035fe:	f025 0503 	bic.w	r5, r5, #3
 8003602:	3508      	adds	r5, #8
 8003604:	2d0c      	cmp	r5, #12
 8003606:	bf38      	it	cc
 8003608:	250c      	movcc	r5, #12
 800360a:	4629      	mov	r1, r5
 800360c:	4638      	mov	r0, r7
 800360e:	f7ff ffa5 	bl	800355c <sbrk_aligned>
 8003612:	3001      	adds	r0, #1
 8003614:	d02b      	beq.n	800366e <_malloc_r+0xd2>
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	442b      	add	r3, r5
 800361a:	6023      	str	r3, [r4, #0]
 800361c:	e00e      	b.n	800363c <_malloc_r+0xa0>
 800361e:	6822      	ldr	r2, [r4, #0]
 8003620:	1b52      	subs	r2, r2, r5
 8003622:	d41e      	bmi.n	8003662 <_malloc_r+0xc6>
 8003624:	2a0b      	cmp	r2, #11
 8003626:	d916      	bls.n	8003656 <_malloc_r+0xba>
 8003628:	1961      	adds	r1, r4, r5
 800362a:	42a3      	cmp	r3, r4
 800362c:	6025      	str	r5, [r4, #0]
 800362e:	bf18      	it	ne
 8003630:	6059      	strne	r1, [r3, #4]
 8003632:	6863      	ldr	r3, [r4, #4]
 8003634:	bf08      	it	eq
 8003636:	6031      	streq	r1, [r6, #0]
 8003638:	5162      	str	r2, [r4, r5]
 800363a:	604b      	str	r3, [r1, #4]
 800363c:	4638      	mov	r0, r7
 800363e:	f104 060b 	add.w	r6, r4, #11
 8003642:	f000 fd83 	bl	800414c <__malloc_unlock>
 8003646:	f026 0607 	bic.w	r6, r6, #7
 800364a:	1d23      	adds	r3, r4, #4
 800364c:	1af2      	subs	r2, r6, r3
 800364e:	d0b6      	beq.n	80035be <_malloc_r+0x22>
 8003650:	1b9b      	subs	r3, r3, r6
 8003652:	50a3      	str	r3, [r4, r2]
 8003654:	e7b3      	b.n	80035be <_malloc_r+0x22>
 8003656:	6862      	ldr	r2, [r4, #4]
 8003658:	42a3      	cmp	r3, r4
 800365a:	bf0c      	ite	eq
 800365c:	6032      	streq	r2, [r6, #0]
 800365e:	605a      	strne	r2, [r3, #4]
 8003660:	e7ec      	b.n	800363c <_malloc_r+0xa0>
 8003662:	4623      	mov	r3, r4
 8003664:	6864      	ldr	r4, [r4, #4]
 8003666:	e7b2      	b.n	80035ce <_malloc_r+0x32>
 8003668:	4634      	mov	r4, r6
 800366a:	6876      	ldr	r6, [r6, #4]
 800366c:	e7b9      	b.n	80035e2 <_malloc_r+0x46>
 800366e:	230c      	movs	r3, #12
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4638      	mov	r0, r7
 8003674:	f000 fd6a 	bl	800414c <__malloc_unlock>
 8003678:	e7a1      	b.n	80035be <_malloc_r+0x22>
 800367a:	6025      	str	r5, [r4, #0]
 800367c:	e7de      	b.n	800363c <_malloc_r+0xa0>
 800367e:	bf00      	nop
 8003680:	20000174 	.word	0x20000174

08003684 <__sfputc_r>:
 8003684:	6893      	ldr	r3, [r2, #8]
 8003686:	3b01      	subs	r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	b410      	push	{r4}
 800368c:	6093      	str	r3, [r2, #8]
 800368e:	da08      	bge.n	80036a2 <__sfputc_r+0x1e>
 8003690:	6994      	ldr	r4, [r2, #24]
 8003692:	42a3      	cmp	r3, r4
 8003694:	db01      	blt.n	800369a <__sfputc_r+0x16>
 8003696:	290a      	cmp	r1, #10
 8003698:	d103      	bne.n	80036a2 <__sfputc_r+0x1e>
 800369a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800369e:	f000 bb33 	b.w	8003d08 <__swbuf_r>
 80036a2:	6813      	ldr	r3, [r2, #0]
 80036a4:	1c58      	adds	r0, r3, #1
 80036a6:	6010      	str	r0, [r2, #0]
 80036a8:	7019      	strb	r1, [r3, #0]
 80036aa:	4608      	mov	r0, r1
 80036ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <__sfputs_r>:
 80036b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b4:	4606      	mov	r6, r0
 80036b6:	460f      	mov	r7, r1
 80036b8:	4614      	mov	r4, r2
 80036ba:	18d5      	adds	r5, r2, r3
 80036bc:	42ac      	cmp	r4, r5
 80036be:	d101      	bne.n	80036c4 <__sfputs_r+0x12>
 80036c0:	2000      	movs	r0, #0
 80036c2:	e007      	b.n	80036d4 <__sfputs_r+0x22>
 80036c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c8:	463a      	mov	r2, r7
 80036ca:	4630      	mov	r0, r6
 80036cc:	f7ff ffda 	bl	8003684 <__sfputc_r>
 80036d0:	1c43      	adds	r3, r0, #1
 80036d2:	d1f3      	bne.n	80036bc <__sfputs_r+0xa>
 80036d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036d8 <_vfiprintf_r>:
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	460d      	mov	r5, r1
 80036de:	b09d      	sub	sp, #116	; 0x74
 80036e0:	4614      	mov	r4, r2
 80036e2:	4698      	mov	r8, r3
 80036e4:	4606      	mov	r6, r0
 80036e6:	b118      	cbz	r0, 80036f0 <_vfiprintf_r+0x18>
 80036e8:	6983      	ldr	r3, [r0, #24]
 80036ea:	b90b      	cbnz	r3, 80036f0 <_vfiprintf_r+0x18>
 80036ec:	f7ff fe96 	bl	800341c <__sinit>
 80036f0:	4b89      	ldr	r3, [pc, #548]	; (8003918 <_vfiprintf_r+0x240>)
 80036f2:	429d      	cmp	r5, r3
 80036f4:	d11b      	bne.n	800372e <_vfiprintf_r+0x56>
 80036f6:	6875      	ldr	r5, [r6, #4]
 80036f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036fa:	07d9      	lsls	r1, r3, #31
 80036fc:	d405      	bmi.n	800370a <_vfiprintf_r+0x32>
 80036fe:	89ab      	ldrh	r3, [r5, #12]
 8003700:	059a      	lsls	r2, r3, #22
 8003702:	d402      	bmi.n	800370a <_vfiprintf_r+0x32>
 8003704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003706:	f7ff ff27 	bl	8003558 <__retarget_lock_acquire_recursive>
 800370a:	89ab      	ldrh	r3, [r5, #12]
 800370c:	071b      	lsls	r3, r3, #28
 800370e:	d501      	bpl.n	8003714 <_vfiprintf_r+0x3c>
 8003710:	692b      	ldr	r3, [r5, #16]
 8003712:	b9eb      	cbnz	r3, 8003750 <_vfiprintf_r+0x78>
 8003714:	4629      	mov	r1, r5
 8003716:	4630      	mov	r0, r6
 8003718:	f000 fb5a 	bl	8003dd0 <__swsetup_r>
 800371c:	b1c0      	cbz	r0, 8003750 <_vfiprintf_r+0x78>
 800371e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003720:	07dc      	lsls	r4, r3, #31
 8003722:	d50e      	bpl.n	8003742 <_vfiprintf_r+0x6a>
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	b01d      	add	sp, #116	; 0x74
 800372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800372e:	4b7b      	ldr	r3, [pc, #492]	; (800391c <_vfiprintf_r+0x244>)
 8003730:	429d      	cmp	r5, r3
 8003732:	d101      	bne.n	8003738 <_vfiprintf_r+0x60>
 8003734:	68b5      	ldr	r5, [r6, #8]
 8003736:	e7df      	b.n	80036f8 <_vfiprintf_r+0x20>
 8003738:	4b79      	ldr	r3, [pc, #484]	; (8003920 <_vfiprintf_r+0x248>)
 800373a:	429d      	cmp	r5, r3
 800373c:	bf08      	it	eq
 800373e:	68f5      	ldreq	r5, [r6, #12]
 8003740:	e7da      	b.n	80036f8 <_vfiprintf_r+0x20>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	0598      	lsls	r0, r3, #22
 8003746:	d4ed      	bmi.n	8003724 <_vfiprintf_r+0x4c>
 8003748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800374a:	f7ff ff06 	bl	800355a <__retarget_lock_release_recursive>
 800374e:	e7e9      	b.n	8003724 <_vfiprintf_r+0x4c>
 8003750:	2300      	movs	r3, #0
 8003752:	9309      	str	r3, [sp, #36]	; 0x24
 8003754:	2320      	movs	r3, #32
 8003756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800375a:	f8cd 800c 	str.w	r8, [sp, #12]
 800375e:	2330      	movs	r3, #48	; 0x30
 8003760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003924 <_vfiprintf_r+0x24c>
 8003764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003768:	f04f 0901 	mov.w	r9, #1
 800376c:	4623      	mov	r3, r4
 800376e:	469a      	mov	sl, r3
 8003770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003774:	b10a      	cbz	r2, 800377a <_vfiprintf_r+0xa2>
 8003776:	2a25      	cmp	r2, #37	; 0x25
 8003778:	d1f9      	bne.n	800376e <_vfiprintf_r+0x96>
 800377a:	ebba 0b04 	subs.w	fp, sl, r4
 800377e:	d00b      	beq.n	8003798 <_vfiprintf_r+0xc0>
 8003780:	465b      	mov	r3, fp
 8003782:	4622      	mov	r2, r4
 8003784:	4629      	mov	r1, r5
 8003786:	4630      	mov	r0, r6
 8003788:	f7ff ff93 	bl	80036b2 <__sfputs_r>
 800378c:	3001      	adds	r0, #1
 800378e:	f000 80aa 	beq.w	80038e6 <_vfiprintf_r+0x20e>
 8003792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003794:	445a      	add	r2, fp
 8003796:	9209      	str	r2, [sp, #36]	; 0x24
 8003798:	f89a 3000 	ldrb.w	r3, [sl]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a2 	beq.w	80038e6 <_vfiprintf_r+0x20e>
 80037a2:	2300      	movs	r3, #0
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ac:	f10a 0a01 	add.w	sl, sl, #1
 80037b0:	9304      	str	r3, [sp, #16]
 80037b2:	9307      	str	r3, [sp, #28]
 80037b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037b8:	931a      	str	r3, [sp, #104]	; 0x68
 80037ba:	4654      	mov	r4, sl
 80037bc:	2205      	movs	r2, #5
 80037be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c2:	4858      	ldr	r0, [pc, #352]	; (8003924 <_vfiprintf_r+0x24c>)
 80037c4:	f7fc fd14 	bl	80001f0 <memchr>
 80037c8:	9a04      	ldr	r2, [sp, #16]
 80037ca:	b9d8      	cbnz	r0, 8003804 <_vfiprintf_r+0x12c>
 80037cc:	06d1      	lsls	r1, r2, #27
 80037ce:	bf44      	itt	mi
 80037d0:	2320      	movmi	r3, #32
 80037d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d6:	0713      	lsls	r3, r2, #28
 80037d8:	bf44      	itt	mi
 80037da:	232b      	movmi	r3, #43	; 0x2b
 80037dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037e0:	f89a 3000 	ldrb.w	r3, [sl]
 80037e4:	2b2a      	cmp	r3, #42	; 0x2a
 80037e6:	d015      	beq.n	8003814 <_vfiprintf_r+0x13c>
 80037e8:	9a07      	ldr	r2, [sp, #28]
 80037ea:	4654      	mov	r4, sl
 80037ec:	2000      	movs	r0, #0
 80037ee:	f04f 0c0a 	mov.w	ip, #10
 80037f2:	4621      	mov	r1, r4
 80037f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037f8:	3b30      	subs	r3, #48	; 0x30
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	d94e      	bls.n	800389c <_vfiprintf_r+0x1c4>
 80037fe:	b1b0      	cbz	r0, 800382e <_vfiprintf_r+0x156>
 8003800:	9207      	str	r2, [sp, #28]
 8003802:	e014      	b.n	800382e <_vfiprintf_r+0x156>
 8003804:	eba0 0308 	sub.w	r3, r0, r8
 8003808:	fa09 f303 	lsl.w	r3, r9, r3
 800380c:	4313      	orrs	r3, r2
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	46a2      	mov	sl, r4
 8003812:	e7d2      	b.n	80037ba <_vfiprintf_r+0xe2>
 8003814:	9b03      	ldr	r3, [sp, #12]
 8003816:	1d19      	adds	r1, r3, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	9103      	str	r1, [sp, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	bfbb      	ittet	lt
 8003820:	425b      	neglt	r3, r3
 8003822:	f042 0202 	orrlt.w	r2, r2, #2
 8003826:	9307      	strge	r3, [sp, #28]
 8003828:	9307      	strlt	r3, [sp, #28]
 800382a:	bfb8      	it	lt
 800382c:	9204      	strlt	r2, [sp, #16]
 800382e:	7823      	ldrb	r3, [r4, #0]
 8003830:	2b2e      	cmp	r3, #46	; 0x2e
 8003832:	d10c      	bne.n	800384e <_vfiprintf_r+0x176>
 8003834:	7863      	ldrb	r3, [r4, #1]
 8003836:	2b2a      	cmp	r3, #42	; 0x2a
 8003838:	d135      	bne.n	80038a6 <_vfiprintf_r+0x1ce>
 800383a:	9b03      	ldr	r3, [sp, #12]
 800383c:	1d1a      	adds	r2, r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	9203      	str	r2, [sp, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	bfb8      	it	lt
 8003846:	f04f 33ff 	movlt.w	r3, #4294967295
 800384a:	3402      	adds	r4, #2
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003934 <_vfiprintf_r+0x25c>
 8003852:	7821      	ldrb	r1, [r4, #0]
 8003854:	2203      	movs	r2, #3
 8003856:	4650      	mov	r0, sl
 8003858:	f7fc fcca 	bl	80001f0 <memchr>
 800385c:	b140      	cbz	r0, 8003870 <_vfiprintf_r+0x198>
 800385e:	2340      	movs	r3, #64	; 0x40
 8003860:	eba0 000a 	sub.w	r0, r0, sl
 8003864:	fa03 f000 	lsl.w	r0, r3, r0
 8003868:	9b04      	ldr	r3, [sp, #16]
 800386a:	4303      	orrs	r3, r0
 800386c:	3401      	adds	r4, #1
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003874:	482c      	ldr	r0, [pc, #176]	; (8003928 <_vfiprintf_r+0x250>)
 8003876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800387a:	2206      	movs	r2, #6
 800387c:	f7fc fcb8 	bl	80001f0 <memchr>
 8003880:	2800      	cmp	r0, #0
 8003882:	d03f      	beq.n	8003904 <_vfiprintf_r+0x22c>
 8003884:	4b29      	ldr	r3, [pc, #164]	; (800392c <_vfiprintf_r+0x254>)
 8003886:	bb1b      	cbnz	r3, 80038d0 <_vfiprintf_r+0x1f8>
 8003888:	9b03      	ldr	r3, [sp, #12]
 800388a:	3307      	adds	r3, #7
 800388c:	f023 0307 	bic.w	r3, r3, #7
 8003890:	3308      	adds	r3, #8
 8003892:	9303      	str	r3, [sp, #12]
 8003894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003896:	443b      	add	r3, r7
 8003898:	9309      	str	r3, [sp, #36]	; 0x24
 800389a:	e767      	b.n	800376c <_vfiprintf_r+0x94>
 800389c:	fb0c 3202 	mla	r2, ip, r2, r3
 80038a0:	460c      	mov	r4, r1
 80038a2:	2001      	movs	r0, #1
 80038a4:	e7a5      	b.n	80037f2 <_vfiprintf_r+0x11a>
 80038a6:	2300      	movs	r3, #0
 80038a8:	3401      	adds	r4, #1
 80038aa:	9305      	str	r3, [sp, #20]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f04f 0c0a 	mov.w	ip, #10
 80038b2:	4620      	mov	r0, r4
 80038b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038b8:	3a30      	subs	r2, #48	; 0x30
 80038ba:	2a09      	cmp	r2, #9
 80038bc:	d903      	bls.n	80038c6 <_vfiprintf_r+0x1ee>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0c5      	beq.n	800384e <_vfiprintf_r+0x176>
 80038c2:	9105      	str	r1, [sp, #20]
 80038c4:	e7c3      	b.n	800384e <_vfiprintf_r+0x176>
 80038c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ca:	4604      	mov	r4, r0
 80038cc:	2301      	movs	r3, #1
 80038ce:	e7f0      	b.n	80038b2 <_vfiprintf_r+0x1da>
 80038d0:	ab03      	add	r3, sp, #12
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	462a      	mov	r2, r5
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <_vfiprintf_r+0x258>)
 80038d8:	a904      	add	r1, sp, #16
 80038da:	4630      	mov	r0, r6
 80038dc:	f3af 8000 	nop.w
 80038e0:	4607      	mov	r7, r0
 80038e2:	1c78      	adds	r0, r7, #1
 80038e4:	d1d6      	bne.n	8003894 <_vfiprintf_r+0x1bc>
 80038e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038e8:	07d9      	lsls	r1, r3, #31
 80038ea:	d405      	bmi.n	80038f8 <_vfiprintf_r+0x220>
 80038ec:	89ab      	ldrh	r3, [r5, #12]
 80038ee:	059a      	lsls	r2, r3, #22
 80038f0:	d402      	bmi.n	80038f8 <_vfiprintf_r+0x220>
 80038f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038f4:	f7ff fe31 	bl	800355a <__retarget_lock_release_recursive>
 80038f8:	89ab      	ldrh	r3, [r5, #12]
 80038fa:	065b      	lsls	r3, r3, #25
 80038fc:	f53f af12 	bmi.w	8003724 <_vfiprintf_r+0x4c>
 8003900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003902:	e711      	b.n	8003728 <_vfiprintf_r+0x50>
 8003904:	ab03      	add	r3, sp, #12
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	462a      	mov	r2, r5
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <_vfiprintf_r+0x258>)
 800390c:	a904      	add	r1, sp, #16
 800390e:	4630      	mov	r0, r6
 8003910:	f000 f880 	bl	8003a14 <_printf_i>
 8003914:	e7e4      	b.n	80038e0 <_vfiprintf_r+0x208>
 8003916:	bf00      	nop
 8003918:	08004334 	.word	0x08004334
 800391c:	08004354 	.word	0x08004354
 8003920:	08004314 	.word	0x08004314
 8003924:	08004374 	.word	0x08004374
 8003928:	0800437e 	.word	0x0800437e
 800392c:	00000000 	.word	0x00000000
 8003930:	080036b3 	.word	0x080036b3
 8003934:	0800437a 	.word	0x0800437a

08003938 <_printf_common>:
 8003938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800393c:	4616      	mov	r6, r2
 800393e:	4699      	mov	r9, r3
 8003940:	688a      	ldr	r2, [r1, #8]
 8003942:	690b      	ldr	r3, [r1, #16]
 8003944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003948:	4293      	cmp	r3, r2
 800394a:	bfb8      	it	lt
 800394c:	4613      	movlt	r3, r2
 800394e:	6033      	str	r3, [r6, #0]
 8003950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003954:	4607      	mov	r7, r0
 8003956:	460c      	mov	r4, r1
 8003958:	b10a      	cbz	r2, 800395e <_printf_common+0x26>
 800395a:	3301      	adds	r3, #1
 800395c:	6033      	str	r3, [r6, #0]
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	0699      	lsls	r1, r3, #26
 8003962:	bf42      	ittt	mi
 8003964:	6833      	ldrmi	r3, [r6, #0]
 8003966:	3302      	addmi	r3, #2
 8003968:	6033      	strmi	r3, [r6, #0]
 800396a:	6825      	ldr	r5, [r4, #0]
 800396c:	f015 0506 	ands.w	r5, r5, #6
 8003970:	d106      	bne.n	8003980 <_printf_common+0x48>
 8003972:	f104 0a19 	add.w	sl, r4, #25
 8003976:	68e3      	ldr	r3, [r4, #12]
 8003978:	6832      	ldr	r2, [r6, #0]
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	42ab      	cmp	r3, r5
 800397e:	dc26      	bgt.n	80039ce <_printf_common+0x96>
 8003980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003984:	1e13      	subs	r3, r2, #0
 8003986:	6822      	ldr	r2, [r4, #0]
 8003988:	bf18      	it	ne
 800398a:	2301      	movne	r3, #1
 800398c:	0692      	lsls	r2, r2, #26
 800398e:	d42b      	bmi.n	80039e8 <_printf_common+0xb0>
 8003990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003994:	4649      	mov	r1, r9
 8003996:	4638      	mov	r0, r7
 8003998:	47c0      	blx	r8
 800399a:	3001      	adds	r0, #1
 800399c:	d01e      	beq.n	80039dc <_printf_common+0xa4>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	68e5      	ldr	r5, [r4, #12]
 80039a2:	6832      	ldr	r2, [r6, #0]
 80039a4:	f003 0306 	and.w	r3, r3, #6
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	bf08      	it	eq
 80039ac:	1aad      	subeq	r5, r5, r2
 80039ae:	68a3      	ldr	r3, [r4, #8]
 80039b0:	6922      	ldr	r2, [r4, #16]
 80039b2:	bf0c      	ite	eq
 80039b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b8:	2500      	movne	r5, #0
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bfc4      	itt	gt
 80039be:	1a9b      	subgt	r3, r3, r2
 80039c0:	18ed      	addgt	r5, r5, r3
 80039c2:	2600      	movs	r6, #0
 80039c4:	341a      	adds	r4, #26
 80039c6:	42b5      	cmp	r5, r6
 80039c8:	d11a      	bne.n	8003a00 <_printf_common+0xc8>
 80039ca:	2000      	movs	r0, #0
 80039cc:	e008      	b.n	80039e0 <_printf_common+0xa8>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4652      	mov	r2, sl
 80039d2:	4649      	mov	r1, r9
 80039d4:	4638      	mov	r0, r7
 80039d6:	47c0      	blx	r8
 80039d8:	3001      	adds	r0, #1
 80039da:	d103      	bne.n	80039e4 <_printf_common+0xac>
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	3501      	adds	r5, #1
 80039e6:	e7c6      	b.n	8003976 <_printf_common+0x3e>
 80039e8:	18e1      	adds	r1, r4, r3
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	2030      	movs	r0, #48	; 0x30
 80039ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039f2:	4422      	add	r2, r4
 80039f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039fc:	3302      	adds	r3, #2
 80039fe:	e7c7      	b.n	8003990 <_printf_common+0x58>
 8003a00:	2301      	movs	r3, #1
 8003a02:	4622      	mov	r2, r4
 8003a04:	4649      	mov	r1, r9
 8003a06:	4638      	mov	r0, r7
 8003a08:	47c0      	blx	r8
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d0e6      	beq.n	80039dc <_printf_common+0xa4>
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7d9      	b.n	80039c6 <_printf_common+0x8e>
	...

08003a14 <_printf_i>:
 8003a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	7e0f      	ldrb	r7, [r1, #24]
 8003a1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a1c:	2f78      	cmp	r7, #120	; 0x78
 8003a1e:	4691      	mov	r9, r2
 8003a20:	4680      	mov	r8, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	469a      	mov	sl, r3
 8003a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a2a:	d807      	bhi.n	8003a3c <_printf_i+0x28>
 8003a2c:	2f62      	cmp	r7, #98	; 0x62
 8003a2e:	d80a      	bhi.n	8003a46 <_printf_i+0x32>
 8003a30:	2f00      	cmp	r7, #0
 8003a32:	f000 80d8 	beq.w	8003be6 <_printf_i+0x1d2>
 8003a36:	2f58      	cmp	r7, #88	; 0x58
 8003a38:	f000 80a3 	beq.w	8003b82 <_printf_i+0x16e>
 8003a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a44:	e03a      	b.n	8003abc <_printf_i+0xa8>
 8003a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a4a:	2b15      	cmp	r3, #21
 8003a4c:	d8f6      	bhi.n	8003a3c <_printf_i+0x28>
 8003a4e:	a101      	add	r1, pc, #4	; (adr r1, 8003a54 <_printf_i+0x40>)
 8003a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a54:	08003aad 	.word	0x08003aad
 8003a58:	08003ac1 	.word	0x08003ac1
 8003a5c:	08003a3d 	.word	0x08003a3d
 8003a60:	08003a3d 	.word	0x08003a3d
 8003a64:	08003a3d 	.word	0x08003a3d
 8003a68:	08003a3d 	.word	0x08003a3d
 8003a6c:	08003ac1 	.word	0x08003ac1
 8003a70:	08003a3d 	.word	0x08003a3d
 8003a74:	08003a3d 	.word	0x08003a3d
 8003a78:	08003a3d 	.word	0x08003a3d
 8003a7c:	08003a3d 	.word	0x08003a3d
 8003a80:	08003bcd 	.word	0x08003bcd
 8003a84:	08003af1 	.word	0x08003af1
 8003a88:	08003baf 	.word	0x08003baf
 8003a8c:	08003a3d 	.word	0x08003a3d
 8003a90:	08003a3d 	.word	0x08003a3d
 8003a94:	08003bef 	.word	0x08003bef
 8003a98:	08003a3d 	.word	0x08003a3d
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003a3d 	.word	0x08003a3d
 8003aa4:	08003a3d 	.word	0x08003a3d
 8003aa8:	08003bb7 	.word	0x08003bb7
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	602a      	str	r2, [r5, #0]
 8003ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0a3      	b.n	8003c08 <_printf_i+0x1f4>
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	6829      	ldr	r1, [r5, #0]
 8003ac4:	0606      	lsls	r6, r0, #24
 8003ac6:	f101 0304 	add.w	r3, r1, #4
 8003aca:	d50a      	bpl.n	8003ae2 <_printf_i+0xce>
 8003acc:	680e      	ldr	r6, [r1, #0]
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	2e00      	cmp	r6, #0
 8003ad2:	da03      	bge.n	8003adc <_printf_i+0xc8>
 8003ad4:	232d      	movs	r3, #45	; 0x2d
 8003ad6:	4276      	negs	r6, r6
 8003ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003adc:	485e      	ldr	r0, [pc, #376]	; (8003c58 <_printf_i+0x244>)
 8003ade:	230a      	movs	r3, #10
 8003ae0:	e019      	b.n	8003b16 <_printf_i+0x102>
 8003ae2:	680e      	ldr	r6, [r1, #0]
 8003ae4:	602b      	str	r3, [r5, #0]
 8003ae6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aea:	bf18      	it	ne
 8003aec:	b236      	sxthne	r6, r6
 8003aee:	e7ef      	b.n	8003ad0 <_printf_i+0xbc>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	6820      	ldr	r0, [r4, #0]
 8003af4:	1d19      	adds	r1, r3, #4
 8003af6:	6029      	str	r1, [r5, #0]
 8003af8:	0601      	lsls	r1, r0, #24
 8003afa:	d501      	bpl.n	8003b00 <_printf_i+0xec>
 8003afc:	681e      	ldr	r6, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <_printf_i+0xf2>
 8003b00:	0646      	lsls	r6, r0, #25
 8003b02:	d5fb      	bpl.n	8003afc <_printf_i+0xe8>
 8003b04:	881e      	ldrh	r6, [r3, #0]
 8003b06:	4854      	ldr	r0, [pc, #336]	; (8003c58 <_printf_i+0x244>)
 8003b08:	2f6f      	cmp	r7, #111	; 0x6f
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2308      	moveq	r3, #8
 8003b0e:	230a      	movne	r3, #10
 8003b10:	2100      	movs	r1, #0
 8003b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b16:	6865      	ldr	r5, [r4, #4]
 8003b18:	60a5      	str	r5, [r4, #8]
 8003b1a:	2d00      	cmp	r5, #0
 8003b1c:	bfa2      	ittt	ge
 8003b1e:	6821      	ldrge	r1, [r4, #0]
 8003b20:	f021 0104 	bicge.w	r1, r1, #4
 8003b24:	6021      	strge	r1, [r4, #0]
 8003b26:	b90e      	cbnz	r6, 8003b2c <_printf_i+0x118>
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	d04d      	beq.n	8003bc8 <_printf_i+0x1b4>
 8003b2c:	4615      	mov	r5, r2
 8003b2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b32:	fb03 6711 	mls	r7, r3, r1, r6
 8003b36:	5dc7      	ldrb	r7, [r0, r7]
 8003b38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b3c:	4637      	mov	r7, r6
 8003b3e:	42bb      	cmp	r3, r7
 8003b40:	460e      	mov	r6, r1
 8003b42:	d9f4      	bls.n	8003b2e <_printf_i+0x11a>
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d10b      	bne.n	8003b60 <_printf_i+0x14c>
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	07de      	lsls	r6, r3, #31
 8003b4c:	d508      	bpl.n	8003b60 <_printf_i+0x14c>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	6861      	ldr	r1, [r4, #4]
 8003b52:	4299      	cmp	r1, r3
 8003b54:	bfde      	ittt	le
 8003b56:	2330      	movle	r3, #48	; 0x30
 8003b58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b60:	1b52      	subs	r2, r2, r5
 8003b62:	6122      	str	r2, [r4, #16]
 8003b64:	f8cd a000 	str.w	sl, [sp]
 8003b68:	464b      	mov	r3, r9
 8003b6a:	aa03      	add	r2, sp, #12
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	4640      	mov	r0, r8
 8003b70:	f7ff fee2 	bl	8003938 <_printf_common>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d14c      	bne.n	8003c12 <_printf_i+0x1fe>
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	b004      	add	sp, #16
 8003b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b82:	4835      	ldr	r0, [pc, #212]	; (8003c58 <_printf_i+0x244>)
 8003b84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b88:	6829      	ldr	r1, [r5, #0]
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b90:	6029      	str	r1, [r5, #0]
 8003b92:	061d      	lsls	r5, r3, #24
 8003b94:	d514      	bpl.n	8003bc0 <_printf_i+0x1ac>
 8003b96:	07df      	lsls	r7, r3, #31
 8003b98:	bf44      	itt	mi
 8003b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b9e:	6023      	strmi	r3, [r4, #0]
 8003ba0:	b91e      	cbnz	r6, 8003baa <_printf_i+0x196>
 8003ba2:	6823      	ldr	r3, [r4, #0]
 8003ba4:	f023 0320 	bic.w	r3, r3, #32
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	2310      	movs	r3, #16
 8003bac:	e7b0      	b.n	8003b10 <_printf_i+0xfc>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	f043 0320 	orr.w	r3, r3, #32
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	2378      	movs	r3, #120	; 0x78
 8003bb8:	4828      	ldr	r0, [pc, #160]	; (8003c5c <_printf_i+0x248>)
 8003bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bbe:	e7e3      	b.n	8003b88 <_printf_i+0x174>
 8003bc0:	0659      	lsls	r1, r3, #25
 8003bc2:	bf48      	it	mi
 8003bc4:	b2b6      	uxthmi	r6, r6
 8003bc6:	e7e6      	b.n	8003b96 <_printf_i+0x182>
 8003bc8:	4615      	mov	r5, r2
 8003bca:	e7bb      	b.n	8003b44 <_printf_i+0x130>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	6826      	ldr	r6, [r4, #0]
 8003bd0:	6961      	ldr	r1, [r4, #20]
 8003bd2:	1d18      	adds	r0, r3, #4
 8003bd4:	6028      	str	r0, [r5, #0]
 8003bd6:	0635      	lsls	r5, r6, #24
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	d501      	bpl.n	8003be0 <_printf_i+0x1cc>
 8003bdc:	6019      	str	r1, [r3, #0]
 8003bde:	e002      	b.n	8003be6 <_printf_i+0x1d2>
 8003be0:	0670      	lsls	r0, r6, #25
 8003be2:	d5fb      	bpl.n	8003bdc <_printf_i+0x1c8>
 8003be4:	8019      	strh	r1, [r3, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	6123      	str	r3, [r4, #16]
 8003bea:	4615      	mov	r5, r2
 8003bec:	e7ba      	b.n	8003b64 <_printf_i+0x150>
 8003bee:	682b      	ldr	r3, [r5, #0]
 8003bf0:	1d1a      	adds	r2, r3, #4
 8003bf2:	602a      	str	r2, [r5, #0]
 8003bf4:	681d      	ldr	r5, [r3, #0]
 8003bf6:	6862      	ldr	r2, [r4, #4]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	f7fc faf8 	bl	80001f0 <memchr>
 8003c00:	b108      	cbz	r0, 8003c06 <_printf_i+0x1f2>
 8003c02:	1b40      	subs	r0, r0, r5
 8003c04:	6060      	str	r0, [r4, #4]
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	6123      	str	r3, [r4, #16]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c10:	e7a8      	b.n	8003b64 <_printf_i+0x150>
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	462a      	mov	r2, r5
 8003c16:	4649      	mov	r1, r9
 8003c18:	4640      	mov	r0, r8
 8003c1a:	47d0      	blx	sl
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d0ab      	beq.n	8003b78 <_printf_i+0x164>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	079b      	lsls	r3, r3, #30
 8003c24:	d413      	bmi.n	8003c4e <_printf_i+0x23a>
 8003c26:	68e0      	ldr	r0, [r4, #12]
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	4298      	cmp	r0, r3
 8003c2c:	bfb8      	it	lt
 8003c2e:	4618      	movlt	r0, r3
 8003c30:	e7a4      	b.n	8003b7c <_printf_i+0x168>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4632      	mov	r2, r6
 8003c36:	4649      	mov	r1, r9
 8003c38:	4640      	mov	r0, r8
 8003c3a:	47d0      	blx	sl
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d09b      	beq.n	8003b78 <_printf_i+0x164>
 8003c40:	3501      	adds	r5, #1
 8003c42:	68e3      	ldr	r3, [r4, #12]
 8003c44:	9903      	ldr	r1, [sp, #12]
 8003c46:	1a5b      	subs	r3, r3, r1
 8003c48:	42ab      	cmp	r3, r5
 8003c4a:	dcf2      	bgt.n	8003c32 <_printf_i+0x21e>
 8003c4c:	e7eb      	b.n	8003c26 <_printf_i+0x212>
 8003c4e:	2500      	movs	r5, #0
 8003c50:	f104 0619 	add.w	r6, r4, #25
 8003c54:	e7f5      	b.n	8003c42 <_printf_i+0x22e>
 8003c56:	bf00      	nop
 8003c58:	08004385 	.word	0x08004385
 8003c5c:	08004396 	.word	0x08004396

08003c60 <_sbrk_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d06      	ldr	r5, [pc, #24]	; (8003c7c <_sbrk_r+0x1c>)
 8003c64:	2300      	movs	r3, #0
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	f7fd f814 	bl	8000c98 <_sbrk>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_sbrk_r+0x1a>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_sbrk_r+0x1a>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	2000017c 	.word	0x2000017c

08003c80 <__sread>:
 8003c80:	b510      	push	{r4, lr}
 8003c82:	460c      	mov	r4, r1
 8003c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c88:	f000 fab2 	bl	80041f0 <_read_r>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	bfab      	itete	ge
 8003c90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c92:	89a3      	ldrhlt	r3, [r4, #12]
 8003c94:	181b      	addge	r3, r3, r0
 8003c96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c9a:	bfac      	ite	ge
 8003c9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c9e:	81a3      	strhlt	r3, [r4, #12]
 8003ca0:	bd10      	pop	{r4, pc}

08003ca2 <__swrite>:
 8003ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca6:	461f      	mov	r7, r3
 8003ca8:	898b      	ldrh	r3, [r1, #12]
 8003caa:	05db      	lsls	r3, r3, #23
 8003cac:	4605      	mov	r5, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	4616      	mov	r6, r2
 8003cb2:	d505      	bpl.n	8003cc0 <__swrite+0x1e>
 8003cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb8:	2302      	movs	r3, #2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f000 f9c8 	bl	8004050 <_lseek_r>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cca:	81a3      	strh	r3, [r4, #12]
 8003ccc:	4632      	mov	r2, r6
 8003cce:	463b      	mov	r3, r7
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd6:	f000 b869 	b.w	8003dac <_write_r>

08003cda <__sseek>:
 8003cda:	b510      	push	{r4, lr}
 8003cdc:	460c      	mov	r4, r1
 8003cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce2:	f000 f9b5 	bl	8004050 <_lseek_r>
 8003ce6:	1c43      	adds	r3, r0, #1
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	bf15      	itete	ne
 8003cec:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cf6:	81a3      	strheq	r3, [r4, #12]
 8003cf8:	bf18      	it	ne
 8003cfa:	81a3      	strhne	r3, [r4, #12]
 8003cfc:	bd10      	pop	{r4, pc}

08003cfe <__sclose>:
 8003cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d02:	f000 b8d3 	b.w	8003eac <_close_r>
	...

08003d08 <__swbuf_r>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	460e      	mov	r6, r1
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	4605      	mov	r5, r0
 8003d10:	b118      	cbz	r0, 8003d1a <__swbuf_r+0x12>
 8003d12:	6983      	ldr	r3, [r0, #24]
 8003d14:	b90b      	cbnz	r3, 8003d1a <__swbuf_r+0x12>
 8003d16:	f7ff fb81 	bl	800341c <__sinit>
 8003d1a:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <__swbuf_r+0x98>)
 8003d1c:	429c      	cmp	r4, r3
 8003d1e:	d12b      	bne.n	8003d78 <__swbuf_r+0x70>
 8003d20:	686c      	ldr	r4, [r5, #4]
 8003d22:	69a3      	ldr	r3, [r4, #24]
 8003d24:	60a3      	str	r3, [r4, #8]
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	071a      	lsls	r2, r3, #28
 8003d2a:	d52f      	bpl.n	8003d8c <__swbuf_r+0x84>
 8003d2c:	6923      	ldr	r3, [r4, #16]
 8003d2e:	b36b      	cbz	r3, 8003d8c <__swbuf_r+0x84>
 8003d30:	6923      	ldr	r3, [r4, #16]
 8003d32:	6820      	ldr	r0, [r4, #0]
 8003d34:	1ac0      	subs	r0, r0, r3
 8003d36:	6963      	ldr	r3, [r4, #20]
 8003d38:	b2f6      	uxtb	r6, r6
 8003d3a:	4283      	cmp	r3, r0
 8003d3c:	4637      	mov	r7, r6
 8003d3e:	dc04      	bgt.n	8003d4a <__swbuf_r+0x42>
 8003d40:	4621      	mov	r1, r4
 8003d42:	4628      	mov	r0, r5
 8003d44:	f000 f948 	bl	8003fd8 <_fflush_r>
 8003d48:	bb30      	cbnz	r0, 8003d98 <__swbuf_r+0x90>
 8003d4a:	68a3      	ldr	r3, [r4, #8]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	60a3      	str	r3, [r4, #8]
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	6022      	str	r2, [r4, #0]
 8003d56:	701e      	strb	r6, [r3, #0]
 8003d58:	6963      	ldr	r3, [r4, #20]
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	4283      	cmp	r3, r0
 8003d5e:	d004      	beq.n	8003d6a <__swbuf_r+0x62>
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	07db      	lsls	r3, r3, #31
 8003d64:	d506      	bpl.n	8003d74 <__swbuf_r+0x6c>
 8003d66:	2e0a      	cmp	r6, #10
 8003d68:	d104      	bne.n	8003d74 <__swbuf_r+0x6c>
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	f000 f933 	bl	8003fd8 <_fflush_r>
 8003d72:	b988      	cbnz	r0, 8003d98 <__swbuf_r+0x90>
 8003d74:	4638      	mov	r0, r7
 8003d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <__swbuf_r+0x9c>)
 8003d7a:	429c      	cmp	r4, r3
 8003d7c:	d101      	bne.n	8003d82 <__swbuf_r+0x7a>
 8003d7e:	68ac      	ldr	r4, [r5, #8]
 8003d80:	e7cf      	b.n	8003d22 <__swbuf_r+0x1a>
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <__swbuf_r+0xa0>)
 8003d84:	429c      	cmp	r4, r3
 8003d86:	bf08      	it	eq
 8003d88:	68ec      	ldreq	r4, [r5, #12]
 8003d8a:	e7ca      	b.n	8003d22 <__swbuf_r+0x1a>
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 f81e 	bl	8003dd0 <__swsetup_r>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d0cb      	beq.n	8003d30 <__swbuf_r+0x28>
 8003d98:	f04f 37ff 	mov.w	r7, #4294967295
 8003d9c:	e7ea      	b.n	8003d74 <__swbuf_r+0x6c>
 8003d9e:	bf00      	nop
 8003da0:	08004334 	.word	0x08004334
 8003da4:	08004354 	.word	0x08004354
 8003da8:	08004314 	.word	0x08004314

08003dac <_write_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	4d07      	ldr	r5, [pc, #28]	; (8003dcc <_write_r+0x20>)
 8003db0:	4604      	mov	r4, r0
 8003db2:	4608      	mov	r0, r1
 8003db4:	4611      	mov	r1, r2
 8003db6:	2200      	movs	r2, #0
 8003db8:	602a      	str	r2, [r5, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f7fc ff1b 	bl	8000bf6 <_write>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d102      	bne.n	8003dca <_write_r+0x1e>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b103      	cbz	r3, 8003dca <_write_r+0x1e>
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	2000017c 	.word	0x2000017c

08003dd0 <__swsetup_r>:
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <__swsetup_r+0xcc>)
 8003dd2:	b570      	push	{r4, r5, r6, lr}
 8003dd4:	681d      	ldr	r5, [r3, #0]
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	b125      	cbz	r5, 8003de6 <__swsetup_r+0x16>
 8003ddc:	69ab      	ldr	r3, [r5, #24]
 8003dde:	b913      	cbnz	r3, 8003de6 <__swsetup_r+0x16>
 8003de0:	4628      	mov	r0, r5
 8003de2:	f7ff fb1b 	bl	800341c <__sinit>
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <__swsetup_r+0xd0>)
 8003de8:	429c      	cmp	r4, r3
 8003dea:	d10f      	bne.n	8003e0c <__swsetup_r+0x3c>
 8003dec:	686c      	ldr	r4, [r5, #4]
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003df4:	0719      	lsls	r1, r3, #28
 8003df6:	d42c      	bmi.n	8003e52 <__swsetup_r+0x82>
 8003df8:	06dd      	lsls	r5, r3, #27
 8003dfa:	d411      	bmi.n	8003e20 <__swsetup_r+0x50>
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	6033      	str	r3, [r6, #0]
 8003e00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e04:	81a3      	strh	r3, [r4, #12]
 8003e06:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0a:	e03e      	b.n	8003e8a <__swsetup_r+0xba>
 8003e0c:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <__swsetup_r+0xd4>)
 8003e0e:	429c      	cmp	r4, r3
 8003e10:	d101      	bne.n	8003e16 <__swsetup_r+0x46>
 8003e12:	68ac      	ldr	r4, [r5, #8]
 8003e14:	e7eb      	b.n	8003dee <__swsetup_r+0x1e>
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <__swsetup_r+0xd8>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	bf08      	it	eq
 8003e1c:	68ec      	ldreq	r4, [r5, #12]
 8003e1e:	e7e6      	b.n	8003dee <__swsetup_r+0x1e>
 8003e20:	0758      	lsls	r0, r3, #29
 8003e22:	d512      	bpl.n	8003e4a <__swsetup_r+0x7a>
 8003e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e26:	b141      	cbz	r1, 8003e3a <__swsetup_r+0x6a>
 8003e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e2c:	4299      	cmp	r1, r3
 8003e2e:	d002      	beq.n	8003e36 <__swsetup_r+0x66>
 8003e30:	4630      	mov	r0, r6
 8003e32:	f000 f991 	bl	8004158 <_free_r>
 8003e36:	2300      	movs	r3, #0
 8003e38:	6363      	str	r3, [r4, #52]	; 0x34
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e40:	81a3      	strh	r3, [r4, #12]
 8003e42:	2300      	movs	r3, #0
 8003e44:	6063      	str	r3, [r4, #4]
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f043 0308 	orr.w	r3, r3, #8
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	6923      	ldr	r3, [r4, #16]
 8003e54:	b94b      	cbnz	r3, 8003e6a <__swsetup_r+0x9a>
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e60:	d003      	beq.n	8003e6a <__swsetup_r+0x9a>
 8003e62:	4621      	mov	r1, r4
 8003e64:	4630      	mov	r0, r6
 8003e66:	f000 f92b 	bl	80040c0 <__smakebuf_r>
 8003e6a:	89a0      	ldrh	r0, [r4, #12]
 8003e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e70:	f010 0301 	ands.w	r3, r0, #1
 8003e74:	d00a      	beq.n	8003e8c <__swsetup_r+0xbc>
 8003e76:	2300      	movs	r3, #0
 8003e78:	60a3      	str	r3, [r4, #8]
 8003e7a:	6963      	ldr	r3, [r4, #20]
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	61a3      	str	r3, [r4, #24]
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	b943      	cbnz	r3, 8003e96 <__swsetup_r+0xc6>
 8003e84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e88:	d1ba      	bne.n	8003e00 <__swsetup_r+0x30>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	0781      	lsls	r1, r0, #30
 8003e8e:	bf58      	it	pl
 8003e90:	6963      	ldrpl	r3, [r4, #20]
 8003e92:	60a3      	str	r3, [r4, #8]
 8003e94:	e7f4      	b.n	8003e80 <__swsetup_r+0xb0>
 8003e96:	2000      	movs	r0, #0
 8003e98:	e7f7      	b.n	8003e8a <__swsetup_r+0xba>
 8003e9a:	bf00      	nop
 8003e9c:	2000000c 	.word	0x2000000c
 8003ea0:	08004334 	.word	0x08004334
 8003ea4:	08004354 	.word	0x08004354
 8003ea8:	08004314 	.word	0x08004314

08003eac <_close_r>:
 8003eac:	b538      	push	{r3, r4, r5, lr}
 8003eae:	4d06      	ldr	r5, [pc, #24]	; (8003ec8 <_close_r+0x1c>)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4608      	mov	r0, r1
 8003eb6:	602b      	str	r3, [r5, #0]
 8003eb8:	f7fc feb9 	bl	8000c2e <_close>
 8003ebc:	1c43      	adds	r3, r0, #1
 8003ebe:	d102      	bne.n	8003ec6 <_close_r+0x1a>
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	b103      	cbz	r3, 8003ec6 <_close_r+0x1a>
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
 8003ec8:	2000017c 	.word	0x2000017c

08003ecc <__sflush_r>:
 8003ecc:	898a      	ldrh	r2, [r1, #12]
 8003ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed2:	4605      	mov	r5, r0
 8003ed4:	0710      	lsls	r0, r2, #28
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	d458      	bmi.n	8003f8c <__sflush_r+0xc0>
 8003eda:	684b      	ldr	r3, [r1, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	dc05      	bgt.n	8003eec <__sflush_r+0x20>
 8003ee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dc02      	bgt.n	8003eec <__sflush_r+0x20>
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eee:	2e00      	cmp	r6, #0
 8003ef0:	d0f9      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ef8:	682f      	ldr	r7, [r5, #0]
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	d032      	beq.n	8003f64 <__sflush_r+0x98>
 8003efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	075a      	lsls	r2, r3, #29
 8003f04:	d505      	bpl.n	8003f12 <__sflush_r+0x46>
 8003f06:	6863      	ldr	r3, [r4, #4]
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f0c:	b10b      	cbz	r3, 8003f12 <__sflush_r+0x46>
 8003f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f10:	1ac0      	subs	r0, r0, r3
 8003f12:	2300      	movs	r3, #0
 8003f14:	4602      	mov	r2, r0
 8003f16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f18:	6a21      	ldr	r1, [r4, #32]
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	47b0      	blx	r6
 8003f1e:	1c43      	adds	r3, r0, #1
 8003f20:	89a3      	ldrh	r3, [r4, #12]
 8003f22:	d106      	bne.n	8003f32 <__sflush_r+0x66>
 8003f24:	6829      	ldr	r1, [r5, #0]
 8003f26:	291d      	cmp	r1, #29
 8003f28:	d82c      	bhi.n	8003f84 <__sflush_r+0xb8>
 8003f2a:	4a2a      	ldr	r2, [pc, #168]	; (8003fd4 <__sflush_r+0x108>)
 8003f2c:	40ca      	lsrs	r2, r1
 8003f2e:	07d6      	lsls	r6, r2, #31
 8003f30:	d528      	bpl.n	8003f84 <__sflush_r+0xb8>
 8003f32:	2200      	movs	r2, #0
 8003f34:	6062      	str	r2, [r4, #4]
 8003f36:	04d9      	lsls	r1, r3, #19
 8003f38:	6922      	ldr	r2, [r4, #16]
 8003f3a:	6022      	str	r2, [r4, #0]
 8003f3c:	d504      	bpl.n	8003f48 <__sflush_r+0x7c>
 8003f3e:	1c42      	adds	r2, r0, #1
 8003f40:	d101      	bne.n	8003f46 <__sflush_r+0x7a>
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	b903      	cbnz	r3, 8003f48 <__sflush_r+0x7c>
 8003f46:	6560      	str	r0, [r4, #84]	; 0x54
 8003f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f4a:	602f      	str	r7, [r5, #0]
 8003f4c:	2900      	cmp	r1, #0
 8003f4e:	d0ca      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f54:	4299      	cmp	r1, r3
 8003f56:	d002      	beq.n	8003f5e <__sflush_r+0x92>
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 f8fd 	bl	8004158 <_free_r>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	6360      	str	r0, [r4, #52]	; 0x34
 8003f62:	e7c1      	b.n	8003ee8 <__sflush_r+0x1c>
 8003f64:	6a21      	ldr	r1, [r4, #32]
 8003f66:	2301      	movs	r3, #1
 8003f68:	4628      	mov	r0, r5
 8003f6a:	47b0      	blx	r6
 8003f6c:	1c41      	adds	r1, r0, #1
 8003f6e:	d1c7      	bne.n	8003f00 <__sflush_r+0x34>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0c4      	beq.n	8003f00 <__sflush_r+0x34>
 8003f76:	2b1d      	cmp	r3, #29
 8003f78:	d001      	beq.n	8003f7e <__sflush_r+0xb2>
 8003f7a:	2b16      	cmp	r3, #22
 8003f7c:	d101      	bne.n	8003f82 <__sflush_r+0xb6>
 8003f7e:	602f      	str	r7, [r5, #0]
 8003f80:	e7b1      	b.n	8003ee6 <__sflush_r+0x1a>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f88:	81a3      	strh	r3, [r4, #12]
 8003f8a:	e7ad      	b.n	8003ee8 <__sflush_r+0x1c>
 8003f8c:	690f      	ldr	r7, [r1, #16]
 8003f8e:	2f00      	cmp	r7, #0
 8003f90:	d0a9      	beq.n	8003ee6 <__sflush_r+0x1a>
 8003f92:	0793      	lsls	r3, r2, #30
 8003f94:	680e      	ldr	r6, [r1, #0]
 8003f96:	bf08      	it	eq
 8003f98:	694b      	ldreq	r3, [r1, #20]
 8003f9a:	600f      	str	r7, [r1, #0]
 8003f9c:	bf18      	it	ne
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	eba6 0807 	sub.w	r8, r6, r7
 8003fa4:	608b      	str	r3, [r1, #8]
 8003fa6:	f1b8 0f00 	cmp.w	r8, #0
 8003faa:	dd9c      	ble.n	8003ee6 <__sflush_r+0x1a>
 8003fac:	6a21      	ldr	r1, [r4, #32]
 8003fae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fb0:	4643      	mov	r3, r8
 8003fb2:	463a      	mov	r2, r7
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b0      	blx	r6
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	dc06      	bgt.n	8003fca <__sflush_r+0xfe>
 8003fbc:	89a3      	ldrh	r3, [r4, #12]
 8003fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc2:	81a3      	strh	r3, [r4, #12]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	e78e      	b.n	8003ee8 <__sflush_r+0x1c>
 8003fca:	4407      	add	r7, r0
 8003fcc:	eba8 0800 	sub.w	r8, r8, r0
 8003fd0:	e7e9      	b.n	8003fa6 <__sflush_r+0xda>
 8003fd2:	bf00      	nop
 8003fd4:	20400001 	.word	0x20400001

08003fd8 <_fflush_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	690b      	ldr	r3, [r1, #16]
 8003fdc:	4605      	mov	r5, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	b913      	cbnz	r3, 8003fe8 <_fflush_r+0x10>
 8003fe2:	2500      	movs	r5, #0
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	b118      	cbz	r0, 8003ff2 <_fflush_r+0x1a>
 8003fea:	6983      	ldr	r3, [r0, #24]
 8003fec:	b90b      	cbnz	r3, 8003ff2 <_fflush_r+0x1a>
 8003fee:	f7ff fa15 	bl	800341c <__sinit>
 8003ff2:	4b14      	ldr	r3, [pc, #80]	; (8004044 <_fflush_r+0x6c>)
 8003ff4:	429c      	cmp	r4, r3
 8003ff6:	d11b      	bne.n	8004030 <_fflush_r+0x58>
 8003ff8:	686c      	ldr	r4, [r5, #4]
 8003ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0ef      	beq.n	8003fe2 <_fflush_r+0xa>
 8004002:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004004:	07d0      	lsls	r0, r2, #31
 8004006:	d404      	bmi.n	8004012 <_fflush_r+0x3a>
 8004008:	0599      	lsls	r1, r3, #22
 800400a:	d402      	bmi.n	8004012 <_fflush_r+0x3a>
 800400c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800400e:	f7ff faa3 	bl	8003558 <__retarget_lock_acquire_recursive>
 8004012:	4628      	mov	r0, r5
 8004014:	4621      	mov	r1, r4
 8004016:	f7ff ff59 	bl	8003ecc <__sflush_r>
 800401a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800401c:	07da      	lsls	r2, r3, #31
 800401e:	4605      	mov	r5, r0
 8004020:	d4e0      	bmi.n	8003fe4 <_fflush_r+0xc>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	059b      	lsls	r3, r3, #22
 8004026:	d4dd      	bmi.n	8003fe4 <_fflush_r+0xc>
 8004028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800402a:	f7ff fa96 	bl	800355a <__retarget_lock_release_recursive>
 800402e:	e7d9      	b.n	8003fe4 <_fflush_r+0xc>
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <_fflush_r+0x70>)
 8004032:	429c      	cmp	r4, r3
 8004034:	d101      	bne.n	800403a <_fflush_r+0x62>
 8004036:	68ac      	ldr	r4, [r5, #8]
 8004038:	e7df      	b.n	8003ffa <_fflush_r+0x22>
 800403a:	4b04      	ldr	r3, [pc, #16]	; (800404c <_fflush_r+0x74>)
 800403c:	429c      	cmp	r4, r3
 800403e:	bf08      	it	eq
 8004040:	68ec      	ldreq	r4, [r5, #12]
 8004042:	e7da      	b.n	8003ffa <_fflush_r+0x22>
 8004044:	08004334 	.word	0x08004334
 8004048:	08004354 	.word	0x08004354
 800404c:	08004314 	.word	0x08004314

08004050 <_lseek_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d07      	ldr	r5, [pc, #28]	; (8004070 <_lseek_r+0x20>)
 8004054:	4604      	mov	r4, r0
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	2200      	movs	r2, #0
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f7fc fe0c 	bl	8000c7c <_lseek>
 8004064:	1c43      	adds	r3, r0, #1
 8004066:	d102      	bne.n	800406e <_lseek_r+0x1e>
 8004068:	682b      	ldr	r3, [r5, #0]
 800406a:	b103      	cbz	r3, 800406e <_lseek_r+0x1e>
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	2000017c 	.word	0x2000017c

08004074 <__swhatbuf_r>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	460e      	mov	r6, r1
 8004078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407c:	2900      	cmp	r1, #0
 800407e:	b096      	sub	sp, #88	; 0x58
 8004080:	4614      	mov	r4, r2
 8004082:	461d      	mov	r5, r3
 8004084:	da08      	bge.n	8004098 <__swhatbuf_r+0x24>
 8004086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	061a      	lsls	r2, r3, #24
 8004090:	d410      	bmi.n	80040b4 <__swhatbuf_r+0x40>
 8004092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004096:	e00e      	b.n	80040b6 <__swhatbuf_r+0x42>
 8004098:	466a      	mov	r2, sp
 800409a:	f000 f8bb 	bl	8004214 <_fstat_r>
 800409e:	2800      	cmp	r0, #0
 80040a0:	dbf1      	blt.n	8004086 <__swhatbuf_r+0x12>
 80040a2:	9a01      	ldr	r2, [sp, #4]
 80040a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80040a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80040ac:	425a      	negs	r2, r3
 80040ae:	415a      	adcs	r2, r3
 80040b0:	602a      	str	r2, [r5, #0]
 80040b2:	e7ee      	b.n	8004092 <__swhatbuf_r+0x1e>
 80040b4:	2340      	movs	r3, #64	; 0x40
 80040b6:	2000      	movs	r0, #0
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	b016      	add	sp, #88	; 0x58
 80040bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080040c0 <__smakebuf_r>:
 80040c0:	898b      	ldrh	r3, [r1, #12]
 80040c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80040c4:	079d      	lsls	r5, r3, #30
 80040c6:	4606      	mov	r6, r0
 80040c8:	460c      	mov	r4, r1
 80040ca:	d507      	bpl.n	80040dc <__smakebuf_r+0x1c>
 80040cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	2301      	movs	r3, #1
 80040d6:	6163      	str	r3, [r4, #20]
 80040d8:	b002      	add	sp, #8
 80040da:	bd70      	pop	{r4, r5, r6, pc}
 80040dc:	ab01      	add	r3, sp, #4
 80040de:	466a      	mov	r2, sp
 80040e0:	f7ff ffc8 	bl	8004074 <__swhatbuf_r>
 80040e4:	9900      	ldr	r1, [sp, #0]
 80040e6:	4605      	mov	r5, r0
 80040e8:	4630      	mov	r0, r6
 80040ea:	f7ff fa57 	bl	800359c <_malloc_r>
 80040ee:	b948      	cbnz	r0, 8004104 <__smakebuf_r+0x44>
 80040f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f4:	059a      	lsls	r2, r3, #22
 80040f6:	d4ef      	bmi.n	80040d8 <__smakebuf_r+0x18>
 80040f8:	f023 0303 	bic.w	r3, r3, #3
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	e7e3      	b.n	80040cc <__smakebuf_r+0xc>
 8004104:	4b0d      	ldr	r3, [pc, #52]	; (800413c <__smakebuf_r+0x7c>)
 8004106:	62b3      	str	r3, [r6, #40]	; 0x28
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	6020      	str	r0, [r4, #0]
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	9b00      	ldr	r3, [sp, #0]
 8004114:	6163      	str	r3, [r4, #20]
 8004116:	9b01      	ldr	r3, [sp, #4]
 8004118:	6120      	str	r0, [r4, #16]
 800411a:	b15b      	cbz	r3, 8004134 <__smakebuf_r+0x74>
 800411c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004120:	4630      	mov	r0, r6
 8004122:	f000 f889 	bl	8004238 <_isatty_r>
 8004126:	b128      	cbz	r0, 8004134 <__smakebuf_r+0x74>
 8004128:	89a3      	ldrh	r3, [r4, #12]
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	f043 0301 	orr.w	r3, r3, #1
 8004132:	81a3      	strh	r3, [r4, #12]
 8004134:	89a0      	ldrh	r0, [r4, #12]
 8004136:	4305      	orrs	r5, r0
 8004138:	81a5      	strh	r5, [r4, #12]
 800413a:	e7cd      	b.n	80040d8 <__smakebuf_r+0x18>
 800413c:	080033b5 	.word	0x080033b5

08004140 <__malloc_lock>:
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <__malloc_lock+0x8>)
 8004142:	f7ff ba09 	b.w	8003558 <__retarget_lock_acquire_recursive>
 8004146:	bf00      	nop
 8004148:	20000170 	.word	0x20000170

0800414c <__malloc_unlock>:
 800414c:	4801      	ldr	r0, [pc, #4]	; (8004154 <__malloc_unlock+0x8>)
 800414e:	f7ff ba04 	b.w	800355a <__retarget_lock_release_recursive>
 8004152:	bf00      	nop
 8004154:	20000170 	.word	0x20000170

08004158 <_free_r>:
 8004158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800415a:	2900      	cmp	r1, #0
 800415c:	d044      	beq.n	80041e8 <_free_r+0x90>
 800415e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004162:	9001      	str	r0, [sp, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f1a1 0404 	sub.w	r4, r1, #4
 800416a:	bfb8      	it	lt
 800416c:	18e4      	addlt	r4, r4, r3
 800416e:	f7ff ffe7 	bl	8004140 <__malloc_lock>
 8004172:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <_free_r+0x94>)
 8004174:	9801      	ldr	r0, [sp, #4]
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	b933      	cbnz	r3, 8004188 <_free_r+0x30>
 800417a:	6063      	str	r3, [r4, #4]
 800417c:	6014      	str	r4, [r2, #0]
 800417e:	b003      	add	sp, #12
 8004180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004184:	f7ff bfe2 	b.w	800414c <__malloc_unlock>
 8004188:	42a3      	cmp	r3, r4
 800418a:	d908      	bls.n	800419e <_free_r+0x46>
 800418c:	6825      	ldr	r5, [r4, #0]
 800418e:	1961      	adds	r1, r4, r5
 8004190:	428b      	cmp	r3, r1
 8004192:	bf01      	itttt	eq
 8004194:	6819      	ldreq	r1, [r3, #0]
 8004196:	685b      	ldreq	r3, [r3, #4]
 8004198:	1949      	addeq	r1, r1, r5
 800419a:	6021      	streq	r1, [r4, #0]
 800419c:	e7ed      	b.n	800417a <_free_r+0x22>
 800419e:	461a      	mov	r2, r3
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	b10b      	cbz	r3, 80041a8 <_free_r+0x50>
 80041a4:	42a3      	cmp	r3, r4
 80041a6:	d9fa      	bls.n	800419e <_free_r+0x46>
 80041a8:	6811      	ldr	r1, [r2, #0]
 80041aa:	1855      	adds	r5, r2, r1
 80041ac:	42a5      	cmp	r5, r4
 80041ae:	d10b      	bne.n	80041c8 <_free_r+0x70>
 80041b0:	6824      	ldr	r4, [r4, #0]
 80041b2:	4421      	add	r1, r4
 80041b4:	1854      	adds	r4, r2, r1
 80041b6:	42a3      	cmp	r3, r4
 80041b8:	6011      	str	r1, [r2, #0]
 80041ba:	d1e0      	bne.n	800417e <_free_r+0x26>
 80041bc:	681c      	ldr	r4, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	6053      	str	r3, [r2, #4]
 80041c2:	4421      	add	r1, r4
 80041c4:	6011      	str	r1, [r2, #0]
 80041c6:	e7da      	b.n	800417e <_free_r+0x26>
 80041c8:	d902      	bls.n	80041d0 <_free_r+0x78>
 80041ca:	230c      	movs	r3, #12
 80041cc:	6003      	str	r3, [r0, #0]
 80041ce:	e7d6      	b.n	800417e <_free_r+0x26>
 80041d0:	6825      	ldr	r5, [r4, #0]
 80041d2:	1961      	adds	r1, r4, r5
 80041d4:	428b      	cmp	r3, r1
 80041d6:	bf04      	itt	eq
 80041d8:	6819      	ldreq	r1, [r3, #0]
 80041da:	685b      	ldreq	r3, [r3, #4]
 80041dc:	6063      	str	r3, [r4, #4]
 80041de:	bf04      	itt	eq
 80041e0:	1949      	addeq	r1, r1, r5
 80041e2:	6021      	streq	r1, [r4, #0]
 80041e4:	6054      	str	r4, [r2, #4]
 80041e6:	e7ca      	b.n	800417e <_free_r+0x26>
 80041e8:	b003      	add	sp, #12
 80041ea:	bd30      	pop	{r4, r5, pc}
 80041ec:	20000174 	.word	0x20000174

080041f0 <_read_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d07      	ldr	r5, [pc, #28]	; (8004210 <_read_r+0x20>)
 80041f4:	4604      	mov	r4, r0
 80041f6:	4608      	mov	r0, r1
 80041f8:	4611      	mov	r1, r2
 80041fa:	2200      	movs	r2, #0
 80041fc:	602a      	str	r2, [r5, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7fc fcdc 	bl	8000bbc <_read>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_read_r+0x1e>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_read_r+0x1e>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	2000017c 	.word	0x2000017c

08004214 <_fstat_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4d07      	ldr	r5, [pc, #28]	; (8004234 <_fstat_r+0x20>)
 8004218:	2300      	movs	r3, #0
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	f7fc fd10 	bl	8000c46 <_fstat>
 8004226:	1c43      	adds	r3, r0, #1
 8004228:	d102      	bne.n	8004230 <_fstat_r+0x1c>
 800422a:	682b      	ldr	r3, [r5, #0]
 800422c:	b103      	cbz	r3, 8004230 <_fstat_r+0x1c>
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	bd38      	pop	{r3, r4, r5, pc}
 8004232:	bf00      	nop
 8004234:	2000017c 	.word	0x2000017c

08004238 <_isatty_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4d06      	ldr	r5, [pc, #24]	; (8004254 <_isatty_r+0x1c>)
 800423c:	2300      	movs	r3, #0
 800423e:	4604      	mov	r4, r0
 8004240:	4608      	mov	r0, r1
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	f7fc fd0f 	bl	8000c66 <_isatty>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_isatty_r+0x1a>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_isatty_r+0x1a>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	2000017c 	.word	0x2000017c

08004258 <_init>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	bf00      	nop
 800425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425e:	bc08      	pop	{r3}
 8004260:	469e      	mov	lr, r3
 8004262:	4770      	bx	lr

08004264 <_fini>:
 8004264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004266:	bf00      	nop
 8004268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426a:	bc08      	pop	{r3}
 800426c:	469e      	mov	lr, r3
 800426e:	4770      	bx	lr
